// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/common/kafka/producer.go

// Package mock_kafkacommon is a generated GoMock package.
package mock_kafkacommon

import (
	reflect "reflect"

	kafka "github.com/confluentinc/confluent-kafka-go/v2/kafka"
	gomock "github.com/golang/mock/gomock"
	kafkacommon "github.com/redhatinsights/edge-api/pkg/common/kafka"
	models "github.com/redhatinsights/edge-api/pkg/models"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
}

// Events mocks base method.
func (m *MockProducer) Events() chan kafka.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events")
	ret0, _ := ret[0].(chan kafka.Event)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockProducerMockRecorder) Events() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockProducer)(nil).Events))
}

// Flush mocks base method.
func (m *MockProducer) Flush(timeoutMs int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", timeoutMs)
	ret0, _ := ret[0].(int)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockProducerMockRecorder) Flush(timeoutMs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockProducer)(nil).Flush), timeoutMs)
}

// GetFatalError mocks base method.
func (m *MockProducer) GetFatalError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFatalError")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFatalError indicates an expected call of GetFatalError.
func (mr *MockProducerMockRecorder) GetFatalError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFatalError", reflect.TypeOf((*MockProducer)(nil).GetFatalError))
}

// GetMetadata mocks base method.
func (m *MockProducer) GetMetadata(topic *string, allTopics bool, timeoutMs int) (*kafka.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", topic, allTopics, timeoutMs)
	ret0, _ := ret[0].(*kafka.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockProducerMockRecorder) GetMetadata(topic, allTopics, timeoutMs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockProducer)(nil).GetMetadata), topic, allTopics, timeoutMs)
}

// Len mocks base method.
func (m *MockProducer) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockProducerMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockProducer)(nil).Len))
}

// OffsetsForTimes mocks base method.
func (m *MockProducer) OffsetsForTimes(times []kafka.TopicPartition, timeoutMs int) ([]kafka.TopicPartition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OffsetsForTimes", times, timeoutMs)
	ret0, _ := ret[0].([]kafka.TopicPartition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OffsetsForTimes indicates an expected call of OffsetsForTimes.
func (mr *MockProducerMockRecorder) OffsetsForTimes(times, timeoutMs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OffsetsForTimes", reflect.TypeOf((*MockProducer)(nil).OffsetsForTimes), times, timeoutMs)
}

// Produce mocks base method.
func (m *MockProducer) Produce(msg *kafka.Message, deliveryChan chan kafka.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", msg, deliveryChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockProducerMockRecorder) Produce(msg, deliveryChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockProducer)(nil).Produce), msg, deliveryChan)
}

// ProduceChannel mocks base method.
func (m *MockProducer) ProduceChannel() chan *kafka.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceChannel")
	ret0, _ := ret[0].(chan *kafka.Message)
	return ret0
}

// ProduceChannel indicates an expected call of ProduceChannel.
func (mr *MockProducerMockRecorder) ProduceChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceChannel", reflect.TypeOf((*MockProducer)(nil).ProduceChannel))
}

// QueryWatermarkOffsets mocks base method.
func (m *MockProducer) QueryWatermarkOffsets(topic string, partition int32, timeoutMs int) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWatermarkOffsets", topic, partition, timeoutMs)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryWatermarkOffsets indicates an expected call of QueryWatermarkOffsets.
func (mr *MockProducerMockRecorder) QueryWatermarkOffsets(topic, partition, timeoutMs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWatermarkOffsets", reflect.TypeOf((*MockProducer)(nil).QueryWatermarkOffsets), topic, partition, timeoutMs)
}

// SetOAuthBearerToken mocks base method.
func (m *MockProducer) SetOAuthBearerToken(oauthBearerToken kafka.OAuthBearerToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOAuthBearerToken", oauthBearerToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOAuthBearerToken indicates an expected call of SetOAuthBearerToken.
func (mr *MockProducerMockRecorder) SetOAuthBearerToken(oauthBearerToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOAuthBearerToken", reflect.TypeOf((*MockProducer)(nil).SetOAuthBearerToken), oauthBearerToken)
}

// SetOAuthBearerTokenFailure mocks base method.
func (m *MockProducer) SetOAuthBearerTokenFailure(errstr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOAuthBearerTokenFailure", errstr)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOAuthBearerTokenFailure indicates an expected call of SetOAuthBearerTokenFailure.
func (mr *MockProducerMockRecorder) SetOAuthBearerTokenFailure(errstr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOAuthBearerTokenFailure", reflect.TypeOf((*MockProducer)(nil).SetOAuthBearerTokenFailure), errstr)
}

// String mocks base method.
func (m *MockProducer) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockProducerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockProducer)(nil).String))
}

// TestFatalError mocks base method.
func (m *MockProducer) TestFatalError(code kafka.ErrorCode, str string) kafka.ErrorCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestFatalError", code, str)
	ret0, _ := ret[0].(kafka.ErrorCode)
	return ret0
}

// TestFatalError indicates an expected call of TestFatalError.
func (mr *MockProducerMockRecorder) TestFatalError(code, str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestFatalError", reflect.TypeOf((*MockProducer)(nil).TestFatalError), code, str)
}

// MockProducerServiceInterface is a mock of ProducerServiceInterface interface.
type MockProducerServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProducerServiceInterfaceMockRecorder
}

// MockProducerServiceInterfaceMockRecorder is the mock recorder for MockProducerServiceInterface.
type MockProducerServiceInterfaceMockRecorder struct {
	mock *MockProducerServiceInterface
}

// NewMockProducerServiceInterface creates a new mock instance.
func NewMockProducerServiceInterface(ctrl *gomock.Controller) *MockProducerServiceInterface {
	mock := &MockProducerServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProducerServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerServiceInterface) EXPECT() *MockProducerServiceInterfaceMockRecorder {
	return m.recorder
}

// GetProducerInstance mocks base method.
func (m *MockProducerServiceInterface) GetProducerInstance() kafkacommon.Producer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducerInstance")
	ret0, _ := ret[0].(kafkacommon.Producer)
	return ret0
}

// GetProducerInstance indicates an expected call of GetProducerInstance.
func (mr *MockProducerServiceInterfaceMockRecorder) GetProducerInstance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducerInstance", reflect.TypeOf((*MockProducerServiceInterface)(nil).GetProducerInstance))
}

// ProduceEvent mocks base method.
func (m *MockProducerServiceInterface) ProduceEvent(requestedTopic, recordKey string, event models.CRCCloudEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceEvent", requestedTopic, recordKey, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceEvent indicates an expected call of ProduceEvent.
func (mr *MockProducerServiceInterfaceMockRecorder) ProduceEvent(requestedTopic, recordKey, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceEvent", reflect.TypeOf((*MockProducerServiceInterface)(nil).ProduceEvent), requestedTopic, recordKey, event)
}
