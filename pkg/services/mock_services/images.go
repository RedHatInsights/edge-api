// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/images.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/redhatinsights/edge-api/pkg/models"
)

// MockImageServiceInterface is a mock of ImageServiceInterface interface.
type MockImageServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockImageServiceInterfaceMockRecorder
}

// MockImageServiceInterfaceMockRecorder is the mock recorder for MockImageServiceInterface.
type MockImageServiceInterfaceMockRecorder struct {
	mock *MockImageServiceInterface
}

// NewMockImageServiceInterface creates a new mock instance.
func NewMockImageServiceInterface(ctrl *gomock.Controller) *MockImageServiceInterface {
	mock := &MockImageServiceInterface{ctrl: ctrl}
	mock.recorder = &MockImageServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageServiceInterface) EXPECT() *MockImageServiceInterfaceMockRecorder {
	return m.recorder
}

// AddUserInfo mocks base method.
func (m *MockImageServiceInterface) AddUserInfo(image *models.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserInfo", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserInfo indicates an expected call of AddUserInfo.
func (mr *MockImageServiceInterfaceMockRecorder) AddUserInfo(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserInfo", reflect.TypeOf((*MockImageServiceInterface)(nil).AddUserInfo), image)
}

// CreateImage mocks base method.
func (m *MockImageServiceInterface) CreateImage(image *models.Image, account string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", image, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImage mocks base method.
func (m *MockImageServiceInterface) UpdateImage(image *models.Image, account string, previous_image *models.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UdpateImage", image, account, previous_image)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockImageServiceInterfaceMockRecorder) CreateImage(image, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockImageServiceInterface)(nil).CreateImage), image, account)
}

// CreateRepoForImage mocks base method.
func (m *MockImageServiceInterface) CreateRepoForImage(i *models.Image) *models.Repo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepoForImage", i)
	ret0, _ := ret[0].(*models.Repo)
	return ret0
}

// CreateRepoForImage indicates an expected call of CreateRepoForImage.
func (mr *MockImageServiceInterfaceMockRecorder) CreateRepoForImage(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepoForImage", reflect.TypeOf((*MockImageServiceInterface)(nil).CreateRepoForImage), i)
}

// SetErrorStatusOnImage mocks base method.
func (m *MockImageServiceInterface) SetErrorStatusOnImage(err error, i *models.Image) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErrorStatusOnImage", err, i)
}

// SetErrorStatusOnImage indicates an expected call of SetErrorStatusOnImage.
func (mr *MockImageServiceInterfaceMockRecorder) SetErrorStatusOnImage(err, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErrorStatusOnImage", reflect.TypeOf((*MockImageServiceInterface)(nil).SetErrorStatusOnImage), err, i)
}

// UpdateImageStatus mocks base method.
func (m *MockImageServiceInterface) UpdateImageStatus(image *models.Image) (*models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageStatus", image)
	ret0, _ := ret[0].(*models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImageStatus indicates an expected call of UpdateImageStatus.
func (mr *MockImageServiceInterfaceMockRecorder) UpdateImageStatus(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageStatus", reflect.TypeOf((*MockImageServiceInterface)(nil).UpdateImageStatus), image)
}
