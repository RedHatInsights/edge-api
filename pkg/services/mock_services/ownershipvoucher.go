// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/ownershipvoucher.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fdo "github.com/redhatinsights/edge-api/pkg/clients/fdo"
	models "github.com/redhatinsights/edge-api/pkg/models"
)

// MockOwnershipVoucherServiceInterface is a mock of OwnershipVoucherServiceInterface interface.
type MockOwnershipVoucherServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOwnershipVoucherServiceInterfaceMockRecorder
}

// MockOwnershipVoucherServiceInterfaceMockRecorder is the mock recorder for MockOwnershipVoucherServiceInterface.
type MockOwnershipVoucherServiceInterfaceMockRecorder struct {
	mock *MockOwnershipVoucherServiceInterface
}

// NewMockOwnershipVoucherServiceInterface creates a new mock instance.
func NewMockOwnershipVoucherServiceInterface(ctrl *gomock.Controller) *MockOwnershipVoucherServiceInterface {
	mock := &MockOwnershipVoucherServiceInterface{ctrl: ctrl}
	mock.recorder = &MockOwnershipVoucherServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnershipVoucherServiceInterface) EXPECT() *MockOwnershipVoucherServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateFDOClient mocks base method.
func (m *MockOwnershipVoucherServiceInterface) CreateFDOClient() *fdo.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFDOClient")
	ret0, _ := ret[0].(*fdo.Client)
	return ret0
}

// CreateFDOClient indicates an expected call of CreateFDOClient.
func (mr *MockOwnershipVoucherServiceInterfaceMockRecorder) CreateFDOClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFDOClient", reflect.TypeOf((*MockOwnershipVoucherServiceInterface)(nil).CreateFDOClient))
}

// ParseVouchers mocks base method.
func (m *MockOwnershipVoucherServiceInterface) ParseVouchers(voucherBytes []byte) ([]models.OwnershipVoucherData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseVouchers", voucherBytes)
	ret0, _ := ret[0].([]models.OwnershipVoucherData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseVouchers indicates an expected call of ParseVouchers.
func (mr *MockOwnershipVoucherServiceInterfaceMockRecorder) ParseVouchers(voucherBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseVouchers", reflect.TypeOf((*MockOwnershipVoucherServiceInterface)(nil).ParseVouchers), voucherBytes)
}
