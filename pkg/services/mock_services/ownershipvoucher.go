// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/ownershipvoucher.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fdo "github.com/redhatinsights/edge-api/pkg/clients/fdo"
	models "github.com/redhatinsights/edge-api/pkg/models"
)

// MockOwnershipVoucherServiceInterface is a mock of OwnershipVoucherServiceInterface interface.
type MockOwnershipVoucherServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOwnershipVoucherServiceInterfaceMockRecorder
}

// MockOwnershipVoucherServiceInterfaceMockRecorder is the mock recorder for MockOwnershipVoucherServiceInterface.
type MockOwnershipVoucherServiceInterfaceMockRecorder struct {
	mock *MockOwnershipVoucherServiceInterface
}

// NewMockOwnershipVoucherServiceInterface creates a new mock instance.
func NewMockOwnershipVoucherServiceInterface(ctrl *gomock.Controller) *MockOwnershipVoucherServiceInterface {
	mock := &MockOwnershipVoucherServiceInterface{ctrl: ctrl}
	mock.recorder = &MockOwnershipVoucherServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnershipVoucherServiceInterface) EXPECT() *MockOwnershipVoucherServiceInterfaceMockRecorder {
	return m.recorder
}

// BatchUploadOwnershipVouchers mocks base method.
func (m *MockOwnershipVoucherServiceInterface) BatchUploadOwnershipVouchers(voucherBytes []byte, numOfOVs uint) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUploadOwnershipVouchers", voucherBytes, numOfOVs)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUploadOwnershipVouchers indicates an expected call of BatchUploadOwnershipVouchers.
func (mr *MockOwnershipVoucherServiceInterfaceMockRecorder) BatchUploadOwnershipVouchers(voucherBytes, numOfOVs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUploadOwnershipVouchers", reflect.TypeOf((*MockOwnershipVoucherServiceInterface)(nil).BatchUploadOwnershipVouchers), voucherBytes, numOfOVs)
}

// BatchDeleteOwnershipVouchers mocks base method.
func (m *MockOwnershipVoucherServiceInterface) BatchDeleteOwnershipVouchers(fdoUUIDList []string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteOwnershipVouchers", fdoUUIDList)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteOwnershipVouchers indicates an expected call of BatchDeleteOwnershipVouchers.
func (mr *MockOwnershipVoucherServiceInterfaceMockRecorder) BatchDeleteOwnershipVouchers(fdoUUIDList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteOwnershipVouchers", reflect.TypeOf((*MockOwnershipVoucherServiceInterface)(nil).BatchDeleteOwnershipVouchers), fdoUUIDList)
}

// ConnectDevices mocks base method.
func (m *MockOwnershipVoucherServiceInterface) ConnectDevices(fdoUUIDList []string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectDevices", fdoUUIDList)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectDevices indicates an expected call of ConnectDevices.
func (mr *MockOwnershipVoucherServiceInterfaceMockRecorder) ConnectDevices(fdoUUIDList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDevices", reflect.TypeOf((*MockOwnershipVoucherServiceInterface)(nil).ConnectDevices), fdoUUIDList)
}

// ReadOwnershipVouchers mocks base method.
func (m *MockOwnershipVoucherServiceInterface) ReadOwnershipVouchers(voucherBytes []byte) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOwnershipVouchers", voucherBytes)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOwnershipVouchers indicates an expected call of ReadOwnershipVouchers.
func (mr *MockOwnershipVoucherServiceInterfaceMockRecorder) ReadOwnershipVouchers(voucherBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOwnershipVouchers", reflect.TypeOf((*MockOwnershipVoucherServiceInterface)(nil).ReadOwnershipVouchers), voucherBytes)
}

// createFDOClient mocks base method.
func (m *MockOwnershipVoucherServiceInterface) createFDOClient() *fdo.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createFDOClient")
	ret0, _ := ret[0].(*fdo.Client)
	return ret0
}

// createFDOClient indicates an expected call of createFDOClient.
func (mr *MockOwnershipVoucherServiceInterfaceMockRecorder) createFDOClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createFDOClient", reflect.TypeOf((*MockOwnershipVoucherServiceInterface)(nil).createFDOClient))
}

// parseVouchers mocks base method.
func (m *MockOwnershipVoucherServiceInterface) parseVouchers(voucherBytes []byte) ([]models.OwnershipVoucherData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "parseVouchers", voucherBytes)
	ret0, _ := ret[0].([]models.OwnershipVoucherData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// parseVouchers indicates an expected call of parseVouchers.
func (mr *MockOwnershipVoucherServiceInterfaceMockRecorder) parseVouchers(voucherBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "parseVouchers", reflect.TypeOf((*MockOwnershipVoucherServiceInterface)(nil).parseVouchers), voucherBytes)
}

// storeOwnershipVouchers mocks base method.
func (m *MockOwnershipVoucherServiceInterface) storeOwnershipVouchers(data []models.OwnershipVoucherData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "storeOwnershipVouchers", data)
}

// storeOwnershipVouchers indicates an expected call of storeOwnershipVouchers.
func (mr *MockOwnershipVoucherServiceInterfaceMockRecorder) storeOwnershipVouchers(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "storeOwnershipVouchers", reflect.TypeOf((*MockOwnershipVoucherServiceInterface)(nil).storeOwnershipVouchers), data)
}
