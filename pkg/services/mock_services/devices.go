// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/devices.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	"fmt"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/redhatinsights/edge-api/pkg/models"
	services "github.com/redhatinsights/edge-api/pkg/services"
)

// MockDeviceServiceInterface is a mock of DeviceServiceInterface interface.
type MockDeviceServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceServiceInterfaceMockRecorder
}

// MockDeviceServiceInterfaceMockRecorder is the mock recorder for MockDeviceServiceInterface.
type MockDeviceServiceInterfaceMockRecorder struct {
	mock *MockDeviceServiceInterface
}

// NewMockDeviceServiceInterface creates a new mock instance.
func NewMockDeviceServiceInterface(ctrl *gomock.Controller) *MockDeviceServiceInterface {
	mock := &MockDeviceServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDeviceServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceServiceInterface) EXPECT() *MockDeviceServiceInterfaceMockRecorder {
	return m.recorder
}

// GetDeviceByID mocks base method.
func (m *MockDeviceServiceInterface) GetDeviceByID(deviceID uint) (*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceByID", deviceID)
	ret0, _ := ret[0].(*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceByID indicates an expected call of GetDeviceByID.
func (mr *MockDeviceServiceInterfaceMockRecorder) GetDeviceByID(deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceByID", reflect.TypeOf((*MockDeviceServiceInterface)(nil).GetDeviceByID), deviceID)
}

// GetDeviceByUUID mocks base method.
func (m *MockDeviceServiceInterface) GetDeviceByUUID(deviceUUID string) (*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceByUUID", deviceUUID)
	ret0, _ := ret[0].(*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceByUUID indicates an expected call of GetDeviceByUUID.
func (mr *MockDeviceServiceInterfaceMockRecorder) GetDeviceByUUID(deviceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceByUUID", reflect.TypeOf((*MockDeviceServiceInterface)(nil).GetDeviceByUUID), deviceUUID)
}

// GetDeviceImageInfo mocks base method.
func (m *MockDeviceServiceInterface) GetDeviceImageInfo(currentCheckSum string) (services.ImageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceImageInfo", currentCheckSum)
	ret0, _ := ret[0].(services.ImageInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceImageInfo indicates an expected call of GetDeviceImageInfo.
func (mr *MockDeviceServiceInterfaceMockRecorder) GetDeviceImageInfo(currentCheckSum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	fmt.Print("************************\n")
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceImageInfo", reflect.TypeOf((*MockDeviceServiceInterface)(nil).GetDeviceImageInfo), currentCheckSum)
}

// GetUpdateAvailableForDevice mocks base method.
func (m *MockDeviceServiceInterface) GetUpdateAvailableForDevice(currentCheckSum string) ([]services.ImageUpdateAvailable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateAvailableForDevice", currentCheckSum)
	ret0, _ := ret[0].([]services.ImageUpdateAvailable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateAvailableForDevice indicates an expected call of GetUpdateAvailableForDevice.
func (mr *MockDeviceServiceInterfaceMockRecorder) GetUpdateAvailableForDevice(currentCheckSum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateAvailableForDevice", reflect.TypeOf((*MockDeviceServiceInterface)(nil).GetUpdateAvailableForDevice), currentCheckSum)
}
