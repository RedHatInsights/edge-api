// Package pulp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package pulp

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes                         = "basicAuth.Scopes"
	CookieAuthScopes                        = "cookieAuth.Scopes"
	Json_header_remote_authenticationScopes = "json_header_remote_authentication.Scopes"
)

// Defines values for StatesEnum.
const (
	StatesEnumCanceled  StatesEnum = "canceled"
	StatesEnumCompleted StatesEnum = "completed"
	StatesEnumFailed    StatesEnum = "failed"
	StatesEnumSkipped   StatesEnum = "skipped"
)

// Defines values for StorageClassEnum.
const (
	PulpcoreAppModelsStorageFileSystem       StorageClassEnum = "pulpcore.app.models.storage.FileSystem"
	StoragesBackendsAzureStorageAzureStorage StorageClassEnum = "storages.backends.azure_storage.AzureStorage"
	StoragesBackendsS3boto3S3Boto3Storage    StorageClassEnum = "storages.backends.s3boto3.S3Boto3Storage"
)

// Defines values for ArtifactsListParamsOrdering.
const (
	ArtifactsListParamsOrderingFile                     ArtifactsListParamsOrdering = "file"
	ArtifactsListParamsOrderingMd5                      ArtifactsListParamsOrdering = "md5"
	ArtifactsListParamsOrderingMinusFile                ArtifactsListParamsOrdering = "-file"
	ArtifactsListParamsOrderingMinusMd5                 ArtifactsListParamsOrdering = "-md5"
	ArtifactsListParamsOrderingMinusPk                  ArtifactsListParamsOrdering = "-pk"
	ArtifactsListParamsOrderingMinusPulpCreated         ArtifactsListParamsOrdering = "-pulp_created"
	ArtifactsListParamsOrderingMinusPulpId              ArtifactsListParamsOrdering = "-pulp_id"
	ArtifactsListParamsOrderingMinusPulpLastUpdated     ArtifactsListParamsOrdering = "-pulp_last_updated"
	ArtifactsListParamsOrderingMinusSha1                ArtifactsListParamsOrdering = "-sha1"
	ArtifactsListParamsOrderingMinusSha224              ArtifactsListParamsOrdering = "-sha224"
	ArtifactsListParamsOrderingMinusSha256              ArtifactsListParamsOrdering = "-sha256"
	ArtifactsListParamsOrderingMinusSha384              ArtifactsListParamsOrdering = "-sha384"
	ArtifactsListParamsOrderingMinusSha512              ArtifactsListParamsOrdering = "-sha512"
	ArtifactsListParamsOrderingMinusSize                ArtifactsListParamsOrdering = "-size"
	ArtifactsListParamsOrderingMinusTimestampOfInterest ArtifactsListParamsOrdering = "-timestamp_of_interest"
	ArtifactsListParamsOrderingPk                       ArtifactsListParamsOrdering = "pk"
	ArtifactsListParamsOrderingPulpCreated              ArtifactsListParamsOrdering = "pulp_created"
	ArtifactsListParamsOrderingPulpId                   ArtifactsListParamsOrdering = "pulp_id"
	ArtifactsListParamsOrderingPulpLastUpdated          ArtifactsListParamsOrdering = "pulp_last_updated"
	ArtifactsListParamsOrderingSha1                     ArtifactsListParamsOrdering = "sha1"
	ArtifactsListParamsOrderingSha224                   ArtifactsListParamsOrdering = "sha224"
	ArtifactsListParamsOrderingSha256                   ArtifactsListParamsOrdering = "sha256"
	ArtifactsListParamsOrderingSha384                   ArtifactsListParamsOrdering = "sha384"
	ArtifactsListParamsOrderingSha512                   ArtifactsListParamsOrdering = "sha512"
	ArtifactsListParamsOrderingSize                     ArtifactsListParamsOrdering = "size"
	ArtifactsListParamsOrderingTimestampOfInterest      ArtifactsListParamsOrdering = "timestamp_of_interest"
)

// Defines values for ContentFileFilesListParamsOrdering.
const (
	ContentFileFilesListParamsOrderingDigest                   ContentFileFilesListParamsOrdering = "digest"
	ContentFileFilesListParamsOrderingMinusDigest              ContentFileFilesListParamsOrdering = "-digest"
	ContentFileFilesListParamsOrderingMinusPk                  ContentFileFilesListParamsOrdering = "-pk"
	ContentFileFilesListParamsOrderingMinusPulpCreated         ContentFileFilesListParamsOrdering = "-pulp_created"
	ContentFileFilesListParamsOrderingMinusPulpId              ContentFileFilesListParamsOrdering = "-pulp_id"
	ContentFileFilesListParamsOrderingMinusPulpLastUpdated     ContentFileFilesListParamsOrdering = "-pulp_last_updated"
	ContentFileFilesListParamsOrderingMinusPulpType            ContentFileFilesListParamsOrdering = "-pulp_type"
	ContentFileFilesListParamsOrderingMinusRelativePath        ContentFileFilesListParamsOrdering = "-relative_path"
	ContentFileFilesListParamsOrderingMinusTimestampOfInterest ContentFileFilesListParamsOrdering = "-timestamp_of_interest"
	ContentFileFilesListParamsOrderingMinusUpstreamId          ContentFileFilesListParamsOrdering = "-upstream_id"
	ContentFileFilesListParamsOrderingPk                       ContentFileFilesListParamsOrdering = "pk"
	ContentFileFilesListParamsOrderingPulpCreated              ContentFileFilesListParamsOrdering = "pulp_created"
	ContentFileFilesListParamsOrderingPulpId                   ContentFileFilesListParamsOrdering = "pulp_id"
	ContentFileFilesListParamsOrderingPulpLastUpdated          ContentFileFilesListParamsOrdering = "pulp_last_updated"
	ContentFileFilesListParamsOrderingPulpType                 ContentFileFilesListParamsOrdering = "pulp_type"
	ContentFileFilesListParamsOrderingRelativePath             ContentFileFilesListParamsOrdering = "relative_path"
	ContentFileFilesListParamsOrderingTimestampOfInterest      ContentFileFilesListParamsOrdering = "timestamp_of_interest"
	ContentFileFilesListParamsOrderingUpstreamId               ContentFileFilesListParamsOrdering = "upstream_id"
)

// Defines values for ContentOstreeContentListParamsOrdering.
const (
	ContentOstreeContentListParamsOrderingMinusPk ContentOstreeContentListParamsOrdering = "-pk"
	ContentOstreeContentListParamsOrderingPk      ContentOstreeContentListParamsOrdering = "pk"
)

// Defines values for ContentguardsCoreCompositeListParamsOrdering.
const (
	ContentguardsCoreCompositeListParamsOrderingDescription          ContentguardsCoreCompositeListParamsOrdering = "description"
	ContentguardsCoreCompositeListParamsOrderingMinusDescription     ContentguardsCoreCompositeListParamsOrdering = "-description"
	ContentguardsCoreCompositeListParamsOrderingMinusName            ContentguardsCoreCompositeListParamsOrdering = "-name"
	ContentguardsCoreCompositeListParamsOrderingMinusPk              ContentguardsCoreCompositeListParamsOrdering = "-pk"
	ContentguardsCoreCompositeListParamsOrderingMinusPulpCreated     ContentguardsCoreCompositeListParamsOrdering = "-pulp_created"
	ContentguardsCoreCompositeListParamsOrderingMinusPulpId          ContentguardsCoreCompositeListParamsOrdering = "-pulp_id"
	ContentguardsCoreCompositeListParamsOrderingMinusPulpLastUpdated ContentguardsCoreCompositeListParamsOrdering = "-pulp_last_updated"
	ContentguardsCoreCompositeListParamsOrderingMinusPulpType        ContentguardsCoreCompositeListParamsOrdering = "-pulp_type"
	ContentguardsCoreCompositeListParamsOrderingName                 ContentguardsCoreCompositeListParamsOrdering = "name"
	ContentguardsCoreCompositeListParamsOrderingPk                   ContentguardsCoreCompositeListParamsOrdering = "pk"
	ContentguardsCoreCompositeListParamsOrderingPulpCreated          ContentguardsCoreCompositeListParamsOrdering = "pulp_created"
	ContentguardsCoreCompositeListParamsOrderingPulpId               ContentguardsCoreCompositeListParamsOrdering = "pulp_id"
	ContentguardsCoreCompositeListParamsOrderingPulpLastUpdated      ContentguardsCoreCompositeListParamsOrdering = "pulp_last_updated"
	ContentguardsCoreCompositeListParamsOrderingPulpType             ContentguardsCoreCompositeListParamsOrdering = "pulp_type"
)

// Defines values for ContentguardsCoreHeaderListParamsOrdering.
const (
	ContentguardsCoreHeaderListParamsOrderingDescription          ContentguardsCoreHeaderListParamsOrdering = "description"
	ContentguardsCoreHeaderListParamsOrderingMinusDescription     ContentguardsCoreHeaderListParamsOrdering = "-description"
	ContentguardsCoreHeaderListParamsOrderingMinusName            ContentguardsCoreHeaderListParamsOrdering = "-name"
	ContentguardsCoreHeaderListParamsOrderingMinusPk              ContentguardsCoreHeaderListParamsOrdering = "-pk"
	ContentguardsCoreHeaderListParamsOrderingMinusPulpCreated     ContentguardsCoreHeaderListParamsOrdering = "-pulp_created"
	ContentguardsCoreHeaderListParamsOrderingMinusPulpId          ContentguardsCoreHeaderListParamsOrdering = "-pulp_id"
	ContentguardsCoreHeaderListParamsOrderingMinusPulpLastUpdated ContentguardsCoreHeaderListParamsOrdering = "-pulp_last_updated"
	ContentguardsCoreHeaderListParamsOrderingMinusPulpType        ContentguardsCoreHeaderListParamsOrdering = "-pulp_type"
	ContentguardsCoreHeaderListParamsOrderingName                 ContentguardsCoreHeaderListParamsOrdering = "name"
	ContentguardsCoreHeaderListParamsOrderingPk                   ContentguardsCoreHeaderListParamsOrdering = "pk"
	ContentguardsCoreHeaderListParamsOrderingPulpCreated          ContentguardsCoreHeaderListParamsOrdering = "pulp_created"
	ContentguardsCoreHeaderListParamsOrderingPulpId               ContentguardsCoreHeaderListParamsOrdering = "pulp_id"
	ContentguardsCoreHeaderListParamsOrderingPulpLastUpdated      ContentguardsCoreHeaderListParamsOrdering = "pulp_last_updated"
	ContentguardsCoreHeaderListParamsOrderingPulpType             ContentguardsCoreHeaderListParamsOrdering = "pulp_type"
)

// Defines values for ContentguardsCoreRbacListParamsOrdering.
const (
	ContentguardsCoreRbacListParamsOrderingDescription          ContentguardsCoreRbacListParamsOrdering = "description"
	ContentguardsCoreRbacListParamsOrderingMinusDescription     ContentguardsCoreRbacListParamsOrdering = "-description"
	ContentguardsCoreRbacListParamsOrderingMinusName            ContentguardsCoreRbacListParamsOrdering = "-name"
	ContentguardsCoreRbacListParamsOrderingMinusPk              ContentguardsCoreRbacListParamsOrdering = "-pk"
	ContentguardsCoreRbacListParamsOrderingMinusPulpCreated     ContentguardsCoreRbacListParamsOrdering = "-pulp_created"
	ContentguardsCoreRbacListParamsOrderingMinusPulpId          ContentguardsCoreRbacListParamsOrdering = "-pulp_id"
	ContentguardsCoreRbacListParamsOrderingMinusPulpLastUpdated ContentguardsCoreRbacListParamsOrdering = "-pulp_last_updated"
	ContentguardsCoreRbacListParamsOrderingMinusPulpType        ContentguardsCoreRbacListParamsOrdering = "-pulp_type"
	ContentguardsCoreRbacListParamsOrderingName                 ContentguardsCoreRbacListParamsOrdering = "name"
	ContentguardsCoreRbacListParamsOrderingPk                   ContentguardsCoreRbacListParamsOrdering = "pk"
	ContentguardsCoreRbacListParamsOrderingPulpCreated          ContentguardsCoreRbacListParamsOrdering = "pulp_created"
	ContentguardsCoreRbacListParamsOrderingPulpId               ContentguardsCoreRbacListParamsOrdering = "pulp_id"
	ContentguardsCoreRbacListParamsOrderingPulpLastUpdated      ContentguardsCoreRbacListParamsOrdering = "pulp_last_updated"
	ContentguardsCoreRbacListParamsOrderingPulpType             ContentguardsCoreRbacListParamsOrdering = "pulp_type"
)

// Defines values for DistributionsOstreeOstreeListParamsOrdering.
const (
	DistributionsOstreeOstreeListParamsOrderingBasePath             DistributionsOstreeOstreeListParamsOrdering = "base_path"
	DistributionsOstreeOstreeListParamsOrderingHidden               DistributionsOstreeOstreeListParamsOrdering = "hidden"
	DistributionsOstreeOstreeListParamsOrderingMinusBasePath        DistributionsOstreeOstreeListParamsOrdering = "-base_path"
	DistributionsOstreeOstreeListParamsOrderingMinusHidden          DistributionsOstreeOstreeListParamsOrdering = "-hidden"
	DistributionsOstreeOstreeListParamsOrderingMinusName            DistributionsOstreeOstreeListParamsOrdering = "-name"
	DistributionsOstreeOstreeListParamsOrderingMinusPk              DistributionsOstreeOstreeListParamsOrdering = "-pk"
	DistributionsOstreeOstreeListParamsOrderingMinusPulpCreated     DistributionsOstreeOstreeListParamsOrdering = "-pulp_created"
	DistributionsOstreeOstreeListParamsOrderingMinusPulpId          DistributionsOstreeOstreeListParamsOrdering = "-pulp_id"
	DistributionsOstreeOstreeListParamsOrderingMinusPulpLabels      DistributionsOstreeOstreeListParamsOrdering = "-pulp_labels"
	DistributionsOstreeOstreeListParamsOrderingMinusPulpLastUpdated DistributionsOstreeOstreeListParamsOrdering = "-pulp_last_updated"
	DistributionsOstreeOstreeListParamsOrderingMinusPulpType        DistributionsOstreeOstreeListParamsOrdering = "-pulp_type"
	DistributionsOstreeOstreeListParamsOrderingName                 DistributionsOstreeOstreeListParamsOrdering = "name"
	DistributionsOstreeOstreeListParamsOrderingPk                   DistributionsOstreeOstreeListParamsOrdering = "pk"
	DistributionsOstreeOstreeListParamsOrderingPulpCreated          DistributionsOstreeOstreeListParamsOrdering = "pulp_created"
	DistributionsOstreeOstreeListParamsOrderingPulpId               DistributionsOstreeOstreeListParamsOrdering = "pulp_id"
	DistributionsOstreeOstreeListParamsOrderingPulpLabels           DistributionsOstreeOstreeListParamsOrdering = "pulp_labels"
	DistributionsOstreeOstreeListParamsOrderingPulpLastUpdated      DistributionsOstreeOstreeListParamsOrdering = "pulp_last_updated"
	DistributionsOstreeOstreeListParamsOrderingPulpType             DistributionsOstreeOstreeListParamsOrdering = "pulp_type"
)

// Defines values for DomainsListParamsOrdering.
const (
	DomainsListParamsOrderingDescription                   DomainsListParamsOrdering = "description"
	DomainsListParamsOrderingHideGuardedDistributions      DomainsListParamsOrdering = "hide_guarded_distributions"
	DomainsListParamsOrderingMinusDescription              DomainsListParamsOrdering = "-description"
	DomainsListParamsOrderingMinusHideGuardedDistributions DomainsListParamsOrdering = "-hide_guarded_distributions"
	DomainsListParamsOrderingMinusName                     DomainsListParamsOrdering = "-name"
	DomainsListParamsOrderingMinusPk                       DomainsListParamsOrdering = "-pk"
	DomainsListParamsOrderingMinusPulpCreated              DomainsListParamsOrdering = "-pulp_created"
	DomainsListParamsOrderingMinusPulpId                   DomainsListParamsOrdering = "-pulp_id"
	DomainsListParamsOrderingMinusPulpLastUpdated          DomainsListParamsOrdering = "-pulp_last_updated"
	DomainsListParamsOrderingMinusRedirectToObjectStorage  DomainsListParamsOrdering = "-redirect_to_object_storage"
	DomainsListParamsOrderingMinusStorageClass             DomainsListParamsOrdering = "-storage_class"
	DomainsListParamsOrderingMinusStorageSettings          DomainsListParamsOrdering = "-storage_settings"
	DomainsListParamsOrderingName                          DomainsListParamsOrdering = "name"
	DomainsListParamsOrderingPk                            DomainsListParamsOrdering = "pk"
	DomainsListParamsOrderingPulpCreated                   DomainsListParamsOrdering = "pulp_created"
	DomainsListParamsOrderingPulpId                        DomainsListParamsOrdering = "pulp_id"
	DomainsListParamsOrderingPulpLastUpdated               DomainsListParamsOrdering = "pulp_last_updated"
	DomainsListParamsOrderingRedirectToObjectStorage       DomainsListParamsOrdering = "redirect_to_object_storage"
	DomainsListParamsOrderingStorageClass                  DomainsListParamsOrdering = "storage_class"
	DomainsListParamsOrderingStorageSettings               DomainsListParamsOrdering = "storage_settings"
)

// Defines values for RepositoriesFileFileListParamsOrdering.
const (
	RepositoriesFileFileListParamsOrderingDescription             RepositoriesFileFileListParamsOrdering = "description"
	RepositoriesFileFileListParamsOrderingMinusDescription        RepositoriesFileFileListParamsOrdering = "-description"
	RepositoriesFileFileListParamsOrderingMinusName               RepositoriesFileFileListParamsOrdering = "-name"
	RepositoriesFileFileListParamsOrderingMinusNextVersion        RepositoriesFileFileListParamsOrdering = "-next_version"
	RepositoriesFileFileListParamsOrderingMinusPk                 RepositoriesFileFileListParamsOrdering = "-pk"
	RepositoriesFileFileListParamsOrderingMinusPulpCreated        RepositoriesFileFileListParamsOrdering = "-pulp_created"
	RepositoriesFileFileListParamsOrderingMinusPulpId             RepositoriesFileFileListParamsOrdering = "-pulp_id"
	RepositoriesFileFileListParamsOrderingMinusPulpLabels         RepositoriesFileFileListParamsOrdering = "-pulp_labels"
	RepositoriesFileFileListParamsOrderingMinusPulpLastUpdated    RepositoriesFileFileListParamsOrdering = "-pulp_last_updated"
	RepositoriesFileFileListParamsOrderingMinusPulpType           RepositoriesFileFileListParamsOrdering = "-pulp_type"
	RepositoriesFileFileListParamsOrderingMinusRetainRepoVersions RepositoriesFileFileListParamsOrdering = "-retain_repo_versions"
	RepositoriesFileFileListParamsOrderingMinusUserHidden         RepositoriesFileFileListParamsOrdering = "-user_hidden"
	RepositoriesFileFileListParamsOrderingName                    RepositoriesFileFileListParamsOrdering = "name"
	RepositoriesFileFileListParamsOrderingNextVersion             RepositoriesFileFileListParamsOrdering = "next_version"
	RepositoriesFileFileListParamsOrderingPk                      RepositoriesFileFileListParamsOrdering = "pk"
	RepositoriesFileFileListParamsOrderingPulpCreated             RepositoriesFileFileListParamsOrdering = "pulp_created"
	RepositoriesFileFileListParamsOrderingPulpId                  RepositoriesFileFileListParamsOrdering = "pulp_id"
	RepositoriesFileFileListParamsOrderingPulpLabels              RepositoriesFileFileListParamsOrdering = "pulp_labels"
	RepositoriesFileFileListParamsOrderingPulpLastUpdated         RepositoriesFileFileListParamsOrdering = "pulp_last_updated"
	RepositoriesFileFileListParamsOrderingPulpType                RepositoriesFileFileListParamsOrdering = "pulp_type"
	RepositoriesFileFileListParamsOrderingRetainRepoVersions      RepositoriesFileFileListParamsOrdering = "retain_repo_versions"
	RepositoriesFileFileListParamsOrderingUserHidden              RepositoriesFileFileListParamsOrdering = "user_hidden"
)

// Defines values for RepositoriesFileFileVersionsListParamsOrdering.
const (
	RepositoriesFileFileVersionsListParamsOrderingComplete             RepositoriesFileFileVersionsListParamsOrdering = "complete"
	RepositoriesFileFileVersionsListParamsOrderingInfo                 RepositoriesFileFileVersionsListParamsOrdering = "info"
	RepositoriesFileFileVersionsListParamsOrderingMinusComplete        RepositoriesFileFileVersionsListParamsOrdering = "-complete"
	RepositoriesFileFileVersionsListParamsOrderingMinusInfo            RepositoriesFileFileVersionsListParamsOrdering = "-info"
	RepositoriesFileFileVersionsListParamsOrderingMinusNumber          RepositoriesFileFileVersionsListParamsOrdering = "-number"
	RepositoriesFileFileVersionsListParamsOrderingMinusPk              RepositoriesFileFileVersionsListParamsOrdering = "-pk"
	RepositoriesFileFileVersionsListParamsOrderingMinusPulpCreated     RepositoriesFileFileVersionsListParamsOrdering = "-pulp_created"
	RepositoriesFileFileVersionsListParamsOrderingMinusPulpId          RepositoriesFileFileVersionsListParamsOrdering = "-pulp_id"
	RepositoriesFileFileVersionsListParamsOrderingMinusPulpLastUpdated RepositoriesFileFileVersionsListParamsOrdering = "-pulp_last_updated"
	RepositoriesFileFileVersionsListParamsOrderingNumber               RepositoriesFileFileVersionsListParamsOrdering = "number"
	RepositoriesFileFileVersionsListParamsOrderingPk                   RepositoriesFileFileVersionsListParamsOrdering = "pk"
	RepositoriesFileFileVersionsListParamsOrderingPulpCreated          RepositoriesFileFileVersionsListParamsOrdering = "pulp_created"
	RepositoriesFileFileVersionsListParamsOrderingPulpId               RepositoriesFileFileVersionsListParamsOrdering = "pulp_id"
	RepositoriesFileFileVersionsListParamsOrderingPulpLastUpdated      RepositoriesFileFileVersionsListParamsOrdering = "pulp_last_updated"
)

// Defines values for RepositoriesOstreeOstreeListParamsOrdering.
const (
	RepositoriesOstreeOstreeListParamsOrderingDescription             RepositoriesOstreeOstreeListParamsOrdering = "description"
	RepositoriesOstreeOstreeListParamsOrderingMinusDescription        RepositoriesOstreeOstreeListParamsOrdering = "-description"
	RepositoriesOstreeOstreeListParamsOrderingMinusName               RepositoriesOstreeOstreeListParamsOrdering = "-name"
	RepositoriesOstreeOstreeListParamsOrderingMinusNextVersion        RepositoriesOstreeOstreeListParamsOrdering = "-next_version"
	RepositoriesOstreeOstreeListParamsOrderingMinusPk                 RepositoriesOstreeOstreeListParamsOrdering = "-pk"
	RepositoriesOstreeOstreeListParamsOrderingMinusPulpCreated        RepositoriesOstreeOstreeListParamsOrdering = "-pulp_created"
	RepositoriesOstreeOstreeListParamsOrderingMinusPulpId             RepositoriesOstreeOstreeListParamsOrdering = "-pulp_id"
	RepositoriesOstreeOstreeListParamsOrderingMinusPulpLabels         RepositoriesOstreeOstreeListParamsOrdering = "-pulp_labels"
	RepositoriesOstreeOstreeListParamsOrderingMinusPulpLastUpdated    RepositoriesOstreeOstreeListParamsOrdering = "-pulp_last_updated"
	RepositoriesOstreeOstreeListParamsOrderingMinusPulpType           RepositoriesOstreeOstreeListParamsOrdering = "-pulp_type"
	RepositoriesOstreeOstreeListParamsOrderingMinusRetainRepoVersions RepositoriesOstreeOstreeListParamsOrdering = "-retain_repo_versions"
	RepositoriesOstreeOstreeListParamsOrderingMinusUserHidden         RepositoriesOstreeOstreeListParamsOrdering = "-user_hidden"
	RepositoriesOstreeOstreeListParamsOrderingName                    RepositoriesOstreeOstreeListParamsOrdering = "name"
	RepositoriesOstreeOstreeListParamsOrderingNextVersion             RepositoriesOstreeOstreeListParamsOrdering = "next_version"
	RepositoriesOstreeOstreeListParamsOrderingPk                      RepositoriesOstreeOstreeListParamsOrdering = "pk"
	RepositoriesOstreeOstreeListParamsOrderingPulpCreated             RepositoriesOstreeOstreeListParamsOrdering = "pulp_created"
	RepositoriesOstreeOstreeListParamsOrderingPulpId                  RepositoriesOstreeOstreeListParamsOrdering = "pulp_id"
	RepositoriesOstreeOstreeListParamsOrderingPulpLabels              RepositoriesOstreeOstreeListParamsOrdering = "pulp_labels"
	RepositoriesOstreeOstreeListParamsOrderingPulpLastUpdated         RepositoriesOstreeOstreeListParamsOrdering = "pulp_last_updated"
	RepositoriesOstreeOstreeListParamsOrderingPulpType                RepositoriesOstreeOstreeListParamsOrdering = "pulp_type"
	RepositoriesOstreeOstreeListParamsOrderingRetainRepoVersions      RepositoriesOstreeOstreeListParamsOrdering = "retain_repo_versions"
	RepositoriesOstreeOstreeListParamsOrderingUserHidden              RepositoriesOstreeOstreeListParamsOrdering = "user_hidden"
)

// Defines values for TasksListParamsOrdering.
const (
	TasksListParamsOrderingEncArgs                      TasksListParamsOrdering = "enc_args"
	TasksListParamsOrderingEncKwargs                    TasksListParamsOrdering = "enc_kwargs"
	TasksListParamsOrderingError                        TasksListParamsOrdering = "error"
	TasksListParamsOrderingFinishedAt                   TasksListParamsOrdering = "finished_at"
	TasksListParamsOrderingLoggingCid                   TasksListParamsOrdering = "logging_cid"
	TasksListParamsOrderingMinusEncArgs                 TasksListParamsOrdering = "-enc_args"
	TasksListParamsOrderingMinusEncKwargs               TasksListParamsOrdering = "-enc_kwargs"
	TasksListParamsOrderingMinusError                   TasksListParamsOrdering = "-error"
	TasksListParamsOrderingMinusFinishedAt              TasksListParamsOrdering = "-finished_at"
	TasksListParamsOrderingMinusLoggingCid              TasksListParamsOrdering = "-logging_cid"
	TasksListParamsOrderingMinusName                    TasksListParamsOrdering = "-name"
	TasksListParamsOrderingMinusPk                      TasksListParamsOrdering = "-pk"
	TasksListParamsOrderingMinusPulpCreated             TasksListParamsOrdering = "-pulp_created"
	TasksListParamsOrderingMinusPulpId                  TasksListParamsOrdering = "-pulp_id"
	TasksListParamsOrderingMinusPulpLastUpdated         TasksListParamsOrdering = "-pulp_last_updated"
	TasksListParamsOrderingMinusReservedResourcesRecord TasksListParamsOrdering = "-reserved_resources_record"
	TasksListParamsOrderingMinusStartedAt               TasksListParamsOrdering = "-started_at"
	TasksListParamsOrderingMinusState                   TasksListParamsOrdering = "-state"
	TasksListParamsOrderingMinusUnblockedAt             TasksListParamsOrdering = "-unblocked_at"
	TasksListParamsOrderingMinusVersions                TasksListParamsOrdering = "-versions"
	TasksListParamsOrderingName                         TasksListParamsOrdering = "name"
	TasksListParamsOrderingPk                           TasksListParamsOrdering = "pk"
	TasksListParamsOrderingPulpCreated                  TasksListParamsOrdering = "pulp_created"
	TasksListParamsOrderingPulpId                       TasksListParamsOrdering = "pulp_id"
	TasksListParamsOrderingPulpLastUpdated              TasksListParamsOrdering = "pulp_last_updated"
	TasksListParamsOrderingReservedResourcesRecord      TasksListParamsOrdering = "reserved_resources_record"
	TasksListParamsOrderingStartedAt                    TasksListParamsOrdering = "started_at"
	TasksListParamsOrderingState                        TasksListParamsOrdering = "state"
	TasksListParamsOrderingUnblockedAt                  TasksListParamsOrdering = "unblocked_at"
	TasksListParamsOrderingVersions                     TasksListParamsOrdering = "versions"
)

// Defines values for TasksListParamsState.
const (
	TasksListParamsStateCanceled  TasksListParamsState = "canceled"
	TasksListParamsStateCanceling TasksListParamsState = "canceling"
	TasksListParamsStateCompleted TasksListParamsState = "completed"
	TasksListParamsStateFailed    TasksListParamsState = "failed"
	TasksListParamsStateRunning   TasksListParamsState = "running"
	TasksListParamsStateSkipped   TasksListParamsState = "skipped"
	TasksListParamsStateWaiting   TasksListParamsState = "waiting"
)

// Artifact Base serializer for use with :class:`pulpcore.app.models.Model`
//
// This ensures that all Serializers provide values for the 'pulp_href` field.
//
// The class provides a default for the “ref_name“ attribute in the
// ModelSerializers's “Meta“ class. This ensures that the OpenAPI definitions
// of plugins are namespaced properly.
type Artifact struct {
	// File The stored file.
	File openapi_types.File `json:"file"`

	// Md5 The MD5 checksum of the file if available.
	Md5 *string `json:"md5"`

	// Sha1 The SHA-1 checksum of the file if available.
	Sha1 *string `json:"sha1"`

	// Sha224 The SHA-224 checksum of the file if available.
	Sha224 *string `json:"sha224"`

	// Sha256 The SHA-256 checksum of the file if available.
	Sha256 *string `json:"sha256"`

	// Sha384 The SHA-384 checksum of the file if available.
	Sha384 *string `json:"sha384"`

	// Sha512 The SHA-512 checksum of the file if available.
	Sha512 *string `json:"sha512"`

	// Size The size of the file in bytes.
	Size *int64 `json:"size,omitempty"`
}

// ArtifactResponse Base serializer for use with :class:`pulpcore.app.models.Model`
//
// This ensures that all Serializers provide values for the 'pulp_href` field.
//
// The class provides a default for the “ref_name“ attribute in the
// ModelSerializers's “Meta“ class. This ensures that the OpenAPI definitions
// of plugins are namespaced properly.
type ArtifactResponse struct {
	// File The stored file.
	File string `json:"file"`

	// Md5 The MD5 checksum of the file if available.
	Md5 *string `json:"md5"`

	// PulpCreated Timestamp of creation.
	PulpCreated *time.Time `json:"pulp_created,omitempty"`
	PulpHref    *string    `json:"pulp_href,omitempty"`

	// PulpLastUpdated Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time `json:"pulp_last_updated,omitempty"`

	// Sha1 The SHA-1 checksum of the file if available.
	Sha1 *string `json:"sha1"`

	// Sha224 The SHA-224 checksum of the file if available.
	Sha224 *string `json:"sha224"`

	// Sha256 The SHA-256 checksum of the file if available.
	Sha256 *string `json:"sha256"`

	// Sha384 The SHA-384 checksum of the file if available.
	Sha384 *string `json:"sha384"`

	// Sha512 The SHA-512 checksum of the file if available.
	Sha512 *string `json:"sha512"`

	// Size The size of the file in bytes.
	Size *int64 `json:"size,omitempty"`
}

// AsyncOperationResponse Serializer for asynchronous operations.
type AsyncOperationResponse struct {
	// Task The href of the task.
	Task string `json:"task"`
}

// CompositeContentGuard Base serializer for use with :class:`pulpcore.app.models.Model`
//
// This ensures that all Serializers provide values for the 'pulp_href` field.
//
// The class provides a default for the “ref_name“ attribute in the
// ModelSerializers's “Meta“ class. This ensures that the OpenAPI definitions
// of plugins are namespaced properly.
type CompositeContentGuard struct {
	// Description An optional description.
	Description *string `json:"description"`

	// Guards List of ContentGuards to ask for access-permission.
	Guards *[]string `json:"guards,omitempty"`

	// Name The unique name.
	Name string `json:"name"`
}

// CompositeContentGuardResponse Base serializer for use with :class:`pulpcore.app.models.Model`
//
// This ensures that all Serializers provide values for the 'pulp_href` field.
//
// The class provides a default for the “ref_name“ attribute in the
// ModelSerializers's “Meta“ class. This ensures that the OpenAPI definitions
// of plugins are namespaced properly.
type CompositeContentGuardResponse struct {
	// Description An optional description.
	Description *string `json:"description"`

	// Guards List of ContentGuards to ask for access-permission.
	Guards *[]string `json:"guards,omitempty"`

	// Name The unique name.
	Name string `json:"name"`

	// PulpCreated Timestamp of creation.
	PulpCreated *time.Time `json:"pulp_created,omitempty"`
	PulpHref    *string    `json:"pulp_href,omitempty"`

	// PulpLastUpdated Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time `json:"pulp_last_updated,omitempty"`
}

// ContentSummaryResponse Serializer for the RepositoryVersion content summary
type ContentSummaryResponse struct {
	Added   map[string]interface{} `json:"added"`
	Present map[string]interface{} `json:"present"`
	Removed map[string]interface{} `json:"removed"`
}

// Domain Serializer for Domain.
type Domain struct {
	// Description An optional description.
	Description *string `json:"description"`

	// HideGuardedDistributions Boolean to hide distributions with a content guard in the content app.
	HideGuardedDistributions *bool `json:"hide_guarded_distributions,omitempty"`

	// Name A name for this domain.
	Name string `json:"name"`

	// RedirectToObjectStorage Boolean to have the content app redirect to object storage.
	RedirectToObjectStorage *bool `json:"redirect_to_object_storage,omitempty"`

	// StorageClass Backend storage class for domain.
	//
	// * `pulpcore.app.models.storage.FileSystem` - Use local filesystem as storage
	// * `storages.backends.s3boto3.S3Boto3Storage` - Use Amazon S3 as storage
	// * `storages.backends.azure_storage.AzureStorage` - Use Azure Blob as storage
	StorageClass StorageClassEnum `json:"storage_class"`

	// StorageSettings Settings for storage class.
	StorageSettings map[string]interface{} `json:"storage_settings"`
}

// DomainResponse Serializer for Domain.
type DomainResponse struct {
	// Description An optional description.
	Description *string `json:"description"`

	// HideGuardedDistributions Boolean to hide distributions with a content guard in the content app.
	HideGuardedDistributions *bool `json:"hide_guarded_distributions,omitempty"`

	// Name A name for this domain.
	Name string `json:"name"`

	// PulpCreated Timestamp of creation.
	PulpCreated *time.Time `json:"pulp_created,omitempty"`
	PulpHref    *string    `json:"pulp_href,omitempty"`

	// PulpLastUpdated Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time `json:"pulp_last_updated,omitempty"`

	// RedirectToObjectStorage Boolean to have the content app redirect to object storage.
	RedirectToObjectStorage *bool `json:"redirect_to_object_storage,omitempty"`

	// StorageClass Backend storage class for domain.
	//
	// * `pulpcore.app.models.storage.FileSystem` - Use local filesystem as storage
	// * `storages.backends.s3boto3.S3Boto3Storage` - Use Amazon S3 as storage
	// * `storages.backends.azure_storage.AzureStorage` - Use Azure Blob as storage
	StorageClass StorageClassEnum `json:"storage_class"`

	// StorageSettings Settings for storage class.
	StorageSettings map[string]interface{} `json:"storage_settings"`
}

// GroupResponse Serializer for Group.
type GroupResponse struct {
	Id *int64 `json:"id,omitempty"`

	// Name Name
	Name     string  `json:"name"`
	PulpHref *string `json:"pulp_href,omitempty"`
}

// GroupUserResponse Serializer for Users that belong to a Group.
type GroupUserResponse struct {
	PulpHref *string `json:"pulp_href,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// HeaderContentGuard A serializer for HeaderContentGuard.
type HeaderContentGuard struct {
	// Description An optional description.
	Description *string `json:"description"`

	// HeaderName The header name the guard will check on.
	HeaderName string `json:"header_name"`

	// HeaderValue The value that will authorize the request.
	HeaderValue string `json:"header_value"`

	// JqFilter A JQ syntax compatible filter. If jq_filter is not set, then the value willonly be Base64 decoded and checked as an explicit string match.
	JqFilter *string `json:"jq_filter"`

	// Name The unique name.
	Name string `json:"name"`
}

// HeaderContentGuardResponse A serializer for HeaderContentGuard.
type HeaderContentGuardResponse struct {
	// Description An optional description.
	Description *string `json:"description"`

	// HeaderName The header name the guard will check on.
	HeaderName string `json:"header_name"`

	// HeaderValue The value that will authorize the request.
	HeaderValue string `json:"header_value"`

	// JqFilter A JQ syntax compatible filter. If jq_filter is not set, then the value willonly be Base64 decoded and checked as an explicit string match.
	JqFilter *string `json:"jq_filter"`

	// Name The unique name.
	Name string `json:"name"`

	// PulpCreated Timestamp of creation.
	PulpCreated *time.Time `json:"pulp_created,omitempty"`
	PulpHref    *string    `json:"pulp_href,omitempty"`

	// PulpLastUpdated Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time `json:"pulp_last_updated,omitempty"`
}

// MyPermissionsResponse defines model for MyPermissionsResponse.
type MyPermissionsResponse struct {
	Permissions []string `json:"permissions"`
}

// NestedRole Serializer to add/remove object roles to/from users/groups.
//
// This is used in conjunction with “pulpcore.app.viewsets.base.RolesMixin“ and requires the
// underlying object to be passed as “content_object“ in the context.
type NestedRole struct {
	Groups *[]string `json:"groups,omitempty"`
	Role   string    `json:"role"`
	Users  *[]string `json:"users,omitempty"`
}

// NestedRoleResponse Serializer to add/remove object roles to/from users/groups.
//
// This is used in conjunction with “pulpcore.app.viewsets.base.RolesMixin“ and requires the
// underlying object to be passed as “content_object“ in the context.
type NestedRoleResponse struct {
	Groups *[]string `json:"groups,omitempty"`
	Role   string    `json:"role"`
	Users  *[]string `json:"users,omitempty"`
}

// ObjectRolesResponse defines model for ObjectRolesResponse.
type ObjectRolesResponse struct {
	Roles []NestedRoleResponse `json:"roles"`
}

// OstreeImportAll A Serializer class for importing all refs and commits to a repository.
type OstreeImportAll struct {
	// Artifact An artifact representing OSTree content compressed as a tarball.
	Artifact string `json:"artifact"`

	// RepositoryName The name of a repository that contains the compressed OSTree content.
	RepositoryName string `json:"repository_name"`
}

// OstreeImportCommitsToRef A Serializer class for appending child commits to a repository.
type OstreeImportCommitsToRef struct {
	// Artifact An artifact representing OSTree content compressed as a tarball.
	Artifact string `json:"artifact"`

	// Ref The name of a ref branch that holds the reference to the last commit.
	Ref string `json:"ref"`

	// RepositoryName The name of a repository that contains the compressed OSTree content.
	RepositoryName string `json:"repository_name"`
}

// PaginatedArtifactResponseList defines model for PaginatedArtifactResponseList.
type PaginatedArtifactResponseList struct {
	Count    int                `json:"count"`
	Next     *string            `json:"next"`
	Previous *string            `json:"previous"`
	Results  []ArtifactResponse `json:"results"`
}

// PaginatedCompositeContentGuardResponseList defines model for PaginatedCompositeContentGuardResponseList.
type PaginatedCompositeContentGuardResponseList struct {
	Count    int                             `json:"count"`
	Next     *string                         `json:"next"`
	Previous *string                         `json:"previous"`
	Results  []CompositeContentGuardResponse `json:"results"`
}

// PaginatedDomainResponseList defines model for PaginatedDomainResponseList.
type PaginatedDomainResponseList struct {
	Count    int              `json:"count"`
	Next     *string          `json:"next"`
	Previous *string          `json:"previous"`
	Results  []DomainResponse `json:"results"`
}

// PaginatedHeaderContentGuardResponseList defines model for PaginatedHeaderContentGuardResponseList.
type PaginatedHeaderContentGuardResponseList struct {
	Count    int                          `json:"count"`
	Next     *string                      `json:"next"`
	Previous *string                      `json:"previous"`
	Results  []HeaderContentGuardResponse `json:"results"`
}

// PaginatedRBACContentGuardResponseList defines model for PaginatedRBACContentGuardResponseList.
type PaginatedRBACContentGuardResponseList struct {
	Count    int                        `json:"count"`
	Next     *string                    `json:"next"`
	Previous *string                    `json:"previous"`
	Results  []RBACContentGuardResponse `json:"results"`
}

// PaginatedRepositoryVersionResponseList defines model for PaginatedRepositoryVersionResponseList.
type PaginatedRepositoryVersionResponseList struct {
	Count    int                         `json:"count"`
	Next     *string                     `json:"next"`
	Previous *string                     `json:"previous"`
	Results  []RepositoryVersionResponse `json:"results"`
}

// PaginatedTaskResponseList defines model for PaginatedTaskResponseList.
type PaginatedTaskResponseList struct {
	Count    int            `json:"count"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  []TaskResponse `json:"results"`
}

// PaginatedfileFileContentResponseList defines model for Paginatedfile.FileContentResponseList.
type PaginatedfileFileContentResponseList struct {
	Count    int                       `json:"count"`
	Next     *string                   `json:"next"`
	Previous *string                   `json:"previous"`
	Results  []FileFileContentResponse `json:"results"`
}

// PaginatedfileFileRepositoryResponseList defines model for Paginatedfile.FileRepositoryResponseList.
type PaginatedfileFileRepositoryResponseList struct {
	Count    int                          `json:"count"`
	Next     *string                      `json:"next"`
	Previous *string                      `json:"previous"`
	Results  []FileFileRepositoryResponse `json:"results"`
}

// PaginatedostreeOstreeContentResponseList defines model for Paginatedostree.OstreeContentResponseList.
type PaginatedostreeOstreeContentResponseList struct {
	Count    int                           `json:"count"`
	Next     *string                       `json:"next"`
	Previous *string                       `json:"previous"`
	Results  []OstreeOstreeContentResponse `json:"results"`
}

// PaginatedostreeOstreeDistributionResponseList defines model for Paginatedostree.OstreeDistributionResponseList.
type PaginatedostreeOstreeDistributionResponseList struct {
	Count    int                                `json:"count"`
	Next     *string                            `json:"next"`
	Previous *string                            `json:"previous"`
	Results  []OstreeOstreeDistributionResponse `json:"results"`
}

// PaginatedostreeOstreeRepositoryResponseList defines model for Paginatedostree.OstreeRepositoryResponseList.
type PaginatedostreeOstreeRepositoryResponseList struct {
	Count    int                              `json:"count"`
	Next     *string                          `json:"next"`
	Previous *string                          `json:"previous"`
	Results  []OstreeOstreeRepositoryResponse `json:"results"`
}

// PatchedCompositeContentGuard Base serializer for use with :class:`pulpcore.app.models.Model`
//
// This ensures that all Serializers provide values for the 'pulp_href` field.
//
// The class provides a default for the “ref_name“ attribute in the
// ModelSerializers's “Meta“ class. This ensures that the OpenAPI definitions
// of plugins are namespaced properly.
type PatchedCompositeContentGuard struct {
	// Description An optional description.
	Description *string `json:"description"`

	// Guards List of ContentGuards to ask for access-permission.
	Guards *[]string `json:"guards,omitempty"`

	// Name The unique name.
	Name *string `json:"name,omitempty"`
}

// PatchedDomain Serializer for Domain.
type PatchedDomain struct {
	// Description An optional description.
	Description *string `json:"description"`

	// HideGuardedDistributions Boolean to hide distributions with a content guard in the content app.
	HideGuardedDistributions *bool `json:"hide_guarded_distributions,omitempty"`

	// Name A name for this domain.
	Name *string `json:"name,omitempty"`

	// RedirectToObjectStorage Boolean to have the content app redirect to object storage.
	RedirectToObjectStorage *bool `json:"redirect_to_object_storage,omitempty"`

	// StorageClass Backend storage class for domain.
	//
	// * `pulpcore.app.models.storage.FileSystem` - Use local filesystem as storage
	// * `storages.backends.s3boto3.S3Boto3Storage` - Use Amazon S3 as storage
	// * `storages.backends.azure_storage.AzureStorage` - Use Azure Blob as storage
	StorageClass *StorageClassEnum `json:"storage_class,omitempty"`

	// StorageSettings Settings for storage class.
	StorageSettings *map[string]interface{} `json:"storage_settings,omitempty"`
}

// PatchedHeaderContentGuard A serializer for HeaderContentGuard.
type PatchedHeaderContentGuard struct {
	// Description An optional description.
	Description *string `json:"description"`

	// HeaderName The header name the guard will check on.
	HeaderName *string `json:"header_name,omitempty"`

	// HeaderValue The value that will authorize the request.
	HeaderValue *string `json:"header_value,omitempty"`

	// JqFilter A JQ syntax compatible filter. If jq_filter is not set, then the value willonly be Base64 decoded and checked as an explicit string match.
	JqFilter *string `json:"jq_filter"`

	// Name The unique name.
	Name *string `json:"name,omitempty"`
}

// PatchedRBACContentGuard Base serializer for use with :class:`pulpcore.app.models.Model`
//
// This ensures that all Serializers provide values for the 'pulp_href` field.
//
// The class provides a default for the “ref_name“ attribute in the
// ModelSerializers's “Meta“ class. This ensures that the OpenAPI definitions
// of plugins are namespaced properly.
type PatchedRBACContentGuard struct {
	// Description An optional description.
	Description *string `json:"description"`

	// Name The unique name.
	Name *string `json:"name,omitempty"`
}

// PatchedTaskCancel Base serializer for use with :class:`pulpcore.app.models.Model`
//
// This ensures that all Serializers provide values for the 'pulp_href` field.
//
// The class provides a default for the “ref_name“ attribute in the
// ModelSerializers's “Meta“ class. This ensures that the OpenAPI definitions
// of plugins are namespaced properly.
type PatchedTaskCancel struct {
	// State The desired state of the task. Only 'canceled' is accepted.
	State *string `json:"state,omitempty"`
}

// PatchedfileFileRepository Serializer for File Repositories.
type PatchedfileFileRepository struct {
	// Autopublish Whether to automatically create publications for new repository versions, and update any distributions pointing to this repository.
	Autopublish *bool `json:"autopublish,omitempty"`

	// Description An optional description.
	Description *string `json:"description"`

	// Manifest Filename to use for manifest file containing metadata for all the files.
	Manifest *string `json:"manifest"`

	// Name A unique name for this repository.
	Name       *string             `json:"name,omitempty"`
	PulpLabels *map[string]*string `json:"pulp_labels,omitempty"`

	// Remote An optional remote to use by default when syncing.
	Remote *string `json:"remote"`

	// RetainRepoVersions Retain X versions of the repository. Default is null which retains all versions.
	RetainRepoVersions *int64 `json:"retain_repo_versions"`
}

// PatchedostreeOstreeDistribution A Serializer class for an OSTree distribution.
type PatchedostreeOstreeDistribution struct {
	// BasePath The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. "foo" and "foo/bar")
	BasePath *string `json:"base_path,omitempty"`

	// ContentGuard An optional content-guard.
	ContentGuard *string `json:"content_guard"`

	// Hidden Whether this distribution should be shown in the content app.
	Hidden *bool `json:"hidden,omitempty"`

	// Name A unique name. Ex, `rawhide` and `stable`.
	Name       *string             `json:"name,omitempty"`
	PulpLabels *map[string]*string `json:"pulp_labels,omitempty"`

	// Repository The latest RepositoryVersion for this Repository will be served.
	Repository *string `json:"repository"`

	// RepositoryVersion RepositoryVersion to be served
	RepositoryVersion *string `json:"repository_version"`
}

// PatchedostreeOstreeRepository A Serializer class for an OSTree repository.
type PatchedostreeOstreeRepository struct {
	ComputeDelta *bool `json:"compute_delta,omitempty"`

	// Description An optional description.
	Description *string `json:"description"`

	// Name A unique name for this repository.
	Name       *string             `json:"name,omitempty"`
	PulpLabels *map[string]*string `json:"pulp_labels,omitempty"`

	// Remote An optional remote to use by default when syncing.
	Remote *string `json:"remote"`

	// RetainRepoVersions Retain X versions of the repository. Default is null which retains all versions.
	RetainRepoVersions *int64 `json:"retain_repo_versions"`
}

// ProgressReportResponse Base serializer for use with :class:`pulpcore.app.models.Model`
//
// This ensures that all Serializers provide values for the 'pulp_href` field.
//
// The class provides a default for the “ref_name“ attribute in the
// ModelSerializers's “Meta“ class. This ensures that the OpenAPI definitions
// of plugins are namespaced properly.
type ProgressReportResponse struct {
	// Code Identifies the type of progress report'.
	Code *string `json:"code,omitempty"`

	// Done The count of items already processed. Defaults to 0.
	Done *int64 `json:"done,omitempty"`

	// Message The message shown to the user for the progress report.
	Message *string `json:"message,omitempty"`

	// State The current state of the progress report. The possible values are: 'waiting', 'skipped', 'running', 'completed', 'failed', 'canceled' and 'canceling'. The default is 'waiting'.
	State *string `json:"state,omitempty"`

	// Suffix The suffix to be shown with the progress report.
	Suffix *string `json:"suffix"`

	// Total The total count of items.
	Total *int64 `json:"total,omitempty"`
}

// Purge defines model for Purge.
type Purge struct {
	// FinishedBefore Purge tasks completed earlier than this timestamp. Format '%Y-%m-%d[T%H:%M:%S]'
	FinishedBefore *time.Time `json:"finished_before,omitempty"`

	// States List of task-states to be purged. Only 'final' states are allowed.
	States *[]StatesEnum `json:"states,omitempty"`
}

// RBACContentGuard Base serializer for use with :class:`pulpcore.app.models.Model`
//
// This ensures that all Serializers provide values for the 'pulp_href` field.
//
// The class provides a default for the “ref_name“ attribute in the
// ModelSerializers's “Meta“ class. This ensures that the OpenAPI definitions
// of plugins are namespaced properly.
type RBACContentGuard struct {
	// Description An optional description.
	Description *string `json:"description"`

	// Name The unique name.
	Name string `json:"name"`
}

// RBACContentGuardResponse Base serializer for use with :class:`pulpcore.app.models.Model`
//
// This ensures that all Serializers provide values for the 'pulp_href` field.
//
// The class provides a default for the “ref_name“ attribute in the
// ModelSerializers's “Meta“ class. This ensures that the OpenAPI definitions
// of plugins are namespaced properly.
type RBACContentGuardResponse struct {
	// Description An optional description.
	Description *string          `json:"description"`
	Groups      *[]GroupResponse `json:"groups,omitempty"`

	// Name The unique name.
	Name string `json:"name"`

	// PulpCreated Timestamp of creation.
	PulpCreated *time.Time `json:"pulp_created,omitempty"`
	PulpHref    *string    `json:"pulp_href,omitempty"`

	// PulpLastUpdated Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time           `json:"pulp_last_updated,omitempty"`
	Users           *[]GroupUserResponse `json:"users,omitempty"`
}

// Repair defines model for Repair.
type Repair struct {
	// VerifyChecksums Will verify that the checksum of all stored files matches what saved in the database. Otherwise only the existence of the files will be checked. Enabled by default
	VerifyChecksums *bool `json:"verify_checksums,omitempty"`
}

// RepositoryAddRemoveContent Base serializer for use with :class:`pulpcore.app.models.Model`
//
// This ensures that all Serializers provide values for the 'pulp_href` field.
//
// The class provides a default for the “ref_name“ attribute in the
// ModelSerializers's “Meta“ class. This ensures that the OpenAPI definitions
// of plugins are namespaced properly.
type RepositoryAddRemoveContent struct {
	// AddContentUnits A list of content units to add to a new repository version. This content is added after remove_content_units are removed.
	AddContentUnits *[]string `json:"add_content_units,omitempty"`

	// BaseVersion A repository version whose content will be used as the initial set of content for the new repository version
	BaseVersion *string `json:"base_version,omitempty"`

	// RemoveContentUnits A list of content units to remove from the latest repository version. You may also specify '*' as an entry to remove all content. This content is removed before add_content_units are added.
	RemoveContentUnits *[]string `json:"remove_content_units,omitempty"`
}

// RepositorySyncURL A mixin for validating unknown serializers' fields.
type RepositorySyncURL struct {
	// Mirror If ``True``, synchronization will remove all content that is not present in the remote repository. If ``False``, sync will be additive only.
	Mirror *bool `json:"mirror,omitempty"`

	// Remote A remote to sync from. This will override a remote set on repository.
	Remote *string `json:"remote,omitempty"`
}

// RepositoryVersionResponse Base serializer for use with :class:`pulpcore.app.models.Model`
//
// This ensures that all Serializers provide values for the 'pulp_href` field.
//
// The class provides a default for the “ref_name“ attribute in the
// ModelSerializers's “Meta“ class. This ensures that the OpenAPI definitions
// of plugins are namespaced properly.
type RepositoryVersionResponse struct {
	// BaseVersion A repository version whose content was used as the initial set of content for this repository version
	BaseVersion *string `json:"base_version,omitempty"`

	// ContentSummary Various count summaries of the content in the version and the HREF to view them.
	ContentSummary *ContentSummaryResponse `json:"content_summary,omitempty"`
	Number         *int64                  `json:"number,omitempty"`

	// PulpCreated Timestamp of creation.
	PulpCreated *time.Time `json:"pulp_created,omitempty"`
	PulpHref    *string    `json:"pulp_href,omitempty"`

	// PulpLastUpdated Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time `json:"pulp_last_updated,omitempty"`
	Repository      *string    `json:"repository,omitempty"`
}

// SetLabel Serializer for synchronously setting a label.
type SetLabel struct {
	Key   string  `json:"key"`
	Value *string `json:"value"`
}

// SetLabelResponse Serializer for synchronously setting a label.
type SetLabelResponse struct {
	Key   string  `json:"key"`
	Value *string `json:"value"`
}

// StatesEnum * `skipped` - skipped
// * `completed` - completed
// * `failed` - failed
// * `canceled` - canceled
type StatesEnum string

// StorageClassEnum * `pulpcore.app.models.storage.FileSystem` - Use local filesystem as storage
// * `storages.backends.s3boto3.S3Boto3Storage` - Use Amazon S3 as storage
// * `storages.backends.azure_storage.AzureStorage` - Use Azure Blob as storage
type StorageClassEnum string

// TaskResponse Base serializer for use with :class:`pulpcore.app.models.Model`
//
// This ensures that all Serializers provide values for the 'pulp_href` field.
//
// The class provides a default for the “ref_name“ attribute in the
// ModelSerializers's “Meta“ class. This ensures that the OpenAPI definitions
// of plugins are namespaced properly.
type TaskResponse struct {
	// ChildTasks Any tasks spawned by this task.
	ChildTasks *[]string `json:"child_tasks,omitempty"`

	// CreatedBy User who dispatched this task.
	CreatedBy *string `json:"created_by,omitempty"`

	// CreatedResources Resources created by this task.
	CreatedResources *[]string `json:"created_resources,omitempty"`

	// Error A JSON Object of a fatal error encountered during the execution of this task.
	Error *map[string]interface{} `json:"error,omitempty"`

	// FinishedAt Timestamp of when this task stopped execution.
	FinishedAt *time.Time `json:"finished_at,omitempty"`

	// LoggingCid The logging correlation id associated with this task
	LoggingCid string `json:"logging_cid"`

	// Name The name of task.
	Name string `json:"name"`

	// ParentTask The parent task that spawned this task.
	ParentTask      *string                   `json:"parent_task,omitempty"`
	ProgressReports *[]ProgressReportResponse `json:"progress_reports,omitempty"`

	// PulpCreated Timestamp of creation.
	PulpCreated *time.Time `json:"pulp_created,omitempty"`
	PulpHref    *string    `json:"pulp_href,omitempty"`

	// PulpLastUpdated Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time `json:"pulp_last_updated,omitempty"`

	// ReservedResourcesRecord A list of resources required by that task.
	ReservedResourcesRecord *[]string `json:"reserved_resources_record,omitempty"`

	// StartedAt Timestamp of when this task started execution.
	StartedAt *time.Time `json:"started_at,omitempty"`

	// State The current state of the task. The possible values include: 'waiting', 'skipped', 'running', 'completed', 'failed', 'canceled' and 'canceling'.
	State *string `json:"state,omitempty"`

	// TaskGroup The task group that this task is a member of.
	TaskGroup *string `json:"task_group,omitempty"`

	// UnblockedAt Timestamp of when this task was identified ready for pickup.
	UnblockedAt *time.Time `json:"unblocked_at,omitempty"`

	// Worker The worker associated with this task. This field is empty if a worker is not yet assigned.
	Worker *string `json:"worker,omitempty"`
}

// UnsetLabel Serializer for synchronously setting a label.
type UnsetLabel struct {
	Key string `json:"key"`
}

// UnsetLabelResponse Serializer for synchronously setting a label.
type UnsetLabelResponse struct {
	Key   string  `json:"key"`
	Value *string `json:"value,omitempty"`
}

// FileFileContent Serializer for File Content.
type FileFileContent struct {
	// Artifact Artifact file representing the physical content
	Artifact *string `json:"artifact,omitempty"`

	// File An uploaded file that may be turned into the content unit.
	File *openapi_types.File `json:"file,omitempty"`

	// FileUrl A url that Pulp can download and turn into the content unit.
	FileUrl *string `json:"file_url,omitempty"`

	// RelativePath Path where the artifact is located relative to distributions base_path
	RelativePath string `json:"relative_path"`

	// Repository A URI of a repository the new content unit should be associated with.
	Repository *string `json:"repository,omitempty"`

	// Upload An uncommitted upload that may be turned into the content unit.
	Upload *string `json:"upload,omitempty"`
}

// FileFileContentResponse Serializer for File Content.
type FileFileContentResponse struct {
	// Artifact Artifact file representing the physical content
	Artifact *string `json:"artifact,omitempty"`

	// Md5 The MD5 checksum if available.
	Md5 *string `json:"md5,omitempty"`

	// PulpCreated Timestamp of creation.
	PulpCreated *time.Time `json:"pulp_created,omitempty"`
	PulpHref    *string    `json:"pulp_href,omitempty"`

	// PulpLastUpdated Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time `json:"pulp_last_updated,omitempty"`

	// RelativePath Path where the artifact is located relative to distributions base_path
	RelativePath string `json:"relative_path"`

	// Sha1 The SHA-1 checksum if available.
	Sha1 *string `json:"sha1,omitempty"`

	// Sha224 The SHA-224 checksum if available.
	Sha224 *string `json:"sha224,omitempty"`

	// Sha256 The SHA-256 checksum if available.
	Sha256 *string `json:"sha256,omitempty"`

	// Sha384 The SHA-384 checksum if available.
	Sha384 *string `json:"sha384,omitempty"`

	// Sha512 The SHA-512 checksum if available.
	Sha512 *string `json:"sha512,omitempty"`
}

// FileFileRepository Serializer for File Repositories.
type FileFileRepository struct {
	// Autopublish Whether to automatically create publications for new repository versions, and update any distributions pointing to this repository.
	Autopublish *bool `json:"autopublish,omitempty"`

	// Description An optional description.
	Description *string `json:"description"`

	// Manifest Filename to use for manifest file containing metadata for all the files.
	Manifest *string `json:"manifest"`

	// Name A unique name for this repository.
	Name       string              `json:"name"`
	PulpLabels *map[string]*string `json:"pulp_labels,omitempty"`

	// Remote An optional remote to use by default when syncing.
	Remote *string `json:"remote"`

	// RetainRepoVersions Retain X versions of the repository. Default is null which retains all versions.
	RetainRepoVersions *int64 `json:"retain_repo_versions"`
}

// FileFileRepositoryResponse Serializer for File Repositories.
type FileFileRepositoryResponse struct {
	// Autopublish Whether to automatically create publications for new repository versions, and update any distributions pointing to this repository.
	Autopublish *bool `json:"autopublish,omitempty"`

	// Description An optional description.
	Description       *string `json:"description"`
	LatestVersionHref *string `json:"latest_version_href,omitempty"`

	// Manifest Filename to use for manifest file containing metadata for all the files.
	Manifest *string `json:"manifest"`

	// Name A unique name for this repository.
	Name string `json:"name"`

	// PulpCreated Timestamp of creation.
	PulpCreated *time.Time          `json:"pulp_created,omitempty"`
	PulpHref    *string             `json:"pulp_href,omitempty"`
	PulpLabels  *map[string]*string `json:"pulp_labels,omitempty"`

	// PulpLastUpdated Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time `json:"pulp_last_updated,omitempty"`

	// Remote An optional remote to use by default when syncing.
	Remote *string `json:"remote"`

	// RetainRepoVersions Retain X versions of the repository. Default is null which retains all versions.
	RetainRepoVersions *int64  `json:"retain_repo_versions"`
	VersionsHref       *string `json:"versions_href,omitempty"`
}

// OstreeOstreeContent A Serializer class for uncategorized content units (e.g., static deltas).
type OstreeOstreeContent struct {
	// Artifact Artifact file representing the physical content
	Artifact     string `json:"artifact"`
	Digest       string `json:"digest"`
	RelativePath string `json:"relative_path"`

	// Repository A URI of a repository the new content unit should be associated with.
	Repository *string `json:"repository,omitempty"`
}

// OstreeOstreeContentResponse A Serializer class for uncategorized content units (e.g., static deltas).
type OstreeOstreeContentResponse struct {
	// Artifact Artifact file representing the physical content
	Artifact string `json:"artifact"`
	Digest   string `json:"digest"`

	// PulpCreated Timestamp of creation.
	PulpCreated *time.Time `json:"pulp_created,omitempty"`
	PulpHref    *string    `json:"pulp_href,omitempty"`

	// PulpLastUpdated Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time `json:"pulp_last_updated,omitempty"`
	RelativePath    string     `json:"relative_path"`
}

// OstreeOstreeDistribution A Serializer class for an OSTree distribution.
type OstreeOstreeDistribution struct {
	// BasePath The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. "foo" and "foo/bar")
	BasePath string `json:"base_path"`

	// ContentGuard An optional content-guard.
	ContentGuard *string `json:"content_guard"`

	// Hidden Whether this distribution should be shown in the content app.
	Hidden *bool `json:"hidden,omitempty"`

	// Name A unique name. Ex, `rawhide` and `stable`.
	Name       string              `json:"name"`
	PulpLabels *map[string]*string `json:"pulp_labels,omitempty"`

	// Repository The latest RepositoryVersion for this Repository will be served.
	Repository *string `json:"repository"`

	// RepositoryVersion RepositoryVersion to be served
	RepositoryVersion *string `json:"repository_version"`
}

// OstreeOstreeDistributionResponse A Serializer class for an OSTree distribution.
type OstreeOstreeDistributionResponse struct {
	// BasePath The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. "foo" and "foo/bar")
	BasePath string `json:"base_path"`

	// BaseUrl The URL for accessing the publication as defined by this distribution.
	BaseUrl *string `json:"base_url,omitempty"`

	// ContentGuard An optional content-guard.
	ContentGuard *string `json:"content_guard"`

	// Hidden Whether this distribution should be shown in the content app.
	Hidden *bool `json:"hidden,omitempty"`

	// Name A unique name. Ex, `rawhide` and `stable`.
	Name string `json:"name"`

	// PulpCreated Timestamp of creation.
	PulpCreated *time.Time          `json:"pulp_created,omitempty"`
	PulpHref    *string             `json:"pulp_href,omitempty"`
	PulpLabels  *map[string]*string `json:"pulp_labels,omitempty"`

	// PulpLastUpdated Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time `json:"pulp_last_updated,omitempty"`

	// Repository The latest RepositoryVersion for this Repository will be served.
	Repository *string `json:"repository"`

	// RepositoryVersion RepositoryVersion to be served
	RepositoryVersion *string `json:"repository_version"`
}

// OstreeOstreeRepository A Serializer class for an OSTree repository.
type OstreeOstreeRepository struct {
	ComputeDelta *bool `json:"compute_delta,omitempty"`

	// Description An optional description.
	Description *string `json:"description"`

	// Name A unique name for this repository.
	Name       string              `json:"name"`
	PulpLabels *map[string]*string `json:"pulp_labels,omitempty"`

	// Remote An optional remote to use by default when syncing.
	Remote *string `json:"remote"`

	// RetainRepoVersions Retain X versions of the repository. Default is null which retains all versions.
	RetainRepoVersions *int64 `json:"retain_repo_versions"`
}

// OstreeOstreeRepositoryResponse A Serializer class for an OSTree repository.
type OstreeOstreeRepositoryResponse struct {
	ComputeDelta *bool `json:"compute_delta,omitempty"`

	// Description An optional description.
	Description       *string `json:"description"`
	LatestVersionHref *string `json:"latest_version_href,omitempty"`

	// Name A unique name for this repository.
	Name string `json:"name"`

	// PulpCreated Timestamp of creation.
	PulpCreated *time.Time          `json:"pulp_created,omitempty"`
	PulpHref    *string             `json:"pulp_href,omitempty"`
	PulpLabels  *map[string]*string `json:"pulp_labels,omitempty"`

	// PulpLastUpdated Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time `json:"pulp_last_updated,omitempty"`

	// Remote An optional remote to use by default when syncing.
	Remote *string `json:"remote"`

	// RetainRepoVersions Retain X versions of the repository. Default is null which retains all versions.
	RetainRepoVersions *int64  `json:"retain_repo_versions"`
	VersionsHref       *string `json:"versions_href,omitempty"`
}

// ArtifactsListParams defines parameters for ArtifactsList.
type ArtifactsListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Md5 Filter results where md5 matches value
	Md5 *string `form:"md5,omitempty" json:"md5,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Ordering
	//
	// * `pulp_id` - Pulp id
	// * `-pulp_id` - Pulp id (descending)
	// * `pulp_created` - Pulp created
	// * `-pulp_created` - Pulp created (descending)
	// * `pulp_last_updated` - Pulp last updated
	// * `-pulp_last_updated` - Pulp last updated (descending)
	// * `file` - File
	// * `-file` - File (descending)
	// * `size` - Size
	// * `-size` - Size (descending)
	// * `md5` - Md5
	// * `-md5` - Md5 (descending)
	// * `sha1` - Sha1
	// * `-sha1` - Sha1 (descending)
	// * `sha224` - Sha224
	// * `-sha224` - Sha224 (descending)
	// * `sha256` - Sha256
	// * `-sha256` - Sha256 (descending)
	// * `sha384` - Sha384
	// * `-sha384` - Sha384 (descending)
	// * `sha512` - Sha512
	// * `-sha512` - Sha512 (descending)
	// * `timestamp_of_interest` - Timestamp of interest
	// * `-timestamp_of_interest` - Timestamp of interest (descending)
	// * `pk` - Pk
	// * `-pk` - Pk (descending)
	Ordering *[]ArtifactsListParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// OrphanedFor Minutes Artifacts have been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.
	OrphanedFor *float32 `form:"orphaned_for,omitempty" json:"orphaned_for,omitempty"`

	// PulpHrefIn Multiple values may be separated by commas.
	PulpHrefIn *[]string `form:"pulp_href__in,omitempty" json:"pulp_href__in,omitempty"`

	// PulpIdIn Multiple values may be separated by commas.
	PulpIdIn *[]openapi_types.UUID `form:"pulp_id__in,omitempty" json:"pulp_id__in,omitempty"`
	Q        *string               `form:"q,omitempty" json:"q,omitempty"`

	// RepositoryVersion Repository Version referenced by HREF
	RepositoryVersion *string `form:"repository_version,omitempty" json:"repository_version,omitempty"`

	// Sha1 Filter results where sha1 matches value
	Sha1 *string `form:"sha1,omitempty" json:"sha1,omitempty"`

	// Sha224 Filter results where sha224 matches value
	Sha224 *string `form:"sha224,omitempty" json:"sha224,omitempty"`

	// Sha256 Filter results where sha256 matches value
	Sha256 *string `form:"sha256,omitempty" json:"sha256,omitempty"`

	// Sha384 Filter results where sha384 matches value
	Sha384 *string `form:"sha384,omitempty" json:"sha384,omitempty"`

	// Sha512 Filter results where sha512 matches value
	Sha512 *string `form:"sha512,omitempty" json:"sha512,omitempty"`

	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ArtifactsListParamsOrdering defines parameters for ArtifactsList.
type ArtifactsListParamsOrdering string

// ArtifactsReadParams defines parameters for ArtifactsRead.
type ArtifactsReadParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentFileFilesListParams defines parameters for ContentFileFilesList.
type ContentFileFilesListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Ordering
	//
	// * `pulp_id` - Pulp id
	// * `-pulp_id` - Pulp id (descending)
	// * `pulp_created` - Pulp created
	// * `-pulp_created` - Pulp created (descending)
	// * `pulp_last_updated` - Pulp last updated
	// * `-pulp_last_updated` - Pulp last updated (descending)
	// * `pulp_type` - Pulp type
	// * `-pulp_type` - Pulp type (descending)
	// * `upstream_id` - Upstream id
	// * `-upstream_id` - Upstream id (descending)
	// * `timestamp_of_interest` - Timestamp of interest
	// * `-timestamp_of_interest` - Timestamp of interest (descending)
	// * `relative_path` - Relative path
	// * `-relative_path` - Relative path (descending)
	// * `digest` - Digest
	// * `-digest` - Digest (descending)
	// * `pk` - Pk
	// * `-pk` - Pk (descending)
	Ordering *[]ContentFileFilesListParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// OrphanedFor Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.
	OrphanedFor *float32 `form:"orphaned_for,omitempty" json:"orphaned_for,omitempty"`

	// PulpHrefIn Multiple values may be separated by commas.
	PulpHrefIn *[]string `form:"pulp_href__in,omitempty" json:"pulp_href__in,omitempty"`

	// PulpIdIn Multiple values may be separated by commas.
	PulpIdIn *[]openapi_types.UUID `form:"pulp_id__in,omitempty" json:"pulp_id__in,omitempty"`
	Q        *string               `form:"q,omitempty" json:"q,omitempty"`

	// RelativePath Filter results where relative_path matches value
	RelativePath *string `form:"relative_path,omitempty" json:"relative_path,omitempty"`

	// RepositoryVersion Repository Version referenced by HREF
	RepositoryVersion *string `form:"repository_version,omitempty" json:"repository_version,omitempty"`

	// RepositoryVersionAdded Repository Version referenced by HREF
	RepositoryVersionAdded *string `form:"repository_version_added,omitempty" json:"repository_version_added,omitempty"`

	// RepositoryVersionRemoved Repository Version referenced by HREF
	RepositoryVersionRemoved *string `form:"repository_version_removed,omitempty" json:"repository_version_removed,omitempty"`
	Sha256                   *string `form:"sha256,omitempty" json:"sha256,omitempty"`

	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentFileFilesListParamsOrdering defines parameters for ContentFileFilesList.
type ContentFileFilesListParamsOrdering string

// ContentFileFilesReadParams defines parameters for ContentFileFilesRead.
type ContentFileFilesReadParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentOstreeContentListParams defines parameters for ContentOstreeContentList.
type ContentOstreeContentListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Ordering
	//
	// * `pk` - Pk
	// * `-pk` - Pk (descending)
	Ordering *[]ContentOstreeContentListParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// OrphanedFor Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.
	OrphanedFor *float32 `form:"orphaned_for,omitempty" json:"orphaned_for,omitempty"`

	// PulpHrefIn Multiple values may be separated by commas.
	PulpHrefIn *[]string `form:"pulp_href__in,omitempty" json:"pulp_href__in,omitempty"`

	// PulpIdIn Multiple values may be separated by commas.
	PulpIdIn *[]openapi_types.UUID `form:"pulp_id__in,omitempty" json:"pulp_id__in,omitempty"`
	Q        *string               `form:"q,omitempty" json:"q,omitempty"`

	// RepositoryVersion Repository Version referenced by HREF
	RepositoryVersion *string `form:"repository_version,omitempty" json:"repository_version,omitempty"`

	// RepositoryVersionAdded Repository Version referenced by HREF
	RepositoryVersionAdded *string `form:"repository_version_added,omitempty" json:"repository_version_added,omitempty"`

	// RepositoryVersionRemoved Repository Version referenced by HREF
	RepositoryVersionRemoved *string `form:"repository_version_removed,omitempty" json:"repository_version_removed,omitempty"`

	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentOstreeContentListParamsOrdering defines parameters for ContentOstreeContentList.
type ContentOstreeContentListParamsOrdering string

// ContentOstreeContentReadParams defines parameters for ContentOstreeContentRead.
type ContentOstreeContentReadParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentguardsCoreCompositeListParams defines parameters for ContentguardsCoreCompositeList.
type ContentguardsCoreCompositeListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Name Filter results where name matches value
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// NameContains Filter results where name contains value
	NameContains *string `form:"name__contains,omitempty" json:"name__contains,omitempty"`

	// NameIcontains Filter results where name contains value
	NameIcontains *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`

	// NameIexact Filter results where name matches value
	NameIexact *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`

	// NameIn Filter results where name is in a comma-separated list of values
	NameIn *[]string `form:"name__in,omitempty" json:"name__in,omitempty"`

	// NameIregex Filter results where name matches regex value
	NameIregex *string `form:"name__iregex,omitempty" json:"name__iregex,omitempty"`

	// NameIstartswith Filter results where name starts with value
	NameIstartswith *string `form:"name__istartswith,omitempty" json:"name__istartswith,omitempty"`

	// NameRegex Filter results where name matches regex value
	NameRegex *string `form:"name__regex,omitempty" json:"name__regex,omitempty"`

	// NameStartswith Filter results where name starts with value
	NameStartswith *string `form:"name__startswith,omitempty" json:"name__startswith,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Ordering
	//
	// * `pulp_id` - Pulp id
	// * `-pulp_id` - Pulp id (descending)
	// * `pulp_created` - Pulp created
	// * `-pulp_created` - Pulp created (descending)
	// * `pulp_last_updated` - Pulp last updated
	// * `-pulp_last_updated` - Pulp last updated (descending)
	// * `pulp_type` - Pulp type
	// * `-pulp_type` - Pulp type (descending)
	// * `name` - Name
	// * `-name` - Name (descending)
	// * `description` - Description
	// * `-description` - Description (descending)
	// * `pk` - Pk
	// * `-pk` - Pk (descending)
	Ordering *[]ContentguardsCoreCompositeListParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// PulpHrefIn Multiple values may be separated by commas.
	PulpHrefIn *[]string `form:"pulp_href__in,omitempty" json:"pulp_href__in,omitempty"`

	// PulpIdIn Multiple values may be separated by commas.
	PulpIdIn *[]openapi_types.UUID `form:"pulp_id__in,omitempty" json:"pulp_id__in,omitempty"`
	Q        *string               `form:"q,omitempty" json:"q,omitempty"`

	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentguardsCoreCompositeListParamsOrdering defines parameters for ContentguardsCoreCompositeList.
type ContentguardsCoreCompositeListParamsOrdering string

// ContentguardsCoreCompositeReadParams defines parameters for ContentguardsCoreCompositeRead.
type ContentguardsCoreCompositeReadParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentguardsCoreCompositeListRolesParams defines parameters for ContentguardsCoreCompositeListRoles.
type ContentguardsCoreCompositeListRolesParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentguardsCoreCompositeMyPermissionsParams defines parameters for ContentguardsCoreCompositeMyPermissions.
type ContentguardsCoreCompositeMyPermissionsParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentguardsCoreHeaderListParams defines parameters for ContentguardsCoreHeaderList.
type ContentguardsCoreHeaderListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Name Filter results where name matches value
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// NameContains Filter results where name contains value
	NameContains *string `form:"name__contains,omitempty" json:"name__contains,omitempty"`

	// NameIcontains Filter results where name contains value
	NameIcontains *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`

	// NameIexact Filter results where name matches value
	NameIexact *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`

	// NameIn Filter results where name is in a comma-separated list of values
	NameIn *[]string `form:"name__in,omitempty" json:"name__in,omitempty"`

	// NameIregex Filter results where name matches regex value
	NameIregex *string `form:"name__iregex,omitempty" json:"name__iregex,omitempty"`

	// NameIstartswith Filter results where name starts with value
	NameIstartswith *string `form:"name__istartswith,omitempty" json:"name__istartswith,omitempty"`

	// NameRegex Filter results where name matches regex value
	NameRegex *string `form:"name__regex,omitempty" json:"name__regex,omitempty"`

	// NameStartswith Filter results where name starts with value
	NameStartswith *string `form:"name__startswith,omitempty" json:"name__startswith,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Ordering
	//
	// * `pulp_id` - Pulp id
	// * `-pulp_id` - Pulp id (descending)
	// * `pulp_created` - Pulp created
	// * `-pulp_created` - Pulp created (descending)
	// * `pulp_last_updated` - Pulp last updated
	// * `-pulp_last_updated` - Pulp last updated (descending)
	// * `pulp_type` - Pulp type
	// * `-pulp_type` - Pulp type (descending)
	// * `name` - Name
	// * `-name` - Name (descending)
	// * `description` - Description
	// * `-description` - Description (descending)
	// * `pk` - Pk
	// * `-pk` - Pk (descending)
	Ordering *[]ContentguardsCoreHeaderListParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// PulpHrefIn Multiple values may be separated by commas.
	PulpHrefIn *[]string `form:"pulp_href__in,omitempty" json:"pulp_href__in,omitempty"`

	// PulpIdIn Multiple values may be separated by commas.
	PulpIdIn *[]openapi_types.UUID `form:"pulp_id__in,omitempty" json:"pulp_id__in,omitempty"`
	Q        *string               `form:"q,omitempty" json:"q,omitempty"`

	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentguardsCoreHeaderListParamsOrdering defines parameters for ContentguardsCoreHeaderList.
type ContentguardsCoreHeaderListParamsOrdering string

// ContentguardsCoreHeaderReadParams defines parameters for ContentguardsCoreHeaderRead.
type ContentguardsCoreHeaderReadParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentguardsCoreHeaderListRolesParams defines parameters for ContentguardsCoreHeaderListRoles.
type ContentguardsCoreHeaderListRolesParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentguardsCoreHeaderMyPermissionsParams defines parameters for ContentguardsCoreHeaderMyPermissions.
type ContentguardsCoreHeaderMyPermissionsParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentguardsCoreRbacListParams defines parameters for ContentguardsCoreRbacList.
type ContentguardsCoreRbacListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Name Filter results where name matches value
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// NameContains Filter results where name contains value
	NameContains *string `form:"name__contains,omitempty" json:"name__contains,omitempty"`

	// NameIcontains Filter results where name contains value
	NameIcontains *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`

	// NameIexact Filter results where name matches value
	NameIexact *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`

	// NameIn Filter results where name is in a comma-separated list of values
	NameIn *[]string `form:"name__in,omitempty" json:"name__in,omitempty"`

	// NameIregex Filter results where name matches regex value
	NameIregex *string `form:"name__iregex,omitempty" json:"name__iregex,omitempty"`

	// NameIstartswith Filter results where name starts with value
	NameIstartswith *string `form:"name__istartswith,omitempty" json:"name__istartswith,omitempty"`

	// NameRegex Filter results where name matches regex value
	NameRegex *string `form:"name__regex,omitempty" json:"name__regex,omitempty"`

	// NameStartswith Filter results where name starts with value
	NameStartswith *string `form:"name__startswith,omitempty" json:"name__startswith,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Ordering
	//
	// * `pulp_id` - Pulp id
	// * `-pulp_id` - Pulp id (descending)
	// * `pulp_created` - Pulp created
	// * `-pulp_created` - Pulp created (descending)
	// * `pulp_last_updated` - Pulp last updated
	// * `-pulp_last_updated` - Pulp last updated (descending)
	// * `pulp_type` - Pulp type
	// * `-pulp_type` - Pulp type (descending)
	// * `name` - Name
	// * `-name` - Name (descending)
	// * `description` - Description
	// * `-description` - Description (descending)
	// * `pk` - Pk
	// * `-pk` - Pk (descending)
	Ordering *[]ContentguardsCoreRbacListParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// PulpHrefIn Multiple values may be separated by commas.
	PulpHrefIn *[]string `form:"pulp_href__in,omitempty" json:"pulp_href__in,omitempty"`

	// PulpIdIn Multiple values may be separated by commas.
	PulpIdIn *[]openapi_types.UUID `form:"pulp_id__in,omitempty" json:"pulp_id__in,omitempty"`
	Q        *string               `form:"q,omitempty" json:"q,omitempty"`

	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentguardsCoreRbacListParamsOrdering defines parameters for ContentguardsCoreRbacList.
type ContentguardsCoreRbacListParamsOrdering string

// ContentguardsCoreRbacReadParams defines parameters for ContentguardsCoreRbacRead.
type ContentguardsCoreRbacReadParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentguardsCoreRbacListRolesParams defines parameters for ContentguardsCoreRbacListRoles.
type ContentguardsCoreRbacListRolesParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ContentguardsCoreRbacMyPermissionsParams defines parameters for ContentguardsCoreRbacMyPermissions.
type ContentguardsCoreRbacMyPermissionsParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// DistributionsOstreeOstreeListParams defines parameters for DistributionsOstreeOstreeList.
type DistributionsOstreeOstreeListParams struct {
	// BasePath Filter results where base_path matches value
	BasePath *string `form:"base_path,omitempty" json:"base_path,omitempty"`

	// BasePathContains Filter results where base_path contains value
	BasePathContains *string `form:"base_path__contains,omitempty" json:"base_path__contains,omitempty"`

	// BasePathIcontains Filter results where base_path contains value
	BasePathIcontains *string `form:"base_path__icontains,omitempty" json:"base_path__icontains,omitempty"`

	// BasePathIn Filter results where base_path is in a comma-separated list of values
	BasePathIn *[]string `form:"base_path__in,omitempty" json:"base_path__in,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Name Filter results where name matches value
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// NameContains Filter results where name contains value
	NameContains *string `form:"name__contains,omitempty" json:"name__contains,omitempty"`

	// NameIcontains Filter results where name contains value
	NameIcontains *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`

	// NameIexact Filter results where name matches value
	NameIexact *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`

	// NameIn Filter results where name is in a comma-separated list of values
	NameIn *[]string `form:"name__in,omitempty" json:"name__in,omitempty"`

	// NameIregex Filter results where name matches regex value
	NameIregex *string `form:"name__iregex,omitempty" json:"name__iregex,omitempty"`

	// NameIstartswith Filter results where name starts with value
	NameIstartswith *string `form:"name__istartswith,omitempty" json:"name__istartswith,omitempty"`

	// NameRegex Filter results where name matches regex value
	NameRegex *string `form:"name__regex,omitempty" json:"name__regex,omitempty"`

	// NameStartswith Filter results where name starts with value
	NameStartswith *string `form:"name__startswith,omitempty" json:"name__startswith,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Ordering
	//
	// * `pulp_id` - Pulp id
	// * `-pulp_id` - Pulp id (descending)
	// * `pulp_created` - Pulp created
	// * `-pulp_created` - Pulp created (descending)
	// * `pulp_last_updated` - Pulp last updated
	// * `-pulp_last_updated` - Pulp last updated (descending)
	// * `pulp_type` - Pulp type
	// * `-pulp_type` - Pulp type (descending)
	// * `name` - Name
	// * `-name` - Name (descending)
	// * `pulp_labels` - Pulp labels
	// * `-pulp_labels` - Pulp labels (descending)
	// * `base_path` - Base path
	// * `-base_path` - Base path (descending)
	// * `hidden` - Hidden
	// * `-hidden` - Hidden (descending)
	// * `pk` - Pk
	// * `-pk` - Pk (descending)
	Ordering *[]DistributionsOstreeOstreeListParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// PulpHrefIn Multiple values may be separated by commas.
	PulpHrefIn *[]string `form:"pulp_href__in,omitempty" json:"pulp_href__in,omitempty"`

	// PulpIdIn Multiple values may be separated by commas.
	PulpIdIn *[]openapi_types.UUID `form:"pulp_id__in,omitempty" json:"pulp_id__in,omitempty"`

	// PulpLabelSelect Filter labels by search string
	PulpLabelSelect *string `form:"pulp_label_select,omitempty" json:"pulp_label_select,omitempty"`
	Q               *string `form:"q,omitempty" json:"q,omitempty"`

	// Repository Filter results where repository matches value
	Repository *openapi_types.UUID `form:"repository,omitempty" json:"repository,omitempty"`

	// RepositoryIn Filter results where repository is in a comma-separated list of values
	RepositoryIn *[]openapi_types.UUID `form:"repository__in,omitempty" json:"repository__in,omitempty"`

	// WithContent Filter distributions based on the content served by them
	WithContent *string `form:"with_content,omitempty" json:"with_content,omitempty"`

	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// DistributionsOstreeOstreeListParamsOrdering defines parameters for DistributionsOstreeOstreeList.
type DistributionsOstreeOstreeListParamsOrdering string

// DistributionsOstreeOstreeReadParams defines parameters for DistributionsOstreeOstreeRead.
type DistributionsOstreeOstreeReadParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// DistributionsOstreeOstreeListRolesParams defines parameters for DistributionsOstreeOstreeListRoles.
type DistributionsOstreeOstreeListRolesParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// DistributionsOstreeOstreeMyPermissionsParams defines parameters for DistributionsOstreeOstreeMyPermissions.
type DistributionsOstreeOstreeMyPermissionsParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// DomainsListParams defines parameters for DomainsList.
type DomainsListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Name Filter results where name matches value
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// NameContains Filter results where name contains value
	NameContains *string `form:"name__contains,omitempty" json:"name__contains,omitempty"`

	// NameIcontains Filter results where name contains value
	NameIcontains *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`

	// NameIexact Filter results where name matches value
	NameIexact *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`

	// NameIn Filter results where name is in a comma-separated list of values
	NameIn *[]string `form:"name__in,omitempty" json:"name__in,omitempty"`

	// NameIregex Filter results where name matches regex value
	NameIregex *string `form:"name__iregex,omitempty" json:"name__iregex,omitempty"`

	// NameIstartswith Filter results where name starts with value
	NameIstartswith *string `form:"name__istartswith,omitempty" json:"name__istartswith,omitempty"`

	// NameRegex Filter results where name matches regex value
	NameRegex *string `form:"name__regex,omitempty" json:"name__regex,omitempty"`

	// NameStartswith Filter results where name starts with value
	NameStartswith *string `form:"name__startswith,omitempty" json:"name__startswith,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Ordering
	//
	// * `pulp_id` - Pulp id
	// * `-pulp_id` - Pulp id (descending)
	// * `pulp_created` - Pulp created
	// * `-pulp_created` - Pulp created (descending)
	// * `pulp_last_updated` - Pulp last updated
	// * `-pulp_last_updated` - Pulp last updated (descending)
	// * `name` - Name
	// * `-name` - Name (descending)
	// * `description` - Description
	// * `-description` - Description (descending)
	// * `storage_class` - Storage class
	// * `-storage_class` - Storage class (descending)
	// * `storage_settings` - Storage settings
	// * `-storage_settings` - Storage settings (descending)
	// * `redirect_to_object_storage` - Redirect to object storage
	// * `-redirect_to_object_storage` - Redirect to object storage (descending)
	// * `hide_guarded_distributions` - Hide guarded distributions
	// * `-hide_guarded_distributions` - Hide guarded distributions (descending)
	// * `pk` - Pk
	// * `-pk` - Pk (descending)
	Ordering *[]DomainsListParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// PulpHrefIn Multiple values may be separated by commas.
	PulpHrefIn *[]string `form:"pulp_href__in,omitempty" json:"pulp_href__in,omitempty"`

	// PulpIdIn Multiple values may be separated by commas.
	PulpIdIn *[]openapi_types.UUID `form:"pulp_id__in,omitempty" json:"pulp_id__in,omitempty"`
	Q        *string               `form:"q,omitempty" json:"q,omitempty"`

	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// DomainsListParamsOrdering defines parameters for DomainsList.
type DomainsListParamsOrdering string

// DomainsReadParams defines parameters for DomainsRead.
type DomainsReadParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// RepositoriesFileFileListParams defines parameters for RepositoriesFileFileList.
type RepositoriesFileFileListParams struct {
	// LatestWithContent Content Unit referenced by HREF
	LatestWithContent *string `form:"latest_with_content,omitempty" json:"latest_with_content,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Name Filter results where name matches value
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// NameContains Filter results where name contains value
	NameContains *string `form:"name__contains,omitempty" json:"name__contains,omitempty"`

	// NameIcontains Filter results where name contains value
	NameIcontains *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`

	// NameIexact Filter results where name matches value
	NameIexact *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`

	// NameIn Filter results where name is in a comma-separated list of values
	NameIn *[]string `form:"name__in,omitempty" json:"name__in,omitempty"`

	// NameIregex Filter results where name matches regex value
	NameIregex *string `form:"name__iregex,omitempty" json:"name__iregex,omitempty"`

	// NameIstartswith Filter results where name starts with value
	NameIstartswith *string `form:"name__istartswith,omitempty" json:"name__istartswith,omitempty"`

	// NameRegex Filter results where name matches regex value
	NameRegex *string `form:"name__regex,omitempty" json:"name__regex,omitempty"`

	// NameStartswith Filter results where name starts with value
	NameStartswith *string `form:"name__startswith,omitempty" json:"name__startswith,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Ordering
	//
	// * `pulp_id` - Pulp id
	// * `-pulp_id` - Pulp id (descending)
	// * `pulp_created` - Pulp created
	// * `-pulp_created` - Pulp created (descending)
	// * `pulp_last_updated` - Pulp last updated
	// * `-pulp_last_updated` - Pulp last updated (descending)
	// * `pulp_type` - Pulp type
	// * `-pulp_type` - Pulp type (descending)
	// * `name` - Name
	// * `-name` - Name (descending)
	// * `pulp_labels` - Pulp labels
	// * `-pulp_labels` - Pulp labels (descending)
	// * `description` - Description
	// * `-description` - Description (descending)
	// * `next_version` - Next version
	// * `-next_version` - Next version (descending)
	// * `retain_repo_versions` - Retain repo versions
	// * `-retain_repo_versions` - Retain repo versions (descending)
	// * `user_hidden` - User hidden
	// * `-user_hidden` - User hidden (descending)
	// * `pk` - Pk
	// * `-pk` - Pk (descending)
	Ordering *[]RepositoriesFileFileListParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// PulpHrefIn Multiple values may be separated by commas.
	PulpHrefIn *[]string `form:"pulp_href__in,omitempty" json:"pulp_href__in,omitempty"`

	// PulpIdIn Multiple values may be separated by commas.
	PulpIdIn *[]openapi_types.UUID `form:"pulp_id__in,omitempty" json:"pulp_id__in,omitempty"`

	// PulpLabelSelect Filter labels by search string
	PulpLabelSelect *string `form:"pulp_label_select,omitempty" json:"pulp_label_select,omitempty"`
	Q               *string `form:"q,omitempty" json:"q,omitempty"`

	// Remote Foreign Key referenced by HREF
	Remote *openapi_types.UUID `form:"remote,omitempty" json:"remote,omitempty"`

	// RetainRepoVersions Filter results where retain_repo_versions matches value
	RetainRepoVersions *int `form:"retain_repo_versions,omitempty" json:"retain_repo_versions,omitempty"`

	// RetainRepoVersionsGt Filter results where retain_repo_versions is greater than value
	RetainRepoVersionsGt *int `form:"retain_repo_versions__gt,omitempty" json:"retain_repo_versions__gt,omitempty"`

	// RetainRepoVersionsGte Filter results where retain_repo_versions is greater than or equal to value
	RetainRepoVersionsGte *int `form:"retain_repo_versions__gte,omitempty" json:"retain_repo_versions__gte,omitempty"`

	// RetainRepoVersionsIsnull Filter results where retain_repo_versions has a null value
	RetainRepoVersionsIsnull *bool `form:"retain_repo_versions__isnull,omitempty" json:"retain_repo_versions__isnull,omitempty"`

	// RetainRepoVersionsLt Filter results where retain_repo_versions is less than value
	RetainRepoVersionsLt *int `form:"retain_repo_versions__lt,omitempty" json:"retain_repo_versions__lt,omitempty"`

	// RetainRepoVersionsLte Filter results where retain_repo_versions is less than or equal to value
	RetainRepoVersionsLte *int `form:"retain_repo_versions__lte,omitempty" json:"retain_repo_versions__lte,omitempty"`

	// RetainRepoVersionsNe Filter results where retain_repo_versions not equal to value
	RetainRepoVersionsNe *int `form:"retain_repo_versions__ne,omitempty" json:"retain_repo_versions__ne,omitempty"`

	// RetainRepoVersionsRange Filter results where retain_repo_versions is between two comma separated values
	RetainRepoVersionsRange *[]int `form:"retain_repo_versions__range,omitempty" json:"retain_repo_versions__range,omitempty"`

	// WithContent Content Unit referenced by HREF
	WithContent *string `form:"with_content,omitempty" json:"with_content,omitempty"`

	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// RepositoriesFileFileListParamsOrdering defines parameters for RepositoriesFileFileList.
type RepositoriesFileFileListParamsOrdering string

// RepositoriesFileFileReadParams defines parameters for RepositoriesFileFileRead.
type RepositoriesFileFileReadParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// RepositoriesFileFileListRolesParams defines parameters for RepositoriesFileFileListRoles.
type RepositoriesFileFileListRolesParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// RepositoriesFileFileMyPermissionsParams defines parameters for RepositoriesFileFileMyPermissions.
type RepositoriesFileFileMyPermissionsParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// RepositoriesFileFileVersionsListParams defines parameters for RepositoriesFileFileVersionsList.
type RepositoriesFileFileVersionsListParams struct {
	// Content Content Unit referenced by HREF
	Content *string `form:"content,omitempty" json:"content,omitempty"`

	// ContentIn Content Unit referenced by HREF
	ContentIn *string `form:"content__in,omitempty" json:"content__in,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Number Filter results where number matches value
	Number *int `form:"number,omitempty" json:"number,omitempty"`

	// NumberGt Filter results where number is greater than value
	NumberGt *int `form:"number__gt,omitempty" json:"number__gt,omitempty"`

	// NumberGte Filter results where number is greater than or equal to value
	NumberGte *int `form:"number__gte,omitempty" json:"number__gte,omitempty"`

	// NumberLt Filter results where number is less than value
	NumberLt *int `form:"number__lt,omitempty" json:"number__lt,omitempty"`

	// NumberLte Filter results where number is less than or equal to value
	NumberLte *int `form:"number__lte,omitempty" json:"number__lte,omitempty"`

	// NumberRange Filter results where number is between two comma separated values
	NumberRange *[]int `form:"number__range,omitempty" json:"number__range,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Ordering
	//
	// * `pulp_id` - Pulp id
	// * `-pulp_id` - Pulp id (descending)
	// * `pulp_created` - Pulp created
	// * `-pulp_created` - Pulp created (descending)
	// * `pulp_last_updated` - Pulp last updated
	// * `-pulp_last_updated` - Pulp last updated (descending)
	// * `number` - Number
	// * `-number` - Number (descending)
	// * `complete` - Complete
	// * `-complete` - Complete (descending)
	// * `info` - Info
	// * `-info` - Info (descending)
	// * `pk` - Pk
	// * `-pk` - Pk (descending)
	Ordering *[]RepositoriesFileFileVersionsListParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// PulpCreated Filter results where pulp_created matches value
	PulpCreated *time.Time `form:"pulp_created,omitempty" json:"pulp_created,omitempty"`

	// PulpCreatedGt Filter results where pulp_created is greater than value
	PulpCreatedGt *time.Time `form:"pulp_created__gt,omitempty" json:"pulp_created__gt,omitempty"`

	// PulpCreatedGte Filter results where pulp_created is greater than or equal to value
	PulpCreatedGte *time.Time `form:"pulp_created__gte,omitempty" json:"pulp_created__gte,omitempty"`

	// PulpCreatedLt Filter results where pulp_created is less than value
	PulpCreatedLt *time.Time `form:"pulp_created__lt,omitempty" json:"pulp_created__lt,omitempty"`

	// PulpCreatedLte Filter results where pulp_created is less than or equal to value
	PulpCreatedLte *time.Time `form:"pulp_created__lte,omitempty" json:"pulp_created__lte,omitempty"`

	// PulpCreatedRange Filter results where pulp_created is between two comma separated values
	PulpCreatedRange *[]time.Time `form:"pulp_created__range,omitempty" json:"pulp_created__range,omitempty"`

	// PulpHrefIn Multiple values may be separated by commas.
	PulpHrefIn *[]string `form:"pulp_href__in,omitempty" json:"pulp_href__in,omitempty"`
	Q          *string   `form:"q,omitempty" json:"q,omitempty"`

	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// RepositoriesFileFileVersionsListParamsOrdering defines parameters for RepositoriesFileFileVersionsList.
type RepositoriesFileFileVersionsListParamsOrdering string

// RepositoriesFileFileVersionsReadParams defines parameters for RepositoriesFileFileVersionsRead.
type RepositoriesFileFileVersionsReadParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// RepositoriesOstreeOstreeListParams defines parameters for RepositoriesOstreeOstreeList.
type RepositoriesOstreeOstreeListParams struct {
	// LatestWithContent Content Unit referenced by HREF
	LatestWithContent *string `form:"latest_with_content,omitempty" json:"latest_with_content,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Name Filter results where name matches value
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// NameContains Filter results where name contains value
	NameContains *string `form:"name__contains,omitempty" json:"name__contains,omitempty"`

	// NameIcontains Filter results where name contains value
	NameIcontains *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`

	// NameIexact Filter results where name matches value
	NameIexact *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`

	// NameIn Filter results where name is in a comma-separated list of values
	NameIn *[]string `form:"name__in,omitempty" json:"name__in,omitempty"`

	// NameIregex Filter results where name matches regex value
	NameIregex *string `form:"name__iregex,omitempty" json:"name__iregex,omitempty"`

	// NameIstartswith Filter results where name starts with value
	NameIstartswith *string `form:"name__istartswith,omitempty" json:"name__istartswith,omitempty"`

	// NameRegex Filter results where name matches regex value
	NameRegex *string `form:"name__regex,omitempty" json:"name__regex,omitempty"`

	// NameStartswith Filter results where name starts with value
	NameStartswith *string `form:"name__startswith,omitempty" json:"name__startswith,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Ordering
	//
	// * `pulp_id` - Pulp id
	// * `-pulp_id` - Pulp id (descending)
	// * `pulp_created` - Pulp created
	// * `-pulp_created` - Pulp created (descending)
	// * `pulp_last_updated` - Pulp last updated
	// * `-pulp_last_updated` - Pulp last updated (descending)
	// * `pulp_type` - Pulp type
	// * `-pulp_type` - Pulp type (descending)
	// * `name` - Name
	// * `-name` - Name (descending)
	// * `pulp_labels` - Pulp labels
	// * `-pulp_labels` - Pulp labels (descending)
	// * `description` - Description
	// * `-description` - Description (descending)
	// * `next_version` - Next version
	// * `-next_version` - Next version (descending)
	// * `retain_repo_versions` - Retain repo versions
	// * `-retain_repo_versions` - Retain repo versions (descending)
	// * `user_hidden` - User hidden
	// * `-user_hidden` - User hidden (descending)
	// * `pk` - Pk
	// * `-pk` - Pk (descending)
	Ordering *[]RepositoriesOstreeOstreeListParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// PulpHrefIn Multiple values may be separated by commas.
	PulpHrefIn *[]string `form:"pulp_href__in,omitempty" json:"pulp_href__in,omitempty"`

	// PulpIdIn Multiple values may be separated by commas.
	PulpIdIn *[]openapi_types.UUID `form:"pulp_id__in,omitempty" json:"pulp_id__in,omitempty"`

	// PulpLabelSelect Filter labels by search string
	PulpLabelSelect *string `form:"pulp_label_select,omitempty" json:"pulp_label_select,omitempty"`
	Q               *string `form:"q,omitempty" json:"q,omitempty"`

	// Remote Foreign Key referenced by HREF
	Remote *openapi_types.UUID `form:"remote,omitempty" json:"remote,omitempty"`

	// RetainRepoVersions Filter results where retain_repo_versions matches value
	RetainRepoVersions *int `form:"retain_repo_versions,omitempty" json:"retain_repo_versions,omitempty"`

	// RetainRepoVersionsGt Filter results where retain_repo_versions is greater than value
	RetainRepoVersionsGt *int `form:"retain_repo_versions__gt,omitempty" json:"retain_repo_versions__gt,omitempty"`

	// RetainRepoVersionsGte Filter results where retain_repo_versions is greater than or equal to value
	RetainRepoVersionsGte *int `form:"retain_repo_versions__gte,omitempty" json:"retain_repo_versions__gte,omitempty"`

	// RetainRepoVersionsIsnull Filter results where retain_repo_versions has a null value
	RetainRepoVersionsIsnull *bool `form:"retain_repo_versions__isnull,omitempty" json:"retain_repo_versions__isnull,omitempty"`

	// RetainRepoVersionsLt Filter results where retain_repo_versions is less than value
	RetainRepoVersionsLt *int `form:"retain_repo_versions__lt,omitempty" json:"retain_repo_versions__lt,omitempty"`

	// RetainRepoVersionsLte Filter results where retain_repo_versions is less than or equal to value
	RetainRepoVersionsLte *int `form:"retain_repo_versions__lte,omitempty" json:"retain_repo_versions__lte,omitempty"`

	// RetainRepoVersionsNe Filter results where retain_repo_versions not equal to value
	RetainRepoVersionsNe *int `form:"retain_repo_versions__ne,omitempty" json:"retain_repo_versions__ne,omitempty"`

	// RetainRepoVersionsRange Filter results where retain_repo_versions is between two comma separated values
	RetainRepoVersionsRange *[]int `form:"retain_repo_versions__range,omitempty" json:"retain_repo_versions__range,omitempty"`

	// WithContent Content Unit referenced by HREF
	WithContent *string `form:"with_content,omitempty" json:"with_content,omitempty"`

	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// RepositoriesOstreeOstreeListParamsOrdering defines parameters for RepositoriesOstreeOstreeList.
type RepositoriesOstreeOstreeListParamsOrdering string

// RepositoriesOstreeOstreeReadParams defines parameters for RepositoriesOstreeOstreeRead.
type RepositoriesOstreeOstreeReadParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// RepositoriesOstreeOstreeListRolesParams defines parameters for RepositoriesOstreeOstreeListRoles.
type RepositoriesOstreeOstreeListRolesParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// RepositoriesOstreeOstreeMyPermissionsParams defines parameters for RepositoriesOstreeOstreeMyPermissions.
type RepositoriesOstreeOstreeMyPermissionsParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// TasksListParams defines parameters for TasksList.
type TasksListParams struct {
	// ChildTasks Filter results where child_tasks matches value
	ChildTasks         *openapi_types.UUID `form:"child_tasks,omitempty" json:"child_tasks,omitempty"`
	CreatedResources   *openapi_types.UUID `form:"created_resources,omitempty" json:"created_resources,omitempty"`
	ExclusiveResources *string             `form:"exclusive_resources,omitempty" json:"exclusive_resources,omitempty"`

	// ExclusiveResourcesIn Multiple values may be separated by commas.
	ExclusiveResourcesIn *[]string `form:"exclusive_resources__in,omitempty" json:"exclusive_resources__in,omitempty"`

	// FinishedAt Filter results where finished_at matches value
	FinishedAt *time.Time `form:"finished_at,omitempty" json:"finished_at,omitempty"`

	// FinishedAtGt Filter results where finished_at is greater than value
	FinishedAtGt *time.Time `form:"finished_at__gt,omitempty" json:"finished_at__gt,omitempty"`

	// FinishedAtGte Filter results where finished_at is greater than or equal to value
	FinishedAtGte *time.Time `form:"finished_at__gte,omitempty" json:"finished_at__gte,omitempty"`

	// FinishedAtLt Filter results where finished_at is less than value
	FinishedAtLt *time.Time `form:"finished_at__lt,omitempty" json:"finished_at__lt,omitempty"`

	// FinishedAtLte Filter results where finished_at is less than or equal to value
	FinishedAtLte *time.Time `form:"finished_at__lte,omitempty" json:"finished_at__lte,omitempty"`

	// FinishedAtRange Filter results where finished_at is between two comma separated values
	FinishedAtRange *[]time.Time `form:"finished_at__range,omitempty" json:"finished_at__range,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// LoggingCid Filter results where logging_cid matches value
	LoggingCid *string `form:"logging_cid,omitempty" json:"logging_cid,omitempty"`

	// LoggingCidContains Filter results where logging_cid contains value
	LoggingCidContains *string `form:"logging_cid__contains,omitempty" json:"logging_cid__contains,omitempty"`

	// Name Filter results where name matches value
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// NameContains Filter results where name contains value
	NameContains *string `form:"name__contains,omitempty" json:"name__contains,omitempty"`

	// NameIn Filter results where name is in a comma-separated list of values
	NameIn *[]string `form:"name__in,omitempty" json:"name__in,omitempty"`

	// NameNe Filter results where name not equal to value
	NameNe *string `form:"name__ne,omitempty" json:"name__ne,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Ordering
	//
	// * `pulp_id` - Pulp id
	// * `-pulp_id` - Pulp id (descending)
	// * `pulp_created` - Pulp created
	// * `-pulp_created` - Pulp created (descending)
	// * `pulp_last_updated` - Pulp last updated
	// * `-pulp_last_updated` - Pulp last updated (descending)
	// * `state` - State
	// * `-state` - State (descending)
	// * `name` - Name
	// * `-name` - Name (descending)
	// * `logging_cid` - Logging cid
	// * `-logging_cid` - Logging cid (descending)
	// * `unblocked_at` - Unblocked at
	// * `-unblocked_at` - Unblocked at (descending)
	// * `started_at` - Started at
	// * `-started_at` - Started at (descending)
	// * `finished_at` - Finished at
	// * `-finished_at` - Finished at (descending)
	// * `error` - Error
	// * `-error` - Error (descending)
	// * `enc_args` - Enc args
	// * `-enc_args` - Enc args (descending)
	// * `enc_kwargs` - Enc kwargs
	// * `-enc_kwargs` - Enc kwargs (descending)
	// * `reserved_resources_record` - Reserved resources record
	// * `-reserved_resources_record` - Reserved resources record (descending)
	// * `versions` - Versions
	// * `-versions` - Versions (descending)
	// * `pk` - Pk
	// * `-pk` - Pk (descending)
	Ordering *[]TasksListParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// ParentTask Filter results where parent_task matches value
	ParentTask *openapi_types.UUID `form:"parent_task,omitempty" json:"parent_task,omitempty"`

	// PulpHrefIn Multiple values may be separated by commas.
	PulpHrefIn *[]string `form:"pulp_href__in,omitempty" json:"pulp_href__in,omitempty"`

	// PulpIdIn Multiple values may be separated by commas.
	PulpIdIn          *[]openapi_types.UUID `form:"pulp_id__in,omitempty" json:"pulp_id__in,omitempty"`
	Q                 *string               `form:"q,omitempty" json:"q,omitempty"`
	ReservedResources *string               `form:"reserved_resources,omitempty" json:"reserved_resources,omitempty"`

	// ReservedResourcesIn Multiple values may be separated by commas.
	ReservedResourcesIn *[]string `form:"reserved_resources__in,omitempty" json:"reserved_resources__in,omitempty"`
	SharedResources     *string   `form:"shared_resources,omitempty" json:"shared_resources,omitempty"`

	// SharedResourcesIn Multiple values may be separated by commas.
	SharedResourcesIn *[]string `form:"shared_resources__in,omitempty" json:"shared_resources__in,omitempty"`

	// StartedAt Filter results where started_at matches value
	StartedAt *time.Time `form:"started_at,omitempty" json:"started_at,omitempty"`

	// StartedAtGt Filter results where started_at is greater than value
	StartedAtGt *time.Time `form:"started_at__gt,omitempty" json:"started_at__gt,omitempty"`

	// StartedAtGte Filter results where started_at is greater than or equal to value
	StartedAtGte *time.Time `form:"started_at__gte,omitempty" json:"started_at__gte,omitempty"`

	// StartedAtLt Filter results where started_at is less than value
	StartedAtLt *time.Time `form:"started_at__lt,omitempty" json:"started_at__lt,omitempty"`

	// StartedAtLte Filter results where started_at is less than or equal to value
	StartedAtLte *time.Time `form:"started_at__lte,omitempty" json:"started_at__lte,omitempty"`

	// StartedAtRange Filter results where started_at is between two comma separated values
	StartedAtRange *[]time.Time `form:"started_at__range,omitempty" json:"started_at__range,omitempty"`

	// State Filter results where state matches value
	//
	// * `waiting` - Waiting
	// * `skipped` - Skipped
	// * `running` - Running
	// * `completed` - Completed
	// * `failed` - Failed
	// * `canceled` - Canceled
	// * `canceling` - Canceling
	State *TasksListParamsState `form:"state,omitempty" json:"state,omitempty"`

	// StateIn Filter results where state is in a comma-separated list of values
	StateIn *[]string `form:"state__in,omitempty" json:"state__in,omitempty"`

	// StateNe Filter results where state not equal to value
	StateNe *string `form:"state__ne,omitempty" json:"state__ne,omitempty"`

	// TaskGroup Filter results where task_group matches value
	TaskGroup *openapi_types.UUID `form:"task_group,omitempty" json:"task_group,omitempty"`

	// Worker Filter results where worker matches value
	Worker *openapi_types.UUID `form:"worker,omitempty" json:"worker,omitempty"`

	// WorkerIn Filter results where worker is in a comma-separated list of values
	WorkerIn *[]openapi_types.UUID `form:"worker__in,omitempty" json:"worker__in,omitempty"`

	// WorkerIsnull Filter results where worker has a null value
	WorkerIsnull *bool `form:"worker__isnull,omitempty" json:"worker__isnull,omitempty"`

	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// TasksListParamsOrdering defines parameters for TasksList.
type TasksListParamsOrdering string

// TasksListParamsState defines parameters for TasksList.
type TasksListParamsState string

// TasksReadParams defines parameters for TasksRead.
type TasksReadParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// TasksListRolesParams defines parameters for TasksListRoles.
type TasksListRolesParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// TasksMyPermissionsParams defines parameters for TasksMyPermissions.
type TasksMyPermissionsParams struct {
	// Fields A list of fields to include in the response.
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields A list of fields to exclude from the response.
	ExcludeFields *[]string `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`
}

// ArtifactsCreateFormdataRequestBody defines body for ArtifactsCreate for application/x-www-form-urlencoded ContentType.
type ArtifactsCreateFormdataRequestBody = Artifact

// ArtifactsCreateMultipartRequestBody defines body for ArtifactsCreate for multipart/form-data ContentType.
type ArtifactsCreateMultipartRequestBody = Artifact

// ContentFileFilesCreateFormdataRequestBody defines body for ContentFileFilesCreate for application/x-www-form-urlencoded ContentType.
type ContentFileFilesCreateFormdataRequestBody = FileFileContent

// ContentFileFilesCreateMultipartRequestBody defines body for ContentFileFilesCreate for multipart/form-data ContentType.
type ContentFileFilesCreateMultipartRequestBody = FileFileContent

// ContentOstreeContentCreateJSONRequestBody defines body for ContentOstreeContentCreate for application/json ContentType.
type ContentOstreeContentCreateJSONRequestBody = OstreeOstreeContent

// ContentOstreeContentCreateFormdataRequestBody defines body for ContentOstreeContentCreate for application/x-www-form-urlencoded ContentType.
type ContentOstreeContentCreateFormdataRequestBody = OstreeOstreeContent

// ContentOstreeContentCreateMultipartRequestBody defines body for ContentOstreeContentCreate for multipart/form-data ContentType.
type ContentOstreeContentCreateMultipartRequestBody = OstreeOstreeContent

// ContentguardsCoreCompositeCreateJSONRequestBody defines body for ContentguardsCoreCompositeCreate for application/json ContentType.
type ContentguardsCoreCompositeCreateJSONRequestBody = CompositeContentGuard

// ContentguardsCoreCompositeCreateFormdataRequestBody defines body for ContentguardsCoreCompositeCreate for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreCompositeCreateFormdataRequestBody = CompositeContentGuard

// ContentguardsCoreCompositeCreateMultipartRequestBody defines body for ContentguardsCoreCompositeCreate for multipart/form-data ContentType.
type ContentguardsCoreCompositeCreateMultipartRequestBody = CompositeContentGuard

// ContentguardsCoreCompositePartialUpdateJSONRequestBody defines body for ContentguardsCoreCompositePartialUpdate for application/json ContentType.
type ContentguardsCoreCompositePartialUpdateJSONRequestBody = PatchedCompositeContentGuard

// ContentguardsCoreCompositePartialUpdateFormdataRequestBody defines body for ContentguardsCoreCompositePartialUpdate for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreCompositePartialUpdateFormdataRequestBody = PatchedCompositeContentGuard

// ContentguardsCoreCompositePartialUpdateMultipartRequestBody defines body for ContentguardsCoreCompositePartialUpdate for multipart/form-data ContentType.
type ContentguardsCoreCompositePartialUpdateMultipartRequestBody = PatchedCompositeContentGuard

// ContentguardsCoreCompositeUpdateJSONRequestBody defines body for ContentguardsCoreCompositeUpdate for application/json ContentType.
type ContentguardsCoreCompositeUpdateJSONRequestBody = CompositeContentGuard

// ContentguardsCoreCompositeUpdateFormdataRequestBody defines body for ContentguardsCoreCompositeUpdate for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreCompositeUpdateFormdataRequestBody = CompositeContentGuard

// ContentguardsCoreCompositeUpdateMultipartRequestBody defines body for ContentguardsCoreCompositeUpdate for multipart/form-data ContentType.
type ContentguardsCoreCompositeUpdateMultipartRequestBody = CompositeContentGuard

// ContentguardsCoreCompositeAddRoleJSONRequestBody defines body for ContentguardsCoreCompositeAddRole for application/json ContentType.
type ContentguardsCoreCompositeAddRoleJSONRequestBody = NestedRole

// ContentguardsCoreCompositeAddRoleFormdataRequestBody defines body for ContentguardsCoreCompositeAddRole for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreCompositeAddRoleFormdataRequestBody = NestedRole

// ContentguardsCoreCompositeAddRoleMultipartRequestBody defines body for ContentguardsCoreCompositeAddRole for multipart/form-data ContentType.
type ContentguardsCoreCompositeAddRoleMultipartRequestBody = NestedRole

// ContentguardsCoreCompositeRemoveRoleJSONRequestBody defines body for ContentguardsCoreCompositeRemoveRole for application/json ContentType.
type ContentguardsCoreCompositeRemoveRoleJSONRequestBody = NestedRole

// ContentguardsCoreCompositeRemoveRoleFormdataRequestBody defines body for ContentguardsCoreCompositeRemoveRole for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreCompositeRemoveRoleFormdataRequestBody = NestedRole

// ContentguardsCoreCompositeRemoveRoleMultipartRequestBody defines body for ContentguardsCoreCompositeRemoveRole for multipart/form-data ContentType.
type ContentguardsCoreCompositeRemoveRoleMultipartRequestBody = NestedRole

// ContentguardsCoreHeaderCreateJSONRequestBody defines body for ContentguardsCoreHeaderCreate for application/json ContentType.
type ContentguardsCoreHeaderCreateJSONRequestBody = HeaderContentGuard

// ContentguardsCoreHeaderCreateFormdataRequestBody defines body for ContentguardsCoreHeaderCreate for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreHeaderCreateFormdataRequestBody = HeaderContentGuard

// ContentguardsCoreHeaderCreateMultipartRequestBody defines body for ContentguardsCoreHeaderCreate for multipart/form-data ContentType.
type ContentguardsCoreHeaderCreateMultipartRequestBody = HeaderContentGuard

// ContentguardsCoreHeaderPartialUpdateJSONRequestBody defines body for ContentguardsCoreHeaderPartialUpdate for application/json ContentType.
type ContentguardsCoreHeaderPartialUpdateJSONRequestBody = PatchedHeaderContentGuard

// ContentguardsCoreHeaderPartialUpdateFormdataRequestBody defines body for ContentguardsCoreHeaderPartialUpdate for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreHeaderPartialUpdateFormdataRequestBody = PatchedHeaderContentGuard

// ContentguardsCoreHeaderPartialUpdateMultipartRequestBody defines body for ContentguardsCoreHeaderPartialUpdate for multipart/form-data ContentType.
type ContentguardsCoreHeaderPartialUpdateMultipartRequestBody = PatchedHeaderContentGuard

// ContentguardsCoreHeaderUpdateJSONRequestBody defines body for ContentguardsCoreHeaderUpdate for application/json ContentType.
type ContentguardsCoreHeaderUpdateJSONRequestBody = HeaderContentGuard

// ContentguardsCoreHeaderUpdateFormdataRequestBody defines body for ContentguardsCoreHeaderUpdate for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreHeaderUpdateFormdataRequestBody = HeaderContentGuard

// ContentguardsCoreHeaderUpdateMultipartRequestBody defines body for ContentguardsCoreHeaderUpdate for multipart/form-data ContentType.
type ContentguardsCoreHeaderUpdateMultipartRequestBody = HeaderContentGuard

// ContentguardsCoreHeaderAddRoleJSONRequestBody defines body for ContentguardsCoreHeaderAddRole for application/json ContentType.
type ContentguardsCoreHeaderAddRoleJSONRequestBody = NestedRole

// ContentguardsCoreHeaderAddRoleFormdataRequestBody defines body for ContentguardsCoreHeaderAddRole for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreHeaderAddRoleFormdataRequestBody = NestedRole

// ContentguardsCoreHeaderAddRoleMultipartRequestBody defines body for ContentguardsCoreHeaderAddRole for multipart/form-data ContentType.
type ContentguardsCoreHeaderAddRoleMultipartRequestBody = NestedRole

// ContentguardsCoreHeaderRemoveRoleJSONRequestBody defines body for ContentguardsCoreHeaderRemoveRole for application/json ContentType.
type ContentguardsCoreHeaderRemoveRoleJSONRequestBody = NestedRole

// ContentguardsCoreHeaderRemoveRoleFormdataRequestBody defines body for ContentguardsCoreHeaderRemoveRole for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreHeaderRemoveRoleFormdataRequestBody = NestedRole

// ContentguardsCoreHeaderRemoveRoleMultipartRequestBody defines body for ContentguardsCoreHeaderRemoveRole for multipart/form-data ContentType.
type ContentguardsCoreHeaderRemoveRoleMultipartRequestBody = NestedRole

// ContentguardsCoreRbacCreateJSONRequestBody defines body for ContentguardsCoreRbacCreate for application/json ContentType.
type ContentguardsCoreRbacCreateJSONRequestBody = RBACContentGuard

// ContentguardsCoreRbacCreateFormdataRequestBody defines body for ContentguardsCoreRbacCreate for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreRbacCreateFormdataRequestBody = RBACContentGuard

// ContentguardsCoreRbacCreateMultipartRequestBody defines body for ContentguardsCoreRbacCreate for multipart/form-data ContentType.
type ContentguardsCoreRbacCreateMultipartRequestBody = RBACContentGuard

// ContentguardsCoreRbacPartialUpdateJSONRequestBody defines body for ContentguardsCoreRbacPartialUpdate for application/json ContentType.
type ContentguardsCoreRbacPartialUpdateJSONRequestBody = PatchedRBACContentGuard

// ContentguardsCoreRbacPartialUpdateFormdataRequestBody defines body for ContentguardsCoreRbacPartialUpdate for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreRbacPartialUpdateFormdataRequestBody = PatchedRBACContentGuard

// ContentguardsCoreRbacPartialUpdateMultipartRequestBody defines body for ContentguardsCoreRbacPartialUpdate for multipart/form-data ContentType.
type ContentguardsCoreRbacPartialUpdateMultipartRequestBody = PatchedRBACContentGuard

// ContentguardsCoreRbacUpdateJSONRequestBody defines body for ContentguardsCoreRbacUpdate for application/json ContentType.
type ContentguardsCoreRbacUpdateJSONRequestBody = RBACContentGuard

// ContentguardsCoreRbacUpdateFormdataRequestBody defines body for ContentguardsCoreRbacUpdate for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreRbacUpdateFormdataRequestBody = RBACContentGuard

// ContentguardsCoreRbacUpdateMultipartRequestBody defines body for ContentguardsCoreRbacUpdate for multipart/form-data ContentType.
type ContentguardsCoreRbacUpdateMultipartRequestBody = RBACContentGuard

// ContentguardsCoreRbacAddRoleJSONRequestBody defines body for ContentguardsCoreRbacAddRole for application/json ContentType.
type ContentguardsCoreRbacAddRoleJSONRequestBody = NestedRole

// ContentguardsCoreRbacAddRoleFormdataRequestBody defines body for ContentguardsCoreRbacAddRole for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreRbacAddRoleFormdataRequestBody = NestedRole

// ContentguardsCoreRbacAddRoleMultipartRequestBody defines body for ContentguardsCoreRbacAddRole for multipart/form-data ContentType.
type ContentguardsCoreRbacAddRoleMultipartRequestBody = NestedRole

// ContentguardsCoreRbacRemoveRoleJSONRequestBody defines body for ContentguardsCoreRbacRemoveRole for application/json ContentType.
type ContentguardsCoreRbacRemoveRoleJSONRequestBody = NestedRole

// ContentguardsCoreRbacRemoveRoleFormdataRequestBody defines body for ContentguardsCoreRbacRemoveRole for application/x-www-form-urlencoded ContentType.
type ContentguardsCoreRbacRemoveRoleFormdataRequestBody = NestedRole

// ContentguardsCoreRbacRemoveRoleMultipartRequestBody defines body for ContentguardsCoreRbacRemoveRole for multipart/form-data ContentType.
type ContentguardsCoreRbacRemoveRoleMultipartRequestBody = NestedRole

// DistributionsOstreeOstreeCreateJSONRequestBody defines body for DistributionsOstreeOstreeCreate for application/json ContentType.
type DistributionsOstreeOstreeCreateJSONRequestBody = OstreeOstreeDistribution

// DistributionsOstreeOstreeCreateFormdataRequestBody defines body for DistributionsOstreeOstreeCreate for application/x-www-form-urlencoded ContentType.
type DistributionsOstreeOstreeCreateFormdataRequestBody = OstreeOstreeDistribution

// DistributionsOstreeOstreeCreateMultipartRequestBody defines body for DistributionsOstreeOstreeCreate for multipart/form-data ContentType.
type DistributionsOstreeOstreeCreateMultipartRequestBody = OstreeOstreeDistribution

// DistributionsOstreeOstreePartialUpdateJSONRequestBody defines body for DistributionsOstreeOstreePartialUpdate for application/json ContentType.
type DistributionsOstreeOstreePartialUpdateJSONRequestBody = PatchedostreeOstreeDistribution

// DistributionsOstreeOstreePartialUpdateFormdataRequestBody defines body for DistributionsOstreeOstreePartialUpdate for application/x-www-form-urlencoded ContentType.
type DistributionsOstreeOstreePartialUpdateFormdataRequestBody = PatchedostreeOstreeDistribution

// DistributionsOstreeOstreePartialUpdateMultipartRequestBody defines body for DistributionsOstreeOstreePartialUpdate for multipart/form-data ContentType.
type DistributionsOstreeOstreePartialUpdateMultipartRequestBody = PatchedostreeOstreeDistribution

// DistributionsOstreeOstreeUpdateJSONRequestBody defines body for DistributionsOstreeOstreeUpdate for application/json ContentType.
type DistributionsOstreeOstreeUpdateJSONRequestBody = OstreeOstreeDistribution

// DistributionsOstreeOstreeUpdateFormdataRequestBody defines body for DistributionsOstreeOstreeUpdate for application/x-www-form-urlencoded ContentType.
type DistributionsOstreeOstreeUpdateFormdataRequestBody = OstreeOstreeDistribution

// DistributionsOstreeOstreeUpdateMultipartRequestBody defines body for DistributionsOstreeOstreeUpdate for multipart/form-data ContentType.
type DistributionsOstreeOstreeUpdateMultipartRequestBody = OstreeOstreeDistribution

// DistributionsOstreeOstreeAddRoleJSONRequestBody defines body for DistributionsOstreeOstreeAddRole for application/json ContentType.
type DistributionsOstreeOstreeAddRoleJSONRequestBody = NestedRole

// DistributionsOstreeOstreeAddRoleFormdataRequestBody defines body for DistributionsOstreeOstreeAddRole for application/x-www-form-urlencoded ContentType.
type DistributionsOstreeOstreeAddRoleFormdataRequestBody = NestedRole

// DistributionsOstreeOstreeAddRoleMultipartRequestBody defines body for DistributionsOstreeOstreeAddRole for multipart/form-data ContentType.
type DistributionsOstreeOstreeAddRoleMultipartRequestBody = NestedRole

// DistributionsOstreeOstreeRemoveRoleJSONRequestBody defines body for DistributionsOstreeOstreeRemoveRole for application/json ContentType.
type DistributionsOstreeOstreeRemoveRoleJSONRequestBody = NestedRole

// DistributionsOstreeOstreeRemoveRoleFormdataRequestBody defines body for DistributionsOstreeOstreeRemoveRole for application/x-www-form-urlencoded ContentType.
type DistributionsOstreeOstreeRemoveRoleFormdataRequestBody = NestedRole

// DistributionsOstreeOstreeRemoveRoleMultipartRequestBody defines body for DistributionsOstreeOstreeRemoveRole for multipart/form-data ContentType.
type DistributionsOstreeOstreeRemoveRoleMultipartRequestBody = NestedRole

// DistributionsOstreeOstreeSetLabelJSONRequestBody defines body for DistributionsOstreeOstreeSetLabel for application/json ContentType.
type DistributionsOstreeOstreeSetLabelJSONRequestBody = SetLabel

// DistributionsOstreeOstreeSetLabelFormdataRequestBody defines body for DistributionsOstreeOstreeSetLabel for application/x-www-form-urlencoded ContentType.
type DistributionsOstreeOstreeSetLabelFormdataRequestBody = SetLabel

// DistributionsOstreeOstreeSetLabelMultipartRequestBody defines body for DistributionsOstreeOstreeSetLabel for multipart/form-data ContentType.
type DistributionsOstreeOstreeSetLabelMultipartRequestBody = SetLabel

// DistributionsOstreeOstreeUnsetLabelJSONRequestBody defines body for DistributionsOstreeOstreeUnsetLabel for application/json ContentType.
type DistributionsOstreeOstreeUnsetLabelJSONRequestBody = UnsetLabel

// DistributionsOstreeOstreeUnsetLabelFormdataRequestBody defines body for DistributionsOstreeOstreeUnsetLabel for application/x-www-form-urlencoded ContentType.
type DistributionsOstreeOstreeUnsetLabelFormdataRequestBody = UnsetLabel

// DistributionsOstreeOstreeUnsetLabelMultipartRequestBody defines body for DistributionsOstreeOstreeUnsetLabel for multipart/form-data ContentType.
type DistributionsOstreeOstreeUnsetLabelMultipartRequestBody = UnsetLabel

// DomainsCreateJSONRequestBody defines body for DomainsCreate for application/json ContentType.
type DomainsCreateJSONRequestBody = Domain

// DomainsCreateFormdataRequestBody defines body for DomainsCreate for application/x-www-form-urlencoded ContentType.
type DomainsCreateFormdataRequestBody = Domain

// DomainsCreateMultipartRequestBody defines body for DomainsCreate for multipart/form-data ContentType.
type DomainsCreateMultipartRequestBody = Domain

// DomainsPartialUpdateJSONRequestBody defines body for DomainsPartialUpdate for application/json ContentType.
type DomainsPartialUpdateJSONRequestBody = PatchedDomain

// DomainsPartialUpdateFormdataRequestBody defines body for DomainsPartialUpdate for application/x-www-form-urlencoded ContentType.
type DomainsPartialUpdateFormdataRequestBody = PatchedDomain

// DomainsPartialUpdateMultipartRequestBody defines body for DomainsPartialUpdate for multipart/form-data ContentType.
type DomainsPartialUpdateMultipartRequestBody = PatchedDomain

// DomainsUpdateJSONRequestBody defines body for DomainsUpdate for application/json ContentType.
type DomainsUpdateJSONRequestBody = Domain

// DomainsUpdateFormdataRequestBody defines body for DomainsUpdate for application/x-www-form-urlencoded ContentType.
type DomainsUpdateFormdataRequestBody = Domain

// DomainsUpdateMultipartRequestBody defines body for DomainsUpdate for multipart/form-data ContentType.
type DomainsUpdateMultipartRequestBody = Domain

// RepositoriesFileFileCreateJSONRequestBody defines body for RepositoriesFileFileCreate for application/json ContentType.
type RepositoriesFileFileCreateJSONRequestBody = FileFileRepository

// RepositoriesFileFileCreateFormdataRequestBody defines body for RepositoriesFileFileCreate for application/x-www-form-urlencoded ContentType.
type RepositoriesFileFileCreateFormdataRequestBody = FileFileRepository

// RepositoriesFileFileCreateMultipartRequestBody defines body for RepositoriesFileFileCreate for multipart/form-data ContentType.
type RepositoriesFileFileCreateMultipartRequestBody = FileFileRepository

// RepositoriesFileFilePartialUpdateJSONRequestBody defines body for RepositoriesFileFilePartialUpdate for application/json ContentType.
type RepositoriesFileFilePartialUpdateJSONRequestBody = PatchedfileFileRepository

// RepositoriesFileFilePartialUpdateFormdataRequestBody defines body for RepositoriesFileFilePartialUpdate for application/x-www-form-urlencoded ContentType.
type RepositoriesFileFilePartialUpdateFormdataRequestBody = PatchedfileFileRepository

// RepositoriesFileFilePartialUpdateMultipartRequestBody defines body for RepositoriesFileFilePartialUpdate for multipart/form-data ContentType.
type RepositoriesFileFilePartialUpdateMultipartRequestBody = PatchedfileFileRepository

// RepositoriesFileFileUpdateJSONRequestBody defines body for RepositoriesFileFileUpdate for application/json ContentType.
type RepositoriesFileFileUpdateJSONRequestBody = FileFileRepository

// RepositoriesFileFileUpdateFormdataRequestBody defines body for RepositoriesFileFileUpdate for application/x-www-form-urlencoded ContentType.
type RepositoriesFileFileUpdateFormdataRequestBody = FileFileRepository

// RepositoriesFileFileUpdateMultipartRequestBody defines body for RepositoriesFileFileUpdate for multipart/form-data ContentType.
type RepositoriesFileFileUpdateMultipartRequestBody = FileFileRepository

// RepositoriesFileFileAddRoleJSONRequestBody defines body for RepositoriesFileFileAddRole for application/json ContentType.
type RepositoriesFileFileAddRoleJSONRequestBody = NestedRole

// RepositoriesFileFileAddRoleFormdataRequestBody defines body for RepositoriesFileFileAddRole for application/x-www-form-urlencoded ContentType.
type RepositoriesFileFileAddRoleFormdataRequestBody = NestedRole

// RepositoriesFileFileAddRoleMultipartRequestBody defines body for RepositoriesFileFileAddRole for multipart/form-data ContentType.
type RepositoriesFileFileAddRoleMultipartRequestBody = NestedRole

// RepositoriesFileFileModifyJSONRequestBody defines body for RepositoriesFileFileModify for application/json ContentType.
type RepositoriesFileFileModifyJSONRequestBody = RepositoryAddRemoveContent

// RepositoriesFileFileModifyFormdataRequestBody defines body for RepositoriesFileFileModify for application/x-www-form-urlencoded ContentType.
type RepositoriesFileFileModifyFormdataRequestBody = RepositoryAddRemoveContent

// RepositoriesFileFileModifyMultipartRequestBody defines body for RepositoriesFileFileModify for multipart/form-data ContentType.
type RepositoriesFileFileModifyMultipartRequestBody = RepositoryAddRemoveContent

// RepositoriesFileFileRemoveRoleJSONRequestBody defines body for RepositoriesFileFileRemoveRole for application/json ContentType.
type RepositoriesFileFileRemoveRoleJSONRequestBody = NestedRole

// RepositoriesFileFileRemoveRoleFormdataRequestBody defines body for RepositoriesFileFileRemoveRole for application/x-www-form-urlencoded ContentType.
type RepositoriesFileFileRemoveRoleFormdataRequestBody = NestedRole

// RepositoriesFileFileRemoveRoleMultipartRequestBody defines body for RepositoriesFileFileRemoveRole for multipart/form-data ContentType.
type RepositoriesFileFileRemoveRoleMultipartRequestBody = NestedRole

// RepositoriesFileFileSetLabelJSONRequestBody defines body for RepositoriesFileFileSetLabel for application/json ContentType.
type RepositoriesFileFileSetLabelJSONRequestBody = SetLabel

// RepositoriesFileFileSetLabelFormdataRequestBody defines body for RepositoriesFileFileSetLabel for application/x-www-form-urlencoded ContentType.
type RepositoriesFileFileSetLabelFormdataRequestBody = SetLabel

// RepositoriesFileFileSetLabelMultipartRequestBody defines body for RepositoriesFileFileSetLabel for multipart/form-data ContentType.
type RepositoriesFileFileSetLabelMultipartRequestBody = SetLabel

// RepositoriesFileFileSyncJSONRequestBody defines body for RepositoriesFileFileSync for application/json ContentType.
type RepositoriesFileFileSyncJSONRequestBody = RepositorySyncURL

// RepositoriesFileFileSyncFormdataRequestBody defines body for RepositoriesFileFileSync for application/x-www-form-urlencoded ContentType.
type RepositoriesFileFileSyncFormdataRequestBody = RepositorySyncURL

// RepositoriesFileFileSyncMultipartRequestBody defines body for RepositoriesFileFileSync for multipart/form-data ContentType.
type RepositoriesFileFileSyncMultipartRequestBody = RepositorySyncURL

// RepositoriesFileFileUnsetLabelJSONRequestBody defines body for RepositoriesFileFileUnsetLabel for application/json ContentType.
type RepositoriesFileFileUnsetLabelJSONRequestBody = UnsetLabel

// RepositoriesFileFileUnsetLabelFormdataRequestBody defines body for RepositoriesFileFileUnsetLabel for application/x-www-form-urlencoded ContentType.
type RepositoriesFileFileUnsetLabelFormdataRequestBody = UnsetLabel

// RepositoriesFileFileUnsetLabelMultipartRequestBody defines body for RepositoriesFileFileUnsetLabel for multipart/form-data ContentType.
type RepositoriesFileFileUnsetLabelMultipartRequestBody = UnsetLabel

// RepositoriesFileFileVersionsRepairJSONRequestBody defines body for RepositoriesFileFileVersionsRepair for application/json ContentType.
type RepositoriesFileFileVersionsRepairJSONRequestBody = Repair

// RepositoriesFileFileVersionsRepairFormdataRequestBody defines body for RepositoriesFileFileVersionsRepair for application/x-www-form-urlencoded ContentType.
type RepositoriesFileFileVersionsRepairFormdataRequestBody = Repair

// RepositoriesFileFileVersionsRepairMultipartRequestBody defines body for RepositoriesFileFileVersionsRepair for multipart/form-data ContentType.
type RepositoriesFileFileVersionsRepairMultipartRequestBody = Repair

// RepositoriesOstreeOstreeCreateJSONRequestBody defines body for RepositoriesOstreeOstreeCreate for application/json ContentType.
type RepositoriesOstreeOstreeCreateJSONRequestBody = OstreeOstreeRepository

// RepositoriesOstreeOstreeCreateFormdataRequestBody defines body for RepositoriesOstreeOstreeCreate for application/x-www-form-urlencoded ContentType.
type RepositoriesOstreeOstreeCreateFormdataRequestBody = OstreeOstreeRepository

// RepositoriesOstreeOstreeCreateMultipartRequestBody defines body for RepositoriesOstreeOstreeCreate for multipart/form-data ContentType.
type RepositoriesOstreeOstreeCreateMultipartRequestBody = OstreeOstreeRepository

// RepositoriesOstreeOstreePartialUpdateJSONRequestBody defines body for RepositoriesOstreeOstreePartialUpdate for application/json ContentType.
type RepositoriesOstreeOstreePartialUpdateJSONRequestBody = PatchedostreeOstreeRepository

// RepositoriesOstreeOstreePartialUpdateFormdataRequestBody defines body for RepositoriesOstreeOstreePartialUpdate for application/x-www-form-urlencoded ContentType.
type RepositoriesOstreeOstreePartialUpdateFormdataRequestBody = PatchedostreeOstreeRepository

// RepositoriesOstreeOstreePartialUpdateMultipartRequestBody defines body for RepositoriesOstreeOstreePartialUpdate for multipart/form-data ContentType.
type RepositoriesOstreeOstreePartialUpdateMultipartRequestBody = PatchedostreeOstreeRepository

// RepositoriesOstreeOstreeUpdateJSONRequestBody defines body for RepositoriesOstreeOstreeUpdate for application/json ContentType.
type RepositoriesOstreeOstreeUpdateJSONRequestBody = OstreeOstreeRepository

// RepositoriesOstreeOstreeUpdateFormdataRequestBody defines body for RepositoriesOstreeOstreeUpdate for application/x-www-form-urlencoded ContentType.
type RepositoriesOstreeOstreeUpdateFormdataRequestBody = OstreeOstreeRepository

// RepositoriesOstreeOstreeUpdateMultipartRequestBody defines body for RepositoriesOstreeOstreeUpdate for multipart/form-data ContentType.
type RepositoriesOstreeOstreeUpdateMultipartRequestBody = OstreeOstreeRepository

// RepositoriesOstreeOstreeAddRoleJSONRequestBody defines body for RepositoriesOstreeOstreeAddRole for application/json ContentType.
type RepositoriesOstreeOstreeAddRoleJSONRequestBody = NestedRole

// RepositoriesOstreeOstreeAddRoleFormdataRequestBody defines body for RepositoriesOstreeOstreeAddRole for application/x-www-form-urlencoded ContentType.
type RepositoriesOstreeOstreeAddRoleFormdataRequestBody = NestedRole

// RepositoriesOstreeOstreeAddRoleMultipartRequestBody defines body for RepositoriesOstreeOstreeAddRole for multipart/form-data ContentType.
type RepositoriesOstreeOstreeAddRoleMultipartRequestBody = NestedRole

// RepositoriesOstreeOstreeImportAllJSONRequestBody defines body for RepositoriesOstreeOstreeImportAll for application/json ContentType.
type RepositoriesOstreeOstreeImportAllJSONRequestBody = OstreeImportAll

// RepositoriesOstreeOstreeImportAllFormdataRequestBody defines body for RepositoriesOstreeOstreeImportAll for application/x-www-form-urlencoded ContentType.
type RepositoriesOstreeOstreeImportAllFormdataRequestBody = OstreeImportAll

// RepositoriesOstreeOstreeImportAllMultipartRequestBody defines body for RepositoriesOstreeOstreeImportAll for multipart/form-data ContentType.
type RepositoriesOstreeOstreeImportAllMultipartRequestBody = OstreeImportAll

// RepositoriesOstreeOstreeImportCommitsJSONRequestBody defines body for RepositoriesOstreeOstreeImportCommits for application/json ContentType.
type RepositoriesOstreeOstreeImportCommitsJSONRequestBody = OstreeImportCommitsToRef

// RepositoriesOstreeOstreeImportCommitsFormdataRequestBody defines body for RepositoriesOstreeOstreeImportCommits for application/x-www-form-urlencoded ContentType.
type RepositoriesOstreeOstreeImportCommitsFormdataRequestBody = OstreeImportCommitsToRef

// RepositoriesOstreeOstreeImportCommitsMultipartRequestBody defines body for RepositoriesOstreeOstreeImportCommits for multipart/form-data ContentType.
type RepositoriesOstreeOstreeImportCommitsMultipartRequestBody = OstreeImportCommitsToRef

// RepositoriesOstreeOstreeModifyJSONRequestBody defines body for RepositoriesOstreeOstreeModify for application/json ContentType.
type RepositoriesOstreeOstreeModifyJSONRequestBody = RepositoryAddRemoveContent

// RepositoriesOstreeOstreeModifyFormdataRequestBody defines body for RepositoriesOstreeOstreeModify for application/x-www-form-urlencoded ContentType.
type RepositoriesOstreeOstreeModifyFormdataRequestBody = RepositoryAddRemoveContent

// RepositoriesOstreeOstreeModifyMultipartRequestBody defines body for RepositoriesOstreeOstreeModify for multipart/form-data ContentType.
type RepositoriesOstreeOstreeModifyMultipartRequestBody = RepositoryAddRemoveContent

// RepositoriesOstreeOstreeRemoveRoleJSONRequestBody defines body for RepositoriesOstreeOstreeRemoveRole for application/json ContentType.
type RepositoriesOstreeOstreeRemoveRoleJSONRequestBody = NestedRole

// RepositoriesOstreeOstreeRemoveRoleFormdataRequestBody defines body for RepositoriesOstreeOstreeRemoveRole for application/x-www-form-urlencoded ContentType.
type RepositoriesOstreeOstreeRemoveRoleFormdataRequestBody = NestedRole

// RepositoriesOstreeOstreeRemoveRoleMultipartRequestBody defines body for RepositoriesOstreeOstreeRemoveRole for multipart/form-data ContentType.
type RepositoriesOstreeOstreeRemoveRoleMultipartRequestBody = NestedRole

// RepositoriesOstreeOstreeSetLabelJSONRequestBody defines body for RepositoriesOstreeOstreeSetLabel for application/json ContentType.
type RepositoriesOstreeOstreeSetLabelJSONRequestBody = SetLabel

// RepositoriesOstreeOstreeSetLabelFormdataRequestBody defines body for RepositoriesOstreeOstreeSetLabel for application/x-www-form-urlencoded ContentType.
type RepositoriesOstreeOstreeSetLabelFormdataRequestBody = SetLabel

// RepositoriesOstreeOstreeSetLabelMultipartRequestBody defines body for RepositoriesOstreeOstreeSetLabel for multipart/form-data ContentType.
type RepositoriesOstreeOstreeSetLabelMultipartRequestBody = SetLabel

// RepositoriesOstreeOstreeSyncJSONRequestBody defines body for RepositoriesOstreeOstreeSync for application/json ContentType.
type RepositoriesOstreeOstreeSyncJSONRequestBody = RepositorySyncURL

// RepositoriesOstreeOstreeSyncFormdataRequestBody defines body for RepositoriesOstreeOstreeSync for application/x-www-form-urlencoded ContentType.
type RepositoriesOstreeOstreeSyncFormdataRequestBody = RepositorySyncURL

// RepositoriesOstreeOstreeSyncMultipartRequestBody defines body for RepositoriesOstreeOstreeSync for multipart/form-data ContentType.
type RepositoriesOstreeOstreeSyncMultipartRequestBody = RepositorySyncURL

// RepositoriesOstreeOstreeUnsetLabelJSONRequestBody defines body for RepositoriesOstreeOstreeUnsetLabel for application/json ContentType.
type RepositoriesOstreeOstreeUnsetLabelJSONRequestBody = UnsetLabel

// RepositoriesOstreeOstreeUnsetLabelFormdataRequestBody defines body for RepositoriesOstreeOstreeUnsetLabel for application/x-www-form-urlencoded ContentType.
type RepositoriesOstreeOstreeUnsetLabelFormdataRequestBody = UnsetLabel

// RepositoriesOstreeOstreeUnsetLabelMultipartRequestBody defines body for RepositoriesOstreeOstreeUnsetLabel for multipart/form-data ContentType.
type RepositoriesOstreeOstreeUnsetLabelMultipartRequestBody = UnsetLabel

// TasksPurgeJSONRequestBody defines body for TasksPurge for application/json ContentType.
type TasksPurgeJSONRequestBody = Purge

// TasksPurgeFormdataRequestBody defines body for TasksPurge for application/x-www-form-urlencoded ContentType.
type TasksPurgeFormdataRequestBody = Purge

// TasksPurgeMultipartRequestBody defines body for TasksPurge for multipart/form-data ContentType.
type TasksPurgeMultipartRequestBody = Purge

// TasksCancelJSONRequestBody defines body for TasksCancel for application/json ContentType.
type TasksCancelJSONRequestBody = PatchedTaskCancel

// TasksCancelFormdataRequestBody defines body for TasksCancel for application/x-www-form-urlencoded ContentType.
type TasksCancelFormdataRequestBody = PatchedTaskCancel

// TasksCancelMultipartRequestBody defines body for TasksCancel for multipart/form-data ContentType.
type TasksCancelMultipartRequestBody = PatchedTaskCancel

// TasksAddRoleJSONRequestBody defines body for TasksAddRole for application/json ContentType.
type TasksAddRoleJSONRequestBody = NestedRole

// TasksAddRoleFormdataRequestBody defines body for TasksAddRole for application/x-www-form-urlencoded ContentType.
type TasksAddRoleFormdataRequestBody = NestedRole

// TasksAddRoleMultipartRequestBody defines body for TasksAddRole for multipart/form-data ContentType.
type TasksAddRoleMultipartRequestBody = NestedRole

// TasksRemoveRoleJSONRequestBody defines body for TasksRemoveRole for application/json ContentType.
type TasksRemoveRoleJSONRequestBody = NestedRole

// TasksRemoveRoleFormdataRequestBody defines body for TasksRemoveRole for application/x-www-form-urlencoded ContentType.
type TasksRemoveRoleFormdataRequestBody = NestedRole

// TasksRemoveRoleMultipartRequestBody defines body for TasksRemoveRole for multipart/form-data ContentType.
type TasksRemoveRoleMultipartRequestBody = NestedRole

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ArtifactsList request
	ArtifactsList(ctx context.Context, pulpDomain string, params *ArtifactsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArtifactsCreateWithBody request with any body
	ArtifactsCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ArtifactsCreateWithFormdataBody(ctx context.Context, pulpDomain string, body ArtifactsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArtifactsDelete request
	ArtifactsDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArtifactsRead request
	ArtifactsRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ArtifactsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentFileFilesList request
	ContentFileFilesList(ctx context.Context, pulpDomain string, params *ContentFileFilesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentFileFilesCreateWithBody request with any body
	ContentFileFilesCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentFileFilesCreateWithFormdataBody(ctx context.Context, pulpDomain string, body ContentFileFilesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentFileFilesRead request
	ContentFileFilesRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentFileFilesReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentOstreeContentList request
	ContentOstreeContentList(ctx context.Context, pulpDomain string, params *ContentOstreeContentListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentOstreeContentCreateWithBody request with any body
	ContentOstreeContentCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentOstreeContentCreate(ctx context.Context, pulpDomain string, body ContentOstreeContentCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentOstreeContentCreateWithFormdataBody(ctx context.Context, pulpDomain string, body ContentOstreeContentCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentOstreeContentRead request
	ContentOstreeContentRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentOstreeContentReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreCompositeList request
	ContentguardsCoreCompositeList(ctx context.Context, pulpDomain string, params *ContentguardsCoreCompositeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreCompositeCreateWithBody request with any body
	ContentguardsCoreCompositeCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreCompositeCreate(ctx context.Context, pulpDomain string, body ContentguardsCoreCompositeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreCompositeCreateWithFormdataBody(ctx context.Context, pulpDomain string, body ContentguardsCoreCompositeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreCompositeDelete request
	ContentguardsCoreCompositeDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreCompositeRead request
	ContentguardsCoreCompositeRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreCompositePartialUpdateWithBody request with any body
	ContentguardsCoreCompositePartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreCompositePartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreCompositePartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreCompositeUpdateWithBody request with any body
	ContentguardsCoreCompositeUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreCompositeUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreCompositeUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreCompositeAddRoleWithBody request with any body
	ContentguardsCoreCompositeAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreCompositeAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreCompositeAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreCompositeListRoles request
	ContentguardsCoreCompositeListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreCompositeMyPermissions request
	ContentguardsCoreCompositeMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreCompositeRemoveRoleWithBody request with any body
	ContentguardsCoreCompositeRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreCompositeRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreCompositeRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreHeaderList request
	ContentguardsCoreHeaderList(ctx context.Context, pulpDomain string, params *ContentguardsCoreHeaderListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreHeaderCreateWithBody request with any body
	ContentguardsCoreHeaderCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreHeaderCreate(ctx context.Context, pulpDomain string, body ContentguardsCoreHeaderCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreHeaderCreateWithFormdataBody(ctx context.Context, pulpDomain string, body ContentguardsCoreHeaderCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreHeaderDelete request
	ContentguardsCoreHeaderDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreHeaderRead request
	ContentguardsCoreHeaderRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreHeaderPartialUpdateWithBody request with any body
	ContentguardsCoreHeaderPartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreHeaderPartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreHeaderPartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreHeaderUpdateWithBody request with any body
	ContentguardsCoreHeaderUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreHeaderUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreHeaderUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreHeaderAddRoleWithBody request with any body
	ContentguardsCoreHeaderAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreHeaderAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreHeaderAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreHeaderListRoles request
	ContentguardsCoreHeaderListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreHeaderMyPermissions request
	ContentguardsCoreHeaderMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreHeaderRemoveRoleWithBody request with any body
	ContentguardsCoreHeaderRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreHeaderRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreHeaderRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreRbacList request
	ContentguardsCoreRbacList(ctx context.Context, pulpDomain string, params *ContentguardsCoreRbacListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreRbacCreateWithBody request with any body
	ContentguardsCoreRbacCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreRbacCreate(ctx context.Context, pulpDomain string, body ContentguardsCoreRbacCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreRbacCreateWithFormdataBody(ctx context.Context, pulpDomain string, body ContentguardsCoreRbacCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreRbacDelete request
	ContentguardsCoreRbacDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreRbacRead request
	ContentguardsCoreRbacRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreRbacPartialUpdateWithBody request with any body
	ContentguardsCoreRbacPartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreRbacPartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreRbacPartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreRbacUpdateWithBody request with any body
	ContentguardsCoreRbacUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreRbacUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreRbacUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreRbacAddRoleWithBody request with any body
	ContentguardsCoreRbacAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreRbacAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreRbacAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreRbacListRoles request
	ContentguardsCoreRbacListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreRbacMyPermissions request
	ContentguardsCoreRbacMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentguardsCoreRbacRemoveRoleWithBody request with any body
	ContentguardsCoreRbacRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreRbacRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentguardsCoreRbacRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DistributionsOstreeOstreeList request
	DistributionsOstreeOstreeList(ctx context.Context, pulpDomain string, params *DistributionsOstreeOstreeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DistributionsOstreeOstreeCreateWithBody request with any body
	DistributionsOstreeOstreeCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreeCreate(ctx context.Context, pulpDomain string, body DistributionsOstreeOstreeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreeCreateWithFormdataBody(ctx context.Context, pulpDomain string, body DistributionsOstreeOstreeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DistributionsOstreeOstreeDelete request
	DistributionsOstreeOstreeDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DistributionsOstreeOstreeRead request
	DistributionsOstreeOstreeRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DistributionsOstreeOstreePartialUpdateWithBody request with any body
	DistributionsOstreeOstreePartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreePartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreePartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DistributionsOstreeOstreeUpdateWithBody request with any body
	DistributionsOstreeOstreeUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreeUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreeUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DistributionsOstreeOstreeAddRoleWithBody request with any body
	DistributionsOstreeOstreeAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreeAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreeAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DistributionsOstreeOstreeListRoles request
	DistributionsOstreeOstreeListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DistributionsOstreeOstreeMyPermissions request
	DistributionsOstreeOstreeMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DistributionsOstreeOstreeRemoveRoleWithBody request with any body
	DistributionsOstreeOstreeRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreeRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreeRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DistributionsOstreeOstreeSetLabelWithBody request with any body
	DistributionsOstreeOstreeSetLabelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreeSetLabel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeSetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreeSetLabelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeSetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DistributionsOstreeOstreeUnsetLabelWithBody request with any body
	DistributionsOstreeOstreeUnsetLabelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreeUnsetLabel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUnsetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DistributionsOstreeOstreeUnsetLabelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUnsetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsList request
	DomainsList(ctx context.Context, pulpDomain string, params *DomainsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsCreateWithBody request with any body
	DomainsCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsCreate(ctx context.Context, pulpDomain string, body DomainsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsCreateWithFormdataBody(ctx context.Context, pulpDomain string, body DomainsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsDelete request
	DomainsDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsRead request
	DomainsRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DomainsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsPartialUpdateWithBody request with any body
	DomainsPartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsPartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsPartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsUpdateWithBody request with any body
	DomainsUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileList request
	RepositoriesFileFileList(ctx context.Context, pulpDomain string, params *RepositoriesFileFileListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileCreateWithBody request with any body
	RepositoriesFileFileCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileCreate(ctx context.Context, pulpDomain string, body RepositoriesFileFileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileCreateWithFormdataBody(ctx context.Context, pulpDomain string, body RepositoriesFileFileCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileDelete request
	RepositoriesFileFileDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileRead request
	RepositoriesFileFileRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFilePartialUpdateWithBody request with any body
	RepositoriesFileFilePartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFilePartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFilePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFilePartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFilePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileUpdateWithBody request with any body
	RepositoriesFileFileUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileAddRoleWithBody request with any body
	RepositoriesFileFileAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileListRoles request
	RepositoriesFileFileListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileModifyWithBody request with any body
	RepositoriesFileFileModifyWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileModify(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileModifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileModifyWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileModifyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileMyPermissions request
	RepositoriesFileFileMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileRemoveRoleWithBody request with any body
	RepositoriesFileFileRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileSetLabelWithBody request with any body
	RepositoriesFileFileSetLabelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileSetLabel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileSetLabelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileSyncWithBody request with any body
	RepositoriesFileFileSyncWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileSync(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileSyncWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSyncFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileUnsetLabelWithBody request with any body
	RepositoriesFileFileUnsetLabelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileUnsetLabel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUnsetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileUnsetLabelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUnsetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileVersionsList request
	RepositoriesFileFileVersionsList(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, params *RepositoriesFileFileVersionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileVersionsDelete request
	RepositoriesFileFileVersionsDelete(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileVersionsRead request
	RepositoriesFileFileVersionsRead(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, params *RepositoriesFileFileVersionsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesFileFileVersionsRepairWithBody request with any body
	RepositoriesFileFileVersionsRepairWithBody(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileVersionsRepair(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, body RepositoriesFileFileVersionsRepairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesFileFileVersionsRepairWithFormdataBody(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, body RepositoriesFileFileVersionsRepairFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeList request
	RepositoriesOstreeOstreeList(ctx context.Context, pulpDomain string, params *RepositoriesOstreeOstreeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeCreateWithBody request with any body
	RepositoriesOstreeOstreeCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeCreate(ctx context.Context, pulpDomain string, body RepositoriesOstreeOstreeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeCreateWithFormdataBody(ctx context.Context, pulpDomain string, body RepositoriesOstreeOstreeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeDelete request
	RepositoriesOstreeOstreeDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeRead request
	RepositoriesOstreeOstreeRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreePartialUpdateWithBody request with any body
	RepositoriesOstreeOstreePartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreePartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreePartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeUpdateWithBody request with any body
	RepositoriesOstreeOstreeUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeAddRoleWithBody request with any body
	RepositoriesOstreeOstreeAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeImportAllWithBody request with any body
	RepositoriesOstreeOstreeImportAllWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeImportAll(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeImportAllWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportAllFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeImportCommitsWithBody request with any body
	RepositoriesOstreeOstreeImportCommitsWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeImportCommits(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportCommitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeImportCommitsWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportCommitsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeListRoles request
	RepositoriesOstreeOstreeListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeModifyWithBody request with any body
	RepositoriesOstreeOstreeModifyWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeModify(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeModifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeModifyWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeModifyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeMyPermissions request
	RepositoriesOstreeOstreeMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeRemoveRoleWithBody request with any body
	RepositoriesOstreeOstreeRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeSetLabelWithBody request with any body
	RepositoriesOstreeOstreeSetLabelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeSetLabel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeSetLabelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeSyncWithBody request with any body
	RepositoriesOstreeOstreeSyncWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeSync(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeSyncWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSyncFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepositoriesOstreeOstreeUnsetLabelWithBody request with any body
	RepositoriesOstreeOstreeUnsetLabelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeUnsetLabel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUnsetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RepositoriesOstreeOstreeUnsetLabelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUnsetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TasksList request
	TasksList(ctx context.Context, pulpDomain string, params *TasksListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TasksPurgeWithBody request with any body
	TasksPurgeWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TasksPurge(ctx context.Context, pulpDomain string, body TasksPurgeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TasksPurgeWithFormdataBody(ctx context.Context, pulpDomain string, body TasksPurgeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TasksDelete request
	TasksDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TasksRead request
	TasksRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *TasksReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TasksCancelWithBody request with any body
	TasksCancelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TasksCancel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TasksCancelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksCancelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TasksAddRoleWithBody request with any body
	TasksAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TasksAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TasksAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TasksListRoles request
	TasksListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *TasksListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TasksMyPermissions request
	TasksMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *TasksMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TasksRemoveRoleWithBody request with any body
	TasksRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TasksRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TasksRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ArtifactsList(ctx context.Context, pulpDomain string, params *ArtifactsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArtifactsListRequest(c.Server, pulpDomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArtifactsCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArtifactsCreateRequestWithBody(c.Server, pulpDomain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArtifactsCreateWithFormdataBody(ctx context.Context, pulpDomain string, body ArtifactsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArtifactsCreateRequestWithFormdataBody(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArtifactsDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArtifactsDeleteRequest(c.Server, pulpDomain, pulpId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArtifactsRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ArtifactsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArtifactsReadRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentFileFilesList(ctx context.Context, pulpDomain string, params *ContentFileFilesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentFileFilesListRequest(c.Server, pulpDomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentFileFilesCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentFileFilesCreateRequestWithBody(c.Server, pulpDomain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentFileFilesCreateWithFormdataBody(ctx context.Context, pulpDomain string, body ContentFileFilesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentFileFilesCreateRequestWithFormdataBody(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentFileFilesRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentFileFilesReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentFileFilesReadRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentOstreeContentList(ctx context.Context, pulpDomain string, params *ContentOstreeContentListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentOstreeContentListRequest(c.Server, pulpDomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentOstreeContentCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentOstreeContentCreateRequestWithBody(c.Server, pulpDomain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentOstreeContentCreate(ctx context.Context, pulpDomain string, body ContentOstreeContentCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentOstreeContentCreateRequest(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentOstreeContentCreateWithFormdataBody(ctx context.Context, pulpDomain string, body ContentOstreeContentCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentOstreeContentCreateRequestWithFormdataBody(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentOstreeContentRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentOstreeContentReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentOstreeContentReadRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeList(ctx context.Context, pulpDomain string, params *ContentguardsCoreCompositeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeListRequest(c.Server, pulpDomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeCreateRequestWithBody(c.Server, pulpDomain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeCreate(ctx context.Context, pulpDomain string, body ContentguardsCoreCompositeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeCreateRequest(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeCreateWithFormdataBody(ctx context.Context, pulpDomain string, body ContentguardsCoreCompositeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeCreateRequestWithFormdataBody(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeDeleteRequest(c.Server, pulpDomain, pulpId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeReadRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositePartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositePartialUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositePartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositePartialUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositePartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositePartialUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeAddRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeAddRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeAddRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeListRolesRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeMyPermissionsRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeRemoveRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeRemoveRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreCompositeRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreCompositeRemoveRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderList(ctx context.Context, pulpDomain string, params *ContentguardsCoreHeaderListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderListRequest(c.Server, pulpDomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderCreateRequestWithBody(c.Server, pulpDomain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderCreate(ctx context.Context, pulpDomain string, body ContentguardsCoreHeaderCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderCreateRequest(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderCreateWithFormdataBody(ctx context.Context, pulpDomain string, body ContentguardsCoreHeaderCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderCreateRequestWithFormdataBody(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderDeleteRequest(c.Server, pulpDomain, pulpId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderReadRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderPartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderPartialUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderPartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderPartialUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderPartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderPartialUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderAddRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderAddRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderAddRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderListRolesRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderMyPermissionsRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderRemoveRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderRemoveRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreHeaderRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreHeaderRemoveRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacList(ctx context.Context, pulpDomain string, params *ContentguardsCoreRbacListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacListRequest(c.Server, pulpDomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacCreateRequestWithBody(c.Server, pulpDomain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacCreate(ctx context.Context, pulpDomain string, body ContentguardsCoreRbacCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacCreateRequest(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacCreateWithFormdataBody(ctx context.Context, pulpDomain string, body ContentguardsCoreRbacCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacCreateRequestWithFormdataBody(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacDeleteRequest(c.Server, pulpDomain, pulpId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacReadRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacPartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacPartialUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacPartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacPartialUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacPartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacPartialUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacAddRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacAddRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacAddRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacListRolesRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacMyPermissionsRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacRemoveRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacRemoveRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentguardsCoreRbacRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentguardsCoreRbacRemoveRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeList(ctx context.Context, pulpDomain string, params *DistributionsOstreeOstreeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeListRequest(c.Server, pulpDomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeCreateRequestWithBody(c.Server, pulpDomain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeCreate(ctx context.Context, pulpDomain string, body DistributionsOstreeOstreeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeCreateRequest(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeCreateWithFormdataBody(ctx context.Context, pulpDomain string, body DistributionsOstreeOstreeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeCreateRequestWithFormdataBody(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeDeleteRequest(c.Server, pulpDomain, pulpId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeReadRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreePartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreePartialUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreePartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreePartialUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreePartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreePartialUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeAddRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeAddRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeAddRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeListRolesRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeMyPermissionsRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeRemoveRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeRemoveRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeRemoveRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeSetLabelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeSetLabelRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeSetLabel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeSetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeSetLabelRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeSetLabelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeSetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeSetLabelRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeUnsetLabelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeUnsetLabelRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeUnsetLabel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUnsetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeUnsetLabelRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DistributionsOstreeOstreeUnsetLabelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUnsetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDistributionsOstreeOstreeUnsetLabelRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsList(ctx context.Context, pulpDomain string, params *DomainsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsListRequest(c.Server, pulpDomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsCreateRequestWithBody(c.Server, pulpDomain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsCreate(ctx context.Context, pulpDomain string, body DomainsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsCreateRequest(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsCreateWithFormdataBody(ctx context.Context, pulpDomain string, body DomainsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsCreateRequestWithFormdataBody(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsDeleteRequest(c.Server, pulpDomain, pulpId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DomainsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsReadRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsPartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsPartialUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsPartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsPartialUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsPartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsPartialUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileList(ctx context.Context, pulpDomain string, params *RepositoriesFileFileListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileListRequest(c.Server, pulpDomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileCreateRequestWithBody(c.Server, pulpDomain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileCreate(ctx context.Context, pulpDomain string, body RepositoriesFileFileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileCreateRequest(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileCreateWithFormdataBody(ctx context.Context, pulpDomain string, body RepositoriesFileFileCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileCreateRequestWithFormdataBody(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileDeleteRequest(c.Server, pulpDomain, pulpId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileReadRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFilePartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFilePartialUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFilePartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFilePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFilePartialUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFilePartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFilePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFilePartialUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileAddRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileAddRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileAddRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileListRolesRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileModifyWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileModifyRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileModify(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileModifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileModifyRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileModifyWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileModifyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileModifyRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileMyPermissionsRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileRemoveRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileRemoveRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileRemoveRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileSetLabelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileSetLabelRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileSetLabel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileSetLabelRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileSetLabelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileSetLabelRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileSyncWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileSyncRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileSync(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileSyncRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileSyncWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSyncFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileSyncRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileUnsetLabelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileUnsetLabelRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileUnsetLabel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUnsetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileUnsetLabelRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileUnsetLabelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUnsetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileUnsetLabelRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileVersionsList(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, params *RepositoriesFileFileVersionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileVersionsListRequest(c.Server, pulpDomain, repositoryPk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileVersionsDelete(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileVersionsDeleteRequest(c.Server, pulpDomain, repositoryPk, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileVersionsRead(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, params *RepositoriesFileFileVersionsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileVersionsReadRequest(c.Server, pulpDomain, repositoryPk, number, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileVersionsRepairWithBody(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileVersionsRepairRequestWithBody(c.Server, pulpDomain, repositoryPk, number, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileVersionsRepair(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, body RepositoriesFileFileVersionsRepairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileVersionsRepairRequest(c.Server, pulpDomain, repositoryPk, number, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesFileFileVersionsRepairWithFormdataBody(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, body RepositoriesFileFileVersionsRepairFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesFileFileVersionsRepairRequestWithFormdataBody(c.Server, pulpDomain, repositoryPk, number, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeList(ctx context.Context, pulpDomain string, params *RepositoriesOstreeOstreeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeListRequest(c.Server, pulpDomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeCreateWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeCreateRequestWithBody(c.Server, pulpDomain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeCreate(ctx context.Context, pulpDomain string, body RepositoriesOstreeOstreeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeCreateRequest(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeCreateWithFormdataBody(ctx context.Context, pulpDomain string, body RepositoriesOstreeOstreeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeCreateRequestWithFormdataBody(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeDeleteRequest(c.Server, pulpDomain, pulpId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeReadRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreePartialUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreePartialUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreePartialUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreePartialUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreePartialUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreePartialUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeUpdateWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeUpdateRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeUpdate(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeUpdateRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeUpdateWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeUpdateRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeAddRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeAddRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeAddRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeImportAllWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeImportAllRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeImportAll(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeImportAllRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeImportAllWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportAllFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeImportAllRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeImportCommitsWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeImportCommitsRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeImportCommits(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportCommitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeImportCommitsRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeImportCommitsWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportCommitsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeImportCommitsRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeListRolesRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeModifyWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeModifyRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeModify(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeModifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeModifyRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeModifyWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeModifyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeModifyRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeMyPermissionsRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeRemoveRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeRemoveRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeRemoveRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeSetLabelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeSetLabelRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeSetLabel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeSetLabelRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeSetLabelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeSetLabelRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeSyncWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeSyncRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeSync(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeSyncRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeSyncWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSyncFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeSyncRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeUnsetLabelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeUnsetLabelRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeUnsetLabel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUnsetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeUnsetLabelRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepositoriesOstreeOstreeUnsetLabelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUnsetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepositoriesOstreeOstreeUnsetLabelRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksList(ctx context.Context, pulpDomain string, params *TasksListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksListRequest(c.Server, pulpDomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksPurgeWithBody(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksPurgeRequestWithBody(c.Server, pulpDomain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksPurge(ctx context.Context, pulpDomain string, body TasksPurgeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksPurgeRequest(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksPurgeWithFormdataBody(ctx context.Context, pulpDomain string, body TasksPurgeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksPurgeRequestWithFormdataBody(c.Server, pulpDomain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksDelete(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksDeleteRequest(c.Server, pulpDomain, pulpId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksRead(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *TasksReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksReadRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksCancelWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksCancelRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksCancel(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksCancelRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksCancelWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksCancelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksCancelRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksAddRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksAddRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksAddRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksAddRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksAddRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksAddRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksListRoles(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *TasksListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksListRolesRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksMyPermissions(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *TasksMyPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksMyPermissionsRequest(c.Server, pulpDomain, pulpId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksRemoveRoleWithBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksRemoveRoleRequestWithBody(c.Server, pulpDomain, pulpId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksRemoveRole(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksRemoveRoleRequest(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksRemoveRoleWithFormdataBody(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksRemoveRoleRequestWithFormdataBody(c.Server, pulpDomain, pulpId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewArtifactsListRequest generates requests for ArtifactsList
func NewArtifactsListRequest(server string, pulpDomain string, params *ArtifactsListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/artifacts/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Md5 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "md5", runtime.ParamLocationQuery, *params.Md5); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrphanedFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orphaned_for", runtime.ParamLocationQuery, *params.OrphanedFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpHrefIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_href__in", runtime.ParamLocationQuery, *params.PulpHrefIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_id__in", runtime.ParamLocationQuery, *params.PulpIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepositoryVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repository_version", runtime.ParamLocationQuery, *params.RepositoryVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sha1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha1", runtime.ParamLocationQuery, *params.Sha1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sha224 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha224", runtime.ParamLocationQuery, *params.Sha224); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sha256 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha256", runtime.ParamLocationQuery, *params.Sha256); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sha384 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha384", runtime.ParamLocationQuery, *params.Sha384); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sha512 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha512", runtime.ParamLocationQuery, *params.Sha512); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArtifactsCreateRequestWithFormdataBody calls the generic ArtifactsCreate builder with application/x-www-form-urlencoded body
func NewArtifactsCreateRequestWithFormdataBody(server string, pulpDomain string, body ArtifactsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewArtifactsCreateRequestWithBody(server, pulpDomain, "application/x-www-form-urlencoded", bodyReader)
}

// NewArtifactsCreateRequestWithBody generates requests for ArtifactsCreate with any type of body
func NewArtifactsCreateRequestWithBody(server string, pulpDomain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/artifacts/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArtifactsDeleteRequest generates requests for ArtifactsDelete
func NewArtifactsDeleteRequest(server string, pulpDomain string, pulpId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/artifacts/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArtifactsReadRequest generates requests for ArtifactsRead
func NewArtifactsReadRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *ArtifactsReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/artifacts/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentFileFilesListRequest generates requests for ContentFileFilesList
func NewContentFileFilesListRequest(server string, pulpDomain string, params *ContentFileFilesListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/content/file/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrphanedFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orphaned_for", runtime.ParamLocationQuery, *params.OrphanedFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpHrefIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_href__in", runtime.ParamLocationQuery, *params.PulpHrefIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_id__in", runtime.ParamLocationQuery, *params.PulpIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RelativePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relative_path", runtime.ParamLocationQuery, *params.RelativePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepositoryVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repository_version", runtime.ParamLocationQuery, *params.RepositoryVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepositoryVersionAdded != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repository_version_added", runtime.ParamLocationQuery, *params.RepositoryVersionAdded); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepositoryVersionRemoved != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repository_version_removed", runtime.ParamLocationQuery, *params.RepositoryVersionRemoved); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sha256 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha256", runtime.ParamLocationQuery, *params.Sha256); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentFileFilesCreateRequestWithFormdataBody calls the generic ContentFileFilesCreate builder with application/x-www-form-urlencoded body
func NewContentFileFilesCreateRequestWithFormdataBody(server string, pulpDomain string, body ContentFileFilesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentFileFilesCreateRequestWithBody(server, pulpDomain, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentFileFilesCreateRequestWithBody generates requests for ContentFileFilesCreate with any type of body
func NewContentFileFilesCreateRequestWithBody(server string, pulpDomain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/content/file/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentFileFilesReadRequest generates requests for ContentFileFilesRead
func NewContentFileFilesReadRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *ContentFileFilesReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/content/file/files/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentOstreeContentListRequest generates requests for ContentOstreeContentList
func NewContentOstreeContentListRequest(server string, pulpDomain string, params *ContentOstreeContentListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/content/ostree/content/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrphanedFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orphaned_for", runtime.ParamLocationQuery, *params.OrphanedFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpHrefIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_href__in", runtime.ParamLocationQuery, *params.PulpHrefIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_id__in", runtime.ParamLocationQuery, *params.PulpIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepositoryVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repository_version", runtime.ParamLocationQuery, *params.RepositoryVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepositoryVersionAdded != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repository_version_added", runtime.ParamLocationQuery, *params.RepositoryVersionAdded); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepositoryVersionRemoved != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repository_version_removed", runtime.ParamLocationQuery, *params.RepositoryVersionRemoved); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentOstreeContentCreateRequest calls the generic ContentOstreeContentCreate builder with application/json body
func NewContentOstreeContentCreateRequest(server string, pulpDomain string, body ContentOstreeContentCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentOstreeContentCreateRequestWithBody(server, pulpDomain, "application/json", bodyReader)
}

// NewContentOstreeContentCreateRequestWithFormdataBody calls the generic ContentOstreeContentCreate builder with application/x-www-form-urlencoded body
func NewContentOstreeContentCreateRequestWithFormdataBody(server string, pulpDomain string, body ContentOstreeContentCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentOstreeContentCreateRequestWithBody(server, pulpDomain, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentOstreeContentCreateRequestWithBody generates requests for ContentOstreeContentCreate with any type of body
func NewContentOstreeContentCreateRequestWithBody(server string, pulpDomain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/content/ostree/content/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentOstreeContentReadRequest generates requests for ContentOstreeContentRead
func NewContentOstreeContentReadRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *ContentOstreeContentReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/content/ostree/content/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreCompositeListRequest generates requests for ContentguardsCoreCompositeList
func NewContentguardsCoreCompositeListRequest(server string, pulpDomain string, params *ContentguardsCoreCompositeListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/composite/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameContains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__contains", runtime.ParamLocationQuery, *params.NameContains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIregex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iregex", runtime.ParamLocationQuery, *params.NameIregex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__istartswith", runtime.ParamLocationQuery, *params.NameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__regex", runtime.ParamLocationQuery, *params.NameRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameStartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__startswith", runtime.ParamLocationQuery, *params.NameStartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpHrefIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_href__in", runtime.ParamLocationQuery, *params.PulpHrefIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_id__in", runtime.ParamLocationQuery, *params.PulpIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreCompositeCreateRequest calls the generic ContentguardsCoreCompositeCreate builder with application/json body
func NewContentguardsCoreCompositeCreateRequest(server string, pulpDomain string, body ContentguardsCoreCompositeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreCompositeCreateRequestWithBody(server, pulpDomain, "application/json", bodyReader)
}

// NewContentguardsCoreCompositeCreateRequestWithFormdataBody calls the generic ContentguardsCoreCompositeCreate builder with application/x-www-form-urlencoded body
func NewContentguardsCoreCompositeCreateRequestWithFormdataBody(server string, pulpDomain string, body ContentguardsCoreCompositeCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreCompositeCreateRequestWithBody(server, pulpDomain, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreCompositeCreateRequestWithBody generates requests for ContentguardsCoreCompositeCreate with any type of body
func NewContentguardsCoreCompositeCreateRequestWithBody(server string, pulpDomain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/composite/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreCompositeDeleteRequest generates requests for ContentguardsCoreCompositeDelete
func NewContentguardsCoreCompositeDeleteRequest(server string, pulpDomain string, pulpId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/composite/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreCompositeReadRequest generates requests for ContentguardsCoreCompositeRead
func NewContentguardsCoreCompositeReadRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/composite/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreCompositePartialUpdateRequest calls the generic ContentguardsCoreCompositePartialUpdate builder with application/json body
func NewContentguardsCoreCompositePartialUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreCompositePartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewContentguardsCoreCompositePartialUpdateRequestWithFormdataBody calls the generic ContentguardsCoreCompositePartialUpdate builder with application/x-www-form-urlencoded body
func NewContentguardsCoreCompositePartialUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreCompositePartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreCompositePartialUpdateRequestWithBody generates requests for ContentguardsCoreCompositePartialUpdate with any type of body
func NewContentguardsCoreCompositePartialUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/composite/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreCompositeUpdateRequest calls the generic ContentguardsCoreCompositeUpdate builder with application/json body
func NewContentguardsCoreCompositeUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreCompositeUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewContentguardsCoreCompositeUpdateRequestWithFormdataBody calls the generic ContentguardsCoreCompositeUpdate builder with application/x-www-form-urlencoded body
func NewContentguardsCoreCompositeUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreCompositeUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreCompositeUpdateRequestWithBody generates requests for ContentguardsCoreCompositeUpdate with any type of body
func NewContentguardsCoreCompositeUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/composite/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreCompositeAddRoleRequest calls the generic ContentguardsCoreCompositeAddRole builder with application/json body
func NewContentguardsCoreCompositeAddRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeAddRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreCompositeAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewContentguardsCoreCompositeAddRoleRequestWithFormdataBody calls the generic ContentguardsCoreCompositeAddRole builder with application/x-www-form-urlencoded body
func NewContentguardsCoreCompositeAddRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeAddRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreCompositeAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreCompositeAddRoleRequestWithBody generates requests for ContentguardsCoreCompositeAddRole with any type of body
func NewContentguardsCoreCompositeAddRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/composite/%s/add_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreCompositeListRolesRequest generates requests for ContentguardsCoreCompositeListRoles
func NewContentguardsCoreCompositeListRolesRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeListRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/composite/%s/list_roles/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreCompositeMyPermissionsRequest generates requests for ContentguardsCoreCompositeMyPermissions
func NewContentguardsCoreCompositeMyPermissionsRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeMyPermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/composite/%s/my_permissions/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreCompositeRemoveRoleRequest calls the generic ContentguardsCoreCompositeRemoveRole builder with application/json body
func NewContentguardsCoreCompositeRemoveRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeRemoveRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreCompositeRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewContentguardsCoreCompositeRemoveRoleRequestWithFormdataBody calls the generic ContentguardsCoreCompositeRemoveRole builder with application/x-www-form-urlencoded body
func NewContentguardsCoreCompositeRemoveRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeRemoveRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreCompositeRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreCompositeRemoveRoleRequestWithBody generates requests for ContentguardsCoreCompositeRemoveRole with any type of body
func NewContentguardsCoreCompositeRemoveRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/composite/%s/remove_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreHeaderListRequest generates requests for ContentguardsCoreHeaderList
func NewContentguardsCoreHeaderListRequest(server string, pulpDomain string, params *ContentguardsCoreHeaderListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/header/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameContains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__contains", runtime.ParamLocationQuery, *params.NameContains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIregex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iregex", runtime.ParamLocationQuery, *params.NameIregex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__istartswith", runtime.ParamLocationQuery, *params.NameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__regex", runtime.ParamLocationQuery, *params.NameRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameStartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__startswith", runtime.ParamLocationQuery, *params.NameStartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpHrefIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_href__in", runtime.ParamLocationQuery, *params.PulpHrefIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_id__in", runtime.ParamLocationQuery, *params.PulpIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreHeaderCreateRequest calls the generic ContentguardsCoreHeaderCreate builder with application/json body
func NewContentguardsCoreHeaderCreateRequest(server string, pulpDomain string, body ContentguardsCoreHeaderCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreHeaderCreateRequestWithBody(server, pulpDomain, "application/json", bodyReader)
}

// NewContentguardsCoreHeaderCreateRequestWithFormdataBody calls the generic ContentguardsCoreHeaderCreate builder with application/x-www-form-urlencoded body
func NewContentguardsCoreHeaderCreateRequestWithFormdataBody(server string, pulpDomain string, body ContentguardsCoreHeaderCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreHeaderCreateRequestWithBody(server, pulpDomain, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreHeaderCreateRequestWithBody generates requests for ContentguardsCoreHeaderCreate with any type of body
func NewContentguardsCoreHeaderCreateRequestWithBody(server string, pulpDomain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/header/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreHeaderDeleteRequest generates requests for ContentguardsCoreHeaderDelete
func NewContentguardsCoreHeaderDeleteRequest(server string, pulpDomain string, pulpId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/header/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreHeaderReadRequest generates requests for ContentguardsCoreHeaderRead
func NewContentguardsCoreHeaderReadRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/header/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreHeaderPartialUpdateRequest calls the generic ContentguardsCoreHeaderPartialUpdate builder with application/json body
func NewContentguardsCoreHeaderPartialUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreHeaderPartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewContentguardsCoreHeaderPartialUpdateRequestWithFormdataBody calls the generic ContentguardsCoreHeaderPartialUpdate builder with application/x-www-form-urlencoded body
func NewContentguardsCoreHeaderPartialUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreHeaderPartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreHeaderPartialUpdateRequestWithBody generates requests for ContentguardsCoreHeaderPartialUpdate with any type of body
func NewContentguardsCoreHeaderPartialUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/header/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreHeaderUpdateRequest calls the generic ContentguardsCoreHeaderUpdate builder with application/json body
func NewContentguardsCoreHeaderUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreHeaderUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewContentguardsCoreHeaderUpdateRequestWithFormdataBody calls the generic ContentguardsCoreHeaderUpdate builder with application/x-www-form-urlencoded body
func NewContentguardsCoreHeaderUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreHeaderUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreHeaderUpdateRequestWithBody generates requests for ContentguardsCoreHeaderUpdate with any type of body
func NewContentguardsCoreHeaderUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/header/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreHeaderAddRoleRequest calls the generic ContentguardsCoreHeaderAddRole builder with application/json body
func NewContentguardsCoreHeaderAddRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderAddRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreHeaderAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewContentguardsCoreHeaderAddRoleRequestWithFormdataBody calls the generic ContentguardsCoreHeaderAddRole builder with application/x-www-form-urlencoded body
func NewContentguardsCoreHeaderAddRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderAddRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreHeaderAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreHeaderAddRoleRequestWithBody generates requests for ContentguardsCoreHeaderAddRole with any type of body
func NewContentguardsCoreHeaderAddRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/header/%s/add_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreHeaderListRolesRequest generates requests for ContentguardsCoreHeaderListRoles
func NewContentguardsCoreHeaderListRolesRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderListRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/header/%s/list_roles/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreHeaderMyPermissionsRequest generates requests for ContentguardsCoreHeaderMyPermissions
func NewContentguardsCoreHeaderMyPermissionsRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderMyPermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/header/%s/my_permissions/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreHeaderRemoveRoleRequest calls the generic ContentguardsCoreHeaderRemoveRole builder with application/json body
func NewContentguardsCoreHeaderRemoveRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderRemoveRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreHeaderRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewContentguardsCoreHeaderRemoveRoleRequestWithFormdataBody calls the generic ContentguardsCoreHeaderRemoveRole builder with application/x-www-form-urlencoded body
func NewContentguardsCoreHeaderRemoveRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderRemoveRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreHeaderRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreHeaderRemoveRoleRequestWithBody generates requests for ContentguardsCoreHeaderRemoveRole with any type of body
func NewContentguardsCoreHeaderRemoveRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/header/%s/remove_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreRbacListRequest generates requests for ContentguardsCoreRbacList
func NewContentguardsCoreRbacListRequest(server string, pulpDomain string, params *ContentguardsCoreRbacListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/rbac/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameContains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__contains", runtime.ParamLocationQuery, *params.NameContains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIregex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iregex", runtime.ParamLocationQuery, *params.NameIregex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__istartswith", runtime.ParamLocationQuery, *params.NameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__regex", runtime.ParamLocationQuery, *params.NameRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameStartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__startswith", runtime.ParamLocationQuery, *params.NameStartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpHrefIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_href__in", runtime.ParamLocationQuery, *params.PulpHrefIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_id__in", runtime.ParamLocationQuery, *params.PulpIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreRbacCreateRequest calls the generic ContentguardsCoreRbacCreate builder with application/json body
func NewContentguardsCoreRbacCreateRequest(server string, pulpDomain string, body ContentguardsCoreRbacCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreRbacCreateRequestWithBody(server, pulpDomain, "application/json", bodyReader)
}

// NewContentguardsCoreRbacCreateRequestWithFormdataBody calls the generic ContentguardsCoreRbacCreate builder with application/x-www-form-urlencoded body
func NewContentguardsCoreRbacCreateRequestWithFormdataBody(server string, pulpDomain string, body ContentguardsCoreRbacCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreRbacCreateRequestWithBody(server, pulpDomain, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreRbacCreateRequestWithBody generates requests for ContentguardsCoreRbacCreate with any type of body
func NewContentguardsCoreRbacCreateRequestWithBody(server string, pulpDomain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/rbac/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreRbacDeleteRequest generates requests for ContentguardsCoreRbacDelete
func NewContentguardsCoreRbacDeleteRequest(server string, pulpDomain string, pulpId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/rbac/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreRbacReadRequest generates requests for ContentguardsCoreRbacRead
func NewContentguardsCoreRbacReadRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/rbac/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreRbacPartialUpdateRequest calls the generic ContentguardsCoreRbacPartialUpdate builder with application/json body
func NewContentguardsCoreRbacPartialUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreRbacPartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewContentguardsCoreRbacPartialUpdateRequestWithFormdataBody calls the generic ContentguardsCoreRbacPartialUpdate builder with application/x-www-form-urlencoded body
func NewContentguardsCoreRbacPartialUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreRbacPartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreRbacPartialUpdateRequestWithBody generates requests for ContentguardsCoreRbacPartialUpdate with any type of body
func NewContentguardsCoreRbacPartialUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/rbac/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreRbacUpdateRequest calls the generic ContentguardsCoreRbacUpdate builder with application/json body
func NewContentguardsCoreRbacUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreRbacUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewContentguardsCoreRbacUpdateRequestWithFormdataBody calls the generic ContentguardsCoreRbacUpdate builder with application/x-www-form-urlencoded body
func NewContentguardsCoreRbacUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreRbacUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreRbacUpdateRequestWithBody generates requests for ContentguardsCoreRbacUpdate with any type of body
func NewContentguardsCoreRbacUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/rbac/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreRbacAddRoleRequest calls the generic ContentguardsCoreRbacAddRole builder with application/json body
func NewContentguardsCoreRbacAddRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacAddRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreRbacAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewContentguardsCoreRbacAddRoleRequestWithFormdataBody calls the generic ContentguardsCoreRbacAddRole builder with application/x-www-form-urlencoded body
func NewContentguardsCoreRbacAddRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacAddRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreRbacAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreRbacAddRoleRequestWithBody generates requests for ContentguardsCoreRbacAddRole with any type of body
func NewContentguardsCoreRbacAddRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/rbac/%s/add_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentguardsCoreRbacListRolesRequest generates requests for ContentguardsCoreRbacListRoles
func NewContentguardsCoreRbacListRolesRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacListRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/rbac/%s/list_roles/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreRbacMyPermissionsRequest generates requests for ContentguardsCoreRbacMyPermissions
func NewContentguardsCoreRbacMyPermissionsRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacMyPermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/rbac/%s/my_permissions/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContentguardsCoreRbacRemoveRoleRequest calls the generic ContentguardsCoreRbacRemoveRole builder with application/json body
func NewContentguardsCoreRbacRemoveRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacRemoveRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentguardsCoreRbacRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewContentguardsCoreRbacRemoveRoleRequestWithFormdataBody calls the generic ContentguardsCoreRbacRemoveRole builder with application/x-www-form-urlencoded body
func NewContentguardsCoreRbacRemoveRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacRemoveRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContentguardsCoreRbacRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewContentguardsCoreRbacRemoveRoleRequestWithBody generates requests for ContentguardsCoreRbacRemoveRole with any type of body
func NewContentguardsCoreRbacRemoveRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/contentguards/core/rbac/%s/remove_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDistributionsOstreeOstreeListRequest generates requests for DistributionsOstreeOstreeList
func NewDistributionsOstreeOstreeListRequest(server string, pulpDomain string, params *DistributionsOstreeOstreeListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/distributions/ostree/ostree/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BasePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "base_path", runtime.ParamLocationQuery, *params.BasePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BasePathContains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "base_path__contains", runtime.ParamLocationQuery, *params.BasePathContains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BasePathIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "base_path__icontains", runtime.ParamLocationQuery, *params.BasePathIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BasePathIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "base_path__in", runtime.ParamLocationQuery, *params.BasePathIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameContains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__contains", runtime.ParamLocationQuery, *params.NameContains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIregex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iregex", runtime.ParamLocationQuery, *params.NameIregex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__istartswith", runtime.ParamLocationQuery, *params.NameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__regex", runtime.ParamLocationQuery, *params.NameRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameStartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__startswith", runtime.ParamLocationQuery, *params.NameStartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpHrefIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_href__in", runtime.ParamLocationQuery, *params.PulpHrefIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_id__in", runtime.ParamLocationQuery, *params.PulpIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpLabelSelect != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pulp_label_select", runtime.ParamLocationQuery, *params.PulpLabelSelect); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Repository != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repository", runtime.ParamLocationQuery, *params.Repository); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepositoryIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "repository__in", runtime.ParamLocationQuery, *params.RepositoryIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithContent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_content", runtime.ParamLocationQuery, *params.WithContent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDistributionsOstreeOstreeCreateRequest calls the generic DistributionsOstreeOstreeCreate builder with application/json body
func NewDistributionsOstreeOstreeCreateRequest(server string, pulpDomain string, body DistributionsOstreeOstreeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDistributionsOstreeOstreeCreateRequestWithBody(server, pulpDomain, "application/json", bodyReader)
}

// NewDistributionsOstreeOstreeCreateRequestWithFormdataBody calls the generic DistributionsOstreeOstreeCreate builder with application/x-www-form-urlencoded body
func NewDistributionsOstreeOstreeCreateRequestWithFormdataBody(server string, pulpDomain string, body DistributionsOstreeOstreeCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDistributionsOstreeOstreeCreateRequestWithBody(server, pulpDomain, "application/x-www-form-urlencoded", bodyReader)
}

// NewDistributionsOstreeOstreeCreateRequestWithBody generates requests for DistributionsOstreeOstreeCreate with any type of body
func NewDistributionsOstreeOstreeCreateRequestWithBody(server string, pulpDomain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/distributions/ostree/ostree/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDistributionsOstreeOstreeDeleteRequest generates requests for DistributionsOstreeOstreeDelete
func NewDistributionsOstreeOstreeDeleteRequest(server string, pulpDomain string, pulpId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/distributions/ostree/ostree/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDistributionsOstreeOstreeReadRequest generates requests for DistributionsOstreeOstreeRead
func NewDistributionsOstreeOstreeReadRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/distributions/ostree/ostree/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDistributionsOstreeOstreePartialUpdateRequest calls the generic DistributionsOstreeOstreePartialUpdate builder with application/json body
func NewDistributionsOstreeOstreePartialUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDistributionsOstreeOstreePartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewDistributionsOstreeOstreePartialUpdateRequestWithFormdataBody calls the generic DistributionsOstreeOstreePartialUpdate builder with application/x-www-form-urlencoded body
func NewDistributionsOstreeOstreePartialUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDistributionsOstreeOstreePartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewDistributionsOstreeOstreePartialUpdateRequestWithBody generates requests for DistributionsOstreeOstreePartialUpdate with any type of body
func NewDistributionsOstreeOstreePartialUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/distributions/ostree/ostree/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDistributionsOstreeOstreeUpdateRequest calls the generic DistributionsOstreeOstreeUpdate builder with application/json body
func NewDistributionsOstreeOstreeUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDistributionsOstreeOstreeUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewDistributionsOstreeOstreeUpdateRequestWithFormdataBody calls the generic DistributionsOstreeOstreeUpdate builder with application/x-www-form-urlencoded body
func NewDistributionsOstreeOstreeUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDistributionsOstreeOstreeUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewDistributionsOstreeOstreeUpdateRequestWithBody generates requests for DistributionsOstreeOstreeUpdate with any type of body
func NewDistributionsOstreeOstreeUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/distributions/ostree/ostree/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDistributionsOstreeOstreeAddRoleRequest calls the generic DistributionsOstreeOstreeAddRole builder with application/json body
func NewDistributionsOstreeOstreeAddRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeAddRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDistributionsOstreeOstreeAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewDistributionsOstreeOstreeAddRoleRequestWithFormdataBody calls the generic DistributionsOstreeOstreeAddRole builder with application/x-www-form-urlencoded body
func NewDistributionsOstreeOstreeAddRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeAddRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDistributionsOstreeOstreeAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewDistributionsOstreeOstreeAddRoleRequestWithBody generates requests for DistributionsOstreeOstreeAddRole with any type of body
func NewDistributionsOstreeOstreeAddRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/distributions/ostree/ostree/%s/add_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDistributionsOstreeOstreeListRolesRequest generates requests for DistributionsOstreeOstreeListRoles
func NewDistributionsOstreeOstreeListRolesRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeListRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/distributions/ostree/ostree/%s/list_roles/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDistributionsOstreeOstreeMyPermissionsRequest generates requests for DistributionsOstreeOstreeMyPermissions
func NewDistributionsOstreeOstreeMyPermissionsRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeMyPermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/distributions/ostree/ostree/%s/my_permissions/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDistributionsOstreeOstreeRemoveRoleRequest calls the generic DistributionsOstreeOstreeRemoveRole builder with application/json body
func NewDistributionsOstreeOstreeRemoveRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeRemoveRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDistributionsOstreeOstreeRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewDistributionsOstreeOstreeRemoveRoleRequestWithFormdataBody calls the generic DistributionsOstreeOstreeRemoveRole builder with application/x-www-form-urlencoded body
func NewDistributionsOstreeOstreeRemoveRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeRemoveRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDistributionsOstreeOstreeRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewDistributionsOstreeOstreeRemoveRoleRequestWithBody generates requests for DistributionsOstreeOstreeRemoveRole with any type of body
func NewDistributionsOstreeOstreeRemoveRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/distributions/ostree/ostree/%s/remove_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDistributionsOstreeOstreeSetLabelRequest calls the generic DistributionsOstreeOstreeSetLabel builder with application/json body
func NewDistributionsOstreeOstreeSetLabelRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeSetLabelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDistributionsOstreeOstreeSetLabelRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewDistributionsOstreeOstreeSetLabelRequestWithFormdataBody calls the generic DistributionsOstreeOstreeSetLabel builder with application/x-www-form-urlencoded body
func NewDistributionsOstreeOstreeSetLabelRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeSetLabelFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDistributionsOstreeOstreeSetLabelRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewDistributionsOstreeOstreeSetLabelRequestWithBody generates requests for DistributionsOstreeOstreeSetLabel with any type of body
func NewDistributionsOstreeOstreeSetLabelRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/distributions/ostree/ostree/%s/set_label/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDistributionsOstreeOstreeUnsetLabelRequest calls the generic DistributionsOstreeOstreeUnsetLabel builder with application/json body
func NewDistributionsOstreeOstreeUnsetLabelRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUnsetLabelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDistributionsOstreeOstreeUnsetLabelRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewDistributionsOstreeOstreeUnsetLabelRequestWithFormdataBody calls the generic DistributionsOstreeOstreeUnsetLabel builder with application/x-www-form-urlencoded body
func NewDistributionsOstreeOstreeUnsetLabelRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUnsetLabelFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDistributionsOstreeOstreeUnsetLabelRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewDistributionsOstreeOstreeUnsetLabelRequestWithBody generates requests for DistributionsOstreeOstreeUnsetLabel with any type of body
func NewDistributionsOstreeOstreeUnsetLabelRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/distributions/ostree/ostree/%s/unset_label/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsListRequest generates requests for DomainsList
func NewDomainsListRequest(server string, pulpDomain string, params *DomainsListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/domains/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameContains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__contains", runtime.ParamLocationQuery, *params.NameContains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIregex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iregex", runtime.ParamLocationQuery, *params.NameIregex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__istartswith", runtime.ParamLocationQuery, *params.NameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__regex", runtime.ParamLocationQuery, *params.NameRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameStartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__startswith", runtime.ParamLocationQuery, *params.NameStartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpHrefIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_href__in", runtime.ParamLocationQuery, *params.PulpHrefIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_id__in", runtime.ParamLocationQuery, *params.PulpIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsCreateRequest calls the generic DomainsCreate builder with application/json body
func NewDomainsCreateRequest(server string, pulpDomain string, body DomainsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsCreateRequestWithBody(server, pulpDomain, "application/json", bodyReader)
}

// NewDomainsCreateRequestWithFormdataBody calls the generic DomainsCreate builder with application/x-www-form-urlencoded body
func NewDomainsCreateRequestWithFormdataBody(server string, pulpDomain string, body DomainsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDomainsCreateRequestWithBody(server, pulpDomain, "application/x-www-form-urlencoded", bodyReader)
}

// NewDomainsCreateRequestWithBody generates requests for DomainsCreate with any type of body
func NewDomainsCreateRequestWithBody(server string, pulpDomain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/domains/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsDeleteRequest generates requests for DomainsDelete
func NewDomainsDeleteRequest(server string, pulpDomain string, pulpId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/domains/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsReadRequest generates requests for DomainsRead
func NewDomainsReadRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *DomainsReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/domains/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsPartialUpdateRequest calls the generic DomainsPartialUpdate builder with application/json body
func NewDomainsPartialUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body DomainsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsPartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewDomainsPartialUpdateRequestWithFormdataBody calls the generic DomainsPartialUpdate builder with application/x-www-form-urlencoded body
func NewDomainsPartialUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body DomainsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDomainsPartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewDomainsPartialUpdateRequestWithBody generates requests for DomainsPartialUpdate with any type of body
func NewDomainsPartialUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/domains/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsUpdateRequest calls the generic DomainsUpdate builder with application/json body
func NewDomainsUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body DomainsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewDomainsUpdateRequestWithFormdataBody calls the generic DomainsUpdate builder with application/x-www-form-urlencoded body
func NewDomainsUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body DomainsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDomainsUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewDomainsUpdateRequestWithBody generates requests for DomainsUpdate with any type of body
func NewDomainsUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/domains/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesFileFileListRequest generates requests for RepositoriesFileFileList
func NewRepositoriesFileFileListRequest(server string, pulpDomain string, params *RepositoriesFileFileListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LatestWithContent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "latest_with_content", runtime.ParamLocationQuery, *params.LatestWithContent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameContains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__contains", runtime.ParamLocationQuery, *params.NameContains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIregex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iregex", runtime.ParamLocationQuery, *params.NameIregex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__istartswith", runtime.ParamLocationQuery, *params.NameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__regex", runtime.ParamLocationQuery, *params.NameRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameStartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__startswith", runtime.ParamLocationQuery, *params.NameStartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpHrefIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_href__in", runtime.ParamLocationQuery, *params.PulpHrefIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_id__in", runtime.ParamLocationQuery, *params.PulpIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpLabelSelect != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pulp_label_select", runtime.ParamLocationQuery, *params.PulpLabelSelect); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Remote != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote", runtime.ParamLocationQuery, *params.Remote); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions", runtime.ParamLocationQuery, *params.RetainRepoVersions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions__gt", runtime.ParamLocationQuery, *params.RetainRepoVersionsGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions__gte", runtime.ParamLocationQuery, *params.RetainRepoVersionsGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions__isnull", runtime.ParamLocationQuery, *params.RetainRepoVersionsIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions__lt", runtime.ParamLocationQuery, *params.RetainRepoVersionsLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions__lte", runtime.ParamLocationQuery, *params.RetainRepoVersionsLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions__ne", runtime.ParamLocationQuery, *params.RetainRepoVersionsNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsRange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "retain_repo_versions__range", runtime.ParamLocationQuery, *params.RetainRepoVersionsRange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithContent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_content", runtime.ParamLocationQuery, *params.WithContent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepositoriesFileFileCreateRequest calls the generic RepositoriesFileFileCreate builder with application/json body
func NewRepositoriesFileFileCreateRequest(server string, pulpDomain string, body RepositoriesFileFileCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesFileFileCreateRequestWithBody(server, pulpDomain, "application/json", bodyReader)
}

// NewRepositoriesFileFileCreateRequestWithFormdataBody calls the generic RepositoriesFileFileCreate builder with application/x-www-form-urlencoded body
func NewRepositoriesFileFileCreateRequestWithFormdataBody(server string, pulpDomain string, body RepositoriesFileFileCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesFileFileCreateRequestWithBody(server, pulpDomain, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesFileFileCreateRequestWithBody generates requests for RepositoriesFileFileCreate with any type of body
func NewRepositoriesFileFileCreateRequestWithBody(server string, pulpDomain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesFileFileDeleteRequest generates requests for RepositoriesFileFileDelete
func NewRepositoriesFileFileDeleteRequest(server string, pulpDomain string, pulpId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepositoriesFileFileReadRequest generates requests for RepositoriesFileFileRead
func NewRepositoriesFileFileReadRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepositoriesFileFilePartialUpdateRequest calls the generic RepositoriesFileFilePartialUpdate builder with application/json body
func NewRepositoriesFileFilePartialUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFilePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesFileFilePartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesFileFilePartialUpdateRequestWithFormdataBody calls the generic RepositoriesFileFilePartialUpdate builder with application/x-www-form-urlencoded body
func NewRepositoriesFileFilePartialUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFilePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesFileFilePartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesFileFilePartialUpdateRequestWithBody generates requests for RepositoriesFileFilePartialUpdate with any type of body
func NewRepositoriesFileFilePartialUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesFileFileUpdateRequest calls the generic RepositoriesFileFileUpdate builder with application/json body
func NewRepositoriesFileFileUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesFileFileUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesFileFileUpdateRequestWithFormdataBody calls the generic RepositoriesFileFileUpdate builder with application/x-www-form-urlencoded body
func NewRepositoriesFileFileUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesFileFileUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesFileFileUpdateRequestWithBody generates requests for RepositoriesFileFileUpdate with any type of body
func NewRepositoriesFileFileUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesFileFileAddRoleRequest calls the generic RepositoriesFileFileAddRole builder with application/json body
func NewRepositoriesFileFileAddRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileAddRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesFileFileAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesFileFileAddRoleRequestWithFormdataBody calls the generic RepositoriesFileFileAddRole builder with application/x-www-form-urlencoded body
func NewRepositoriesFileFileAddRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileAddRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesFileFileAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesFileFileAddRoleRequestWithBody generates requests for RepositoriesFileFileAddRole with any type of body
func NewRepositoriesFileFileAddRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/add_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesFileFileListRolesRequest generates requests for RepositoriesFileFileListRoles
func NewRepositoriesFileFileListRolesRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileListRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/list_roles/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepositoriesFileFileModifyRequest calls the generic RepositoriesFileFileModify builder with application/json body
func NewRepositoriesFileFileModifyRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileModifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesFileFileModifyRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesFileFileModifyRequestWithFormdataBody calls the generic RepositoriesFileFileModify builder with application/x-www-form-urlencoded body
func NewRepositoriesFileFileModifyRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileModifyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesFileFileModifyRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesFileFileModifyRequestWithBody generates requests for RepositoriesFileFileModify with any type of body
func NewRepositoriesFileFileModifyRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/modify/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesFileFileMyPermissionsRequest generates requests for RepositoriesFileFileMyPermissions
func NewRepositoriesFileFileMyPermissionsRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileMyPermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/my_permissions/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepositoriesFileFileRemoveRoleRequest calls the generic RepositoriesFileFileRemoveRole builder with application/json body
func NewRepositoriesFileFileRemoveRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileRemoveRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesFileFileRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesFileFileRemoveRoleRequestWithFormdataBody calls the generic RepositoriesFileFileRemoveRole builder with application/x-www-form-urlencoded body
func NewRepositoriesFileFileRemoveRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileRemoveRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesFileFileRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesFileFileRemoveRoleRequestWithBody generates requests for RepositoriesFileFileRemoveRole with any type of body
func NewRepositoriesFileFileRemoveRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/remove_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesFileFileSetLabelRequest calls the generic RepositoriesFileFileSetLabel builder with application/json body
func NewRepositoriesFileFileSetLabelRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSetLabelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesFileFileSetLabelRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesFileFileSetLabelRequestWithFormdataBody calls the generic RepositoriesFileFileSetLabel builder with application/x-www-form-urlencoded body
func NewRepositoriesFileFileSetLabelRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSetLabelFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesFileFileSetLabelRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesFileFileSetLabelRequestWithBody generates requests for RepositoriesFileFileSetLabel with any type of body
func NewRepositoriesFileFileSetLabelRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/set_label/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesFileFileSyncRequest calls the generic RepositoriesFileFileSync builder with application/json body
func NewRepositoriesFileFileSyncRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesFileFileSyncRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesFileFileSyncRequestWithFormdataBody calls the generic RepositoriesFileFileSync builder with application/x-www-form-urlencoded body
func NewRepositoriesFileFileSyncRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSyncFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesFileFileSyncRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesFileFileSyncRequestWithBody generates requests for RepositoriesFileFileSync with any type of body
func NewRepositoriesFileFileSyncRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/sync/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesFileFileUnsetLabelRequest calls the generic RepositoriesFileFileUnsetLabel builder with application/json body
func NewRepositoriesFileFileUnsetLabelRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUnsetLabelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesFileFileUnsetLabelRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesFileFileUnsetLabelRequestWithFormdataBody calls the generic RepositoriesFileFileUnsetLabel builder with application/x-www-form-urlencoded body
func NewRepositoriesFileFileUnsetLabelRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUnsetLabelFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesFileFileUnsetLabelRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesFileFileUnsetLabelRequestWithBody generates requests for RepositoriesFileFileUnsetLabel with any type of body
func NewRepositoriesFileFileUnsetLabelRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/unset_label/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesFileFileVersionsListRequest generates requests for RepositoriesFileFileVersionsList
func NewRepositoriesFileFileVersionsListRequest(server string, pulpDomain string, repositoryPk openapi_types.UUID, params *RepositoriesFileFileVersionsListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository_pk", runtime.ParamLocationPath, repositoryPk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/versions/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Content != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content", runtime.ParamLocationQuery, *params.Content); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContentIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content__in", runtime.ParamLocationQuery, *params.ContentIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Number != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "number", runtime.ParamLocationQuery, *params.Number); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NumberGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "number__gt", runtime.ParamLocationQuery, *params.NumberGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NumberGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "number__gte", runtime.ParamLocationQuery, *params.NumberGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NumberLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "number__lt", runtime.ParamLocationQuery, *params.NumberLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NumberLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "number__lte", runtime.ParamLocationQuery, *params.NumberLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NumberRange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "number__range", runtime.ParamLocationQuery, *params.NumberRange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpCreated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pulp_created", runtime.ParamLocationQuery, *params.PulpCreated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpCreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pulp_created__gt", runtime.ParamLocationQuery, *params.PulpCreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpCreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pulp_created__gte", runtime.ParamLocationQuery, *params.PulpCreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpCreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pulp_created__lt", runtime.ParamLocationQuery, *params.PulpCreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpCreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pulp_created__lte", runtime.ParamLocationQuery, *params.PulpCreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpCreatedRange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_created__range", runtime.ParamLocationQuery, *params.PulpCreatedRange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpHrefIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_href__in", runtime.ParamLocationQuery, *params.PulpHrefIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepositoriesFileFileVersionsDeleteRequest generates requests for RepositoriesFileFileVersionsDelete
func NewRepositoriesFileFileVersionsDeleteRequest(server string, pulpDomain string, repositoryPk openapi_types.UUID, number int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository_pk", runtime.ParamLocationPath, repositoryPk)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/versions/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepositoriesFileFileVersionsReadRequest generates requests for RepositoriesFileFileVersionsRead
func NewRepositoriesFileFileVersionsReadRequest(server string, pulpDomain string, repositoryPk openapi_types.UUID, number int64, params *RepositoriesFileFileVersionsReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository_pk", runtime.ParamLocationPath, repositoryPk)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/versions/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepositoriesFileFileVersionsRepairRequest calls the generic RepositoriesFileFileVersionsRepair builder with application/json body
func NewRepositoriesFileFileVersionsRepairRequest(server string, pulpDomain string, repositoryPk openapi_types.UUID, number int64, body RepositoriesFileFileVersionsRepairJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesFileFileVersionsRepairRequestWithBody(server, pulpDomain, repositoryPk, number, "application/json", bodyReader)
}

// NewRepositoriesFileFileVersionsRepairRequestWithFormdataBody calls the generic RepositoriesFileFileVersionsRepair builder with application/x-www-form-urlencoded body
func NewRepositoriesFileFileVersionsRepairRequestWithFormdataBody(server string, pulpDomain string, repositoryPk openapi_types.UUID, number int64, body RepositoriesFileFileVersionsRepairFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesFileFileVersionsRepairRequestWithBody(server, pulpDomain, repositoryPk, number, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesFileFileVersionsRepairRequestWithBody generates requests for RepositoriesFileFileVersionsRepair with any type of body
func NewRepositoriesFileFileVersionsRepairRequestWithBody(server string, pulpDomain string, repositoryPk openapi_types.UUID, number int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository_pk", runtime.ParamLocationPath, repositoryPk)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/file/file/%s/versions/%s/repair/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesOstreeOstreeListRequest generates requests for RepositoriesOstreeOstreeList
func NewRepositoriesOstreeOstreeListRequest(server string, pulpDomain string, params *RepositoriesOstreeOstreeListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LatestWithContent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "latest_with_content", runtime.ParamLocationQuery, *params.LatestWithContent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameContains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__contains", runtime.ParamLocationQuery, *params.NameContains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIregex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iregex", runtime.ParamLocationQuery, *params.NameIregex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__istartswith", runtime.ParamLocationQuery, *params.NameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__regex", runtime.ParamLocationQuery, *params.NameRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameStartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__startswith", runtime.ParamLocationQuery, *params.NameStartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpHrefIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_href__in", runtime.ParamLocationQuery, *params.PulpHrefIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_id__in", runtime.ParamLocationQuery, *params.PulpIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpLabelSelect != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pulp_label_select", runtime.ParamLocationQuery, *params.PulpLabelSelect); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Remote != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote", runtime.ParamLocationQuery, *params.Remote); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions", runtime.ParamLocationQuery, *params.RetainRepoVersions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions__gt", runtime.ParamLocationQuery, *params.RetainRepoVersionsGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions__gte", runtime.ParamLocationQuery, *params.RetainRepoVersionsGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions__isnull", runtime.ParamLocationQuery, *params.RetainRepoVersionsIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions__lt", runtime.ParamLocationQuery, *params.RetainRepoVersionsLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions__lte", runtime.ParamLocationQuery, *params.RetainRepoVersionsLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retain_repo_versions__ne", runtime.ParamLocationQuery, *params.RetainRepoVersionsNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetainRepoVersionsRange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "retain_repo_versions__range", runtime.ParamLocationQuery, *params.RetainRepoVersionsRange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithContent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_content", runtime.ParamLocationQuery, *params.WithContent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepositoriesOstreeOstreeCreateRequest calls the generic RepositoriesOstreeOstreeCreate builder with application/json body
func NewRepositoriesOstreeOstreeCreateRequest(server string, pulpDomain string, body RepositoriesOstreeOstreeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesOstreeOstreeCreateRequestWithBody(server, pulpDomain, "application/json", bodyReader)
}

// NewRepositoriesOstreeOstreeCreateRequestWithFormdataBody calls the generic RepositoriesOstreeOstreeCreate builder with application/x-www-form-urlencoded body
func NewRepositoriesOstreeOstreeCreateRequestWithFormdataBody(server string, pulpDomain string, body RepositoriesOstreeOstreeCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesOstreeOstreeCreateRequestWithBody(server, pulpDomain, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesOstreeOstreeCreateRequestWithBody generates requests for RepositoriesOstreeOstreeCreate with any type of body
func NewRepositoriesOstreeOstreeCreateRequestWithBody(server string, pulpDomain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesOstreeOstreeDeleteRequest generates requests for RepositoriesOstreeOstreeDelete
func NewRepositoriesOstreeOstreeDeleteRequest(server string, pulpDomain string, pulpId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepositoriesOstreeOstreeReadRequest generates requests for RepositoriesOstreeOstreeRead
func NewRepositoriesOstreeOstreeReadRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepositoriesOstreeOstreePartialUpdateRequest calls the generic RepositoriesOstreeOstreePartialUpdate builder with application/json body
func NewRepositoriesOstreeOstreePartialUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesOstreeOstreePartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesOstreeOstreePartialUpdateRequestWithFormdataBody calls the generic RepositoriesOstreeOstreePartialUpdate builder with application/x-www-form-urlencoded body
func NewRepositoriesOstreeOstreePartialUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesOstreeOstreePartialUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesOstreeOstreePartialUpdateRequestWithBody generates requests for RepositoriesOstreeOstreePartialUpdate with any type of body
func NewRepositoriesOstreeOstreePartialUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesOstreeOstreeUpdateRequest calls the generic RepositoriesOstreeOstreeUpdate builder with application/json body
func NewRepositoriesOstreeOstreeUpdateRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesOstreeOstreeUpdateRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesOstreeOstreeUpdateRequestWithFormdataBody calls the generic RepositoriesOstreeOstreeUpdate builder with application/x-www-form-urlencoded body
func NewRepositoriesOstreeOstreeUpdateRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesOstreeOstreeUpdateRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesOstreeOstreeUpdateRequestWithBody generates requests for RepositoriesOstreeOstreeUpdate with any type of body
func NewRepositoriesOstreeOstreeUpdateRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesOstreeOstreeAddRoleRequest calls the generic RepositoriesOstreeOstreeAddRole builder with application/json body
func NewRepositoriesOstreeOstreeAddRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeAddRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesOstreeOstreeAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesOstreeOstreeAddRoleRequestWithFormdataBody calls the generic RepositoriesOstreeOstreeAddRole builder with application/x-www-form-urlencoded body
func NewRepositoriesOstreeOstreeAddRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeAddRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesOstreeOstreeAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesOstreeOstreeAddRoleRequestWithBody generates requests for RepositoriesOstreeOstreeAddRole with any type of body
func NewRepositoriesOstreeOstreeAddRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/add_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesOstreeOstreeImportAllRequest calls the generic RepositoriesOstreeOstreeImportAll builder with application/json body
func NewRepositoriesOstreeOstreeImportAllRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportAllJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesOstreeOstreeImportAllRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesOstreeOstreeImportAllRequestWithFormdataBody calls the generic RepositoriesOstreeOstreeImportAll builder with application/x-www-form-urlencoded body
func NewRepositoriesOstreeOstreeImportAllRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportAllFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesOstreeOstreeImportAllRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesOstreeOstreeImportAllRequestWithBody generates requests for RepositoriesOstreeOstreeImportAll with any type of body
func NewRepositoriesOstreeOstreeImportAllRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/import_all/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesOstreeOstreeImportCommitsRequest calls the generic RepositoriesOstreeOstreeImportCommits builder with application/json body
func NewRepositoriesOstreeOstreeImportCommitsRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportCommitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesOstreeOstreeImportCommitsRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesOstreeOstreeImportCommitsRequestWithFormdataBody calls the generic RepositoriesOstreeOstreeImportCommits builder with application/x-www-form-urlencoded body
func NewRepositoriesOstreeOstreeImportCommitsRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportCommitsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesOstreeOstreeImportCommitsRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesOstreeOstreeImportCommitsRequestWithBody generates requests for RepositoriesOstreeOstreeImportCommits with any type of body
func NewRepositoriesOstreeOstreeImportCommitsRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/import_commits/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesOstreeOstreeListRolesRequest generates requests for RepositoriesOstreeOstreeListRoles
func NewRepositoriesOstreeOstreeListRolesRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeListRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/list_roles/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepositoriesOstreeOstreeModifyRequest calls the generic RepositoriesOstreeOstreeModify builder with application/json body
func NewRepositoriesOstreeOstreeModifyRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeModifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesOstreeOstreeModifyRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesOstreeOstreeModifyRequestWithFormdataBody calls the generic RepositoriesOstreeOstreeModify builder with application/x-www-form-urlencoded body
func NewRepositoriesOstreeOstreeModifyRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeModifyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesOstreeOstreeModifyRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesOstreeOstreeModifyRequestWithBody generates requests for RepositoriesOstreeOstreeModify with any type of body
func NewRepositoriesOstreeOstreeModifyRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/modify/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesOstreeOstreeMyPermissionsRequest generates requests for RepositoriesOstreeOstreeMyPermissions
func NewRepositoriesOstreeOstreeMyPermissionsRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeMyPermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/my_permissions/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepositoriesOstreeOstreeRemoveRoleRequest calls the generic RepositoriesOstreeOstreeRemoveRole builder with application/json body
func NewRepositoriesOstreeOstreeRemoveRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeRemoveRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesOstreeOstreeRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesOstreeOstreeRemoveRoleRequestWithFormdataBody calls the generic RepositoriesOstreeOstreeRemoveRole builder with application/x-www-form-urlencoded body
func NewRepositoriesOstreeOstreeRemoveRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeRemoveRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesOstreeOstreeRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesOstreeOstreeRemoveRoleRequestWithBody generates requests for RepositoriesOstreeOstreeRemoveRole with any type of body
func NewRepositoriesOstreeOstreeRemoveRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/remove_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesOstreeOstreeSetLabelRequest calls the generic RepositoriesOstreeOstreeSetLabel builder with application/json body
func NewRepositoriesOstreeOstreeSetLabelRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSetLabelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesOstreeOstreeSetLabelRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesOstreeOstreeSetLabelRequestWithFormdataBody calls the generic RepositoriesOstreeOstreeSetLabel builder with application/x-www-form-urlencoded body
func NewRepositoriesOstreeOstreeSetLabelRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSetLabelFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesOstreeOstreeSetLabelRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesOstreeOstreeSetLabelRequestWithBody generates requests for RepositoriesOstreeOstreeSetLabel with any type of body
func NewRepositoriesOstreeOstreeSetLabelRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/set_label/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesOstreeOstreeSyncRequest calls the generic RepositoriesOstreeOstreeSync builder with application/json body
func NewRepositoriesOstreeOstreeSyncRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesOstreeOstreeSyncRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesOstreeOstreeSyncRequestWithFormdataBody calls the generic RepositoriesOstreeOstreeSync builder with application/x-www-form-urlencoded body
func NewRepositoriesOstreeOstreeSyncRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSyncFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesOstreeOstreeSyncRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesOstreeOstreeSyncRequestWithBody generates requests for RepositoriesOstreeOstreeSync with any type of body
func NewRepositoriesOstreeOstreeSyncRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/sync/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRepositoriesOstreeOstreeUnsetLabelRequest calls the generic RepositoriesOstreeOstreeUnsetLabel builder with application/json body
func NewRepositoriesOstreeOstreeUnsetLabelRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUnsetLabelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRepositoriesOstreeOstreeUnsetLabelRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewRepositoriesOstreeOstreeUnsetLabelRequestWithFormdataBody calls the generic RepositoriesOstreeOstreeUnsetLabel builder with application/x-www-form-urlencoded body
func NewRepositoriesOstreeOstreeUnsetLabelRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUnsetLabelFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRepositoriesOstreeOstreeUnsetLabelRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewRepositoriesOstreeOstreeUnsetLabelRequestWithBody generates requests for RepositoriesOstreeOstreeUnsetLabel with any type of body
func NewRepositoriesOstreeOstreeUnsetLabelRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/repositories/ostree/ostree/%s/unset_label/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTasksListRequest generates requests for TasksList
func NewTasksListRequest(server string, pulpDomain string, params *TasksListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/tasks/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChildTasks != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "child_tasks", runtime.ParamLocationQuery, *params.ChildTasks); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedResources != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_resources", runtime.ParamLocationQuery, *params.CreatedResources); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExclusiveResources != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclusive_resources", runtime.ParamLocationQuery, *params.ExclusiveResources); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExclusiveResourcesIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "exclusive_resources__in", runtime.ParamLocationQuery, *params.ExclusiveResourcesIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FinishedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finished_at", runtime.ParamLocationQuery, *params.FinishedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FinishedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finished_at__gt", runtime.ParamLocationQuery, *params.FinishedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FinishedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finished_at__gte", runtime.ParamLocationQuery, *params.FinishedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FinishedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finished_at__lt", runtime.ParamLocationQuery, *params.FinishedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FinishedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finished_at__lte", runtime.ParamLocationQuery, *params.FinishedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FinishedAtRange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "finished_at__range", runtime.ParamLocationQuery, *params.FinishedAtRange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LoggingCid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logging_cid", runtime.ParamLocationQuery, *params.LoggingCid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LoggingCidContains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logging_cid__contains", runtime.ParamLocationQuery, *params.LoggingCidContains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameContains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__contains", runtime.ParamLocationQuery, *params.NameContains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ne", runtime.ParamLocationQuery, *params.NameNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentTask != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_task", runtime.ParamLocationQuery, *params.ParentTask); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpHrefIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_href__in", runtime.ParamLocationQuery, *params.PulpHrefIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PulpIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pulp_id__in", runtime.ParamLocationQuery, *params.PulpIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReservedResources != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reserved_resources", runtime.ParamLocationQuery, *params.ReservedResources); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReservedResourcesIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reserved_resources__in", runtime.ParamLocationQuery, *params.ReservedResourcesIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SharedResources != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shared_resources", runtime.ParamLocationQuery, *params.SharedResources); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SharedResourcesIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "shared_resources__in", runtime.ParamLocationQuery, *params.SharedResourcesIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at", runtime.ParamLocationQuery, *params.StartedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__gt", runtime.ParamLocationQuery, *params.StartedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__gte", runtime.ParamLocationQuery, *params.StartedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__lt", runtime.ParamLocationQuery, *params.StartedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "started_at__lte", runtime.ParamLocationQuery, *params.StartedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartedAtRange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "started_at__range", runtime.ParamLocationQuery, *params.StartedAtRange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StateIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "state__in", runtime.ParamLocationQuery, *params.StateIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StateNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state__ne", runtime.ParamLocationQuery, *params.StateNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaskGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "task_group", runtime.ParamLocationQuery, *params.TaskGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Worker != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "worker", runtime.ParamLocationQuery, *params.Worker); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WorkerIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "worker__in", runtime.ParamLocationQuery, *params.WorkerIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WorkerIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "worker__isnull", runtime.ParamLocationQuery, *params.WorkerIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTasksPurgeRequest calls the generic TasksPurge builder with application/json body
func NewTasksPurgeRequest(server string, pulpDomain string, body TasksPurgeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTasksPurgeRequestWithBody(server, pulpDomain, "application/json", bodyReader)
}

// NewTasksPurgeRequestWithFormdataBody calls the generic TasksPurge builder with application/x-www-form-urlencoded body
func NewTasksPurgeRequestWithFormdataBody(server string, pulpDomain string, body TasksPurgeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTasksPurgeRequestWithBody(server, pulpDomain, "application/x-www-form-urlencoded", bodyReader)
}

// NewTasksPurgeRequestWithBody generates requests for TasksPurge with any type of body
func NewTasksPurgeRequestWithBody(server string, pulpDomain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/tasks/purge/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTasksDeleteRequest generates requests for TasksDelete
func NewTasksDeleteRequest(server string, pulpDomain string, pulpId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/tasks/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTasksReadRequest generates requests for TasksRead
func NewTasksReadRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *TasksReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/tasks/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTasksCancelRequest calls the generic TasksCancel builder with application/json body
func NewTasksCancelRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body TasksCancelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTasksCancelRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewTasksCancelRequestWithFormdataBody calls the generic TasksCancel builder with application/x-www-form-urlencoded body
func NewTasksCancelRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body TasksCancelFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTasksCancelRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewTasksCancelRequestWithBody generates requests for TasksCancel with any type of body
func NewTasksCancelRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/tasks/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTasksAddRoleRequest calls the generic TasksAddRole builder with application/json body
func NewTasksAddRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body TasksAddRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTasksAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewTasksAddRoleRequestWithFormdataBody calls the generic TasksAddRole builder with application/x-www-form-urlencoded body
func NewTasksAddRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body TasksAddRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTasksAddRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewTasksAddRoleRequestWithBody generates requests for TasksAddRole with any type of body
func NewTasksAddRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/tasks/%s/add_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTasksListRolesRequest generates requests for TasksListRoles
func NewTasksListRolesRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *TasksListRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/tasks/%s/list_roles/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTasksMyPermissionsRequest generates requests for TasksMyPermissions
func NewTasksMyPermissionsRequest(server string, pulpDomain string, pulpId openapi_types.UUID, params *TasksMyPermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/tasks/%s/my_permissions/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTasksRemoveRoleRequest calls the generic TasksRemoveRole builder with application/json body
func NewTasksRemoveRoleRequest(server string, pulpDomain string, pulpId openapi_types.UUID, body TasksRemoveRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTasksRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/json", bodyReader)
}

// NewTasksRemoveRoleRequestWithFormdataBody calls the generic TasksRemoveRole builder with application/x-www-form-urlencoded body
func NewTasksRemoveRoleRequestWithFormdataBody(server string, pulpDomain string, pulpId openapi_types.UUID, body TasksRemoveRoleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTasksRemoveRoleRequestWithBody(server, pulpDomain, pulpId, "application/x-www-form-urlencoded", bodyReader)
}

// NewTasksRemoveRoleRequestWithBody generates requests for TasksRemoveRole with any type of body
func NewTasksRemoveRoleRequestWithBody(server string, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pulp_domain", runtime.ParamLocationPath, pulpDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pulp_id", runtime.ParamLocationPath, pulpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pulp/%s/api/v3/tasks/%s/remove_role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ArtifactsListWithResponse request
	ArtifactsListWithResponse(ctx context.Context, pulpDomain string, params *ArtifactsListParams, reqEditors ...RequestEditorFn) (*ArtifactsListResponse, error)

	// ArtifactsCreateWithBodyWithResponse request with any body
	ArtifactsCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArtifactsCreateResponse, error)

	ArtifactsCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body ArtifactsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ArtifactsCreateResponse, error)

	// ArtifactsDeleteWithResponse request
	ArtifactsDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ArtifactsDeleteResponse, error)

	// ArtifactsReadWithResponse request
	ArtifactsReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ArtifactsReadParams, reqEditors ...RequestEditorFn) (*ArtifactsReadResponse, error)

	// ContentFileFilesListWithResponse request
	ContentFileFilesListWithResponse(ctx context.Context, pulpDomain string, params *ContentFileFilesListParams, reqEditors ...RequestEditorFn) (*ContentFileFilesListResponse, error)

	// ContentFileFilesCreateWithBodyWithResponse request with any body
	ContentFileFilesCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentFileFilesCreateResponse, error)

	ContentFileFilesCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body ContentFileFilesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentFileFilesCreateResponse, error)

	// ContentFileFilesReadWithResponse request
	ContentFileFilesReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentFileFilesReadParams, reqEditors ...RequestEditorFn) (*ContentFileFilesReadResponse, error)

	// ContentOstreeContentListWithResponse request
	ContentOstreeContentListWithResponse(ctx context.Context, pulpDomain string, params *ContentOstreeContentListParams, reqEditors ...RequestEditorFn) (*ContentOstreeContentListResponse, error)

	// ContentOstreeContentCreateWithBodyWithResponse request with any body
	ContentOstreeContentCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentOstreeContentCreateResponse, error)

	ContentOstreeContentCreateWithResponse(ctx context.Context, pulpDomain string, body ContentOstreeContentCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentOstreeContentCreateResponse, error)

	ContentOstreeContentCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body ContentOstreeContentCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentOstreeContentCreateResponse, error)

	// ContentOstreeContentReadWithResponse request
	ContentOstreeContentReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentOstreeContentReadParams, reqEditors ...RequestEditorFn) (*ContentOstreeContentReadResponse, error)

	// ContentguardsCoreCompositeListWithResponse request
	ContentguardsCoreCompositeListWithResponse(ctx context.Context, pulpDomain string, params *ContentguardsCoreCompositeListParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeListResponse, error)

	// ContentguardsCoreCompositeCreateWithBodyWithResponse request with any body
	ContentguardsCoreCompositeCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeCreateResponse, error)

	ContentguardsCoreCompositeCreateWithResponse(ctx context.Context, pulpDomain string, body ContentguardsCoreCompositeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeCreateResponse, error)

	ContentguardsCoreCompositeCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body ContentguardsCoreCompositeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeCreateResponse, error)

	// ContentguardsCoreCompositeDeleteWithResponse request
	ContentguardsCoreCompositeDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeDeleteResponse, error)

	// ContentguardsCoreCompositeReadWithResponse request
	ContentguardsCoreCompositeReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeReadParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeReadResponse, error)

	// ContentguardsCoreCompositePartialUpdateWithBodyWithResponse request with any body
	ContentguardsCoreCompositePartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositePartialUpdateResponse, error)

	ContentguardsCoreCompositePartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositePartialUpdateResponse, error)

	ContentguardsCoreCompositePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositePartialUpdateResponse, error)

	// ContentguardsCoreCompositeUpdateWithBodyWithResponse request with any body
	ContentguardsCoreCompositeUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeUpdateResponse, error)

	ContentguardsCoreCompositeUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeUpdateResponse, error)

	ContentguardsCoreCompositeUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeUpdateResponse, error)

	// ContentguardsCoreCompositeAddRoleWithBodyWithResponse request with any body
	ContentguardsCoreCompositeAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeAddRoleResponse, error)

	ContentguardsCoreCompositeAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeAddRoleResponse, error)

	ContentguardsCoreCompositeAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeAddRoleResponse, error)

	// ContentguardsCoreCompositeListRolesWithResponse request
	ContentguardsCoreCompositeListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeListRolesParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeListRolesResponse, error)

	// ContentguardsCoreCompositeMyPermissionsWithResponse request
	ContentguardsCoreCompositeMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeMyPermissionsParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeMyPermissionsResponse, error)

	// ContentguardsCoreCompositeRemoveRoleWithBodyWithResponse request with any body
	ContentguardsCoreCompositeRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeRemoveRoleResponse, error)

	ContentguardsCoreCompositeRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeRemoveRoleResponse, error)

	ContentguardsCoreCompositeRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeRemoveRoleResponse, error)

	// ContentguardsCoreHeaderListWithResponse request
	ContentguardsCoreHeaderListWithResponse(ctx context.Context, pulpDomain string, params *ContentguardsCoreHeaderListParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderListResponse, error)

	// ContentguardsCoreHeaderCreateWithBodyWithResponse request with any body
	ContentguardsCoreHeaderCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderCreateResponse, error)

	ContentguardsCoreHeaderCreateWithResponse(ctx context.Context, pulpDomain string, body ContentguardsCoreHeaderCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderCreateResponse, error)

	ContentguardsCoreHeaderCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body ContentguardsCoreHeaderCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderCreateResponse, error)

	// ContentguardsCoreHeaderDeleteWithResponse request
	ContentguardsCoreHeaderDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderDeleteResponse, error)

	// ContentguardsCoreHeaderReadWithResponse request
	ContentguardsCoreHeaderReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderReadParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderReadResponse, error)

	// ContentguardsCoreHeaderPartialUpdateWithBodyWithResponse request with any body
	ContentguardsCoreHeaderPartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderPartialUpdateResponse, error)

	ContentguardsCoreHeaderPartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderPartialUpdateResponse, error)

	ContentguardsCoreHeaderPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderPartialUpdateResponse, error)

	// ContentguardsCoreHeaderUpdateWithBodyWithResponse request with any body
	ContentguardsCoreHeaderUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderUpdateResponse, error)

	ContentguardsCoreHeaderUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderUpdateResponse, error)

	ContentguardsCoreHeaderUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderUpdateResponse, error)

	// ContentguardsCoreHeaderAddRoleWithBodyWithResponse request with any body
	ContentguardsCoreHeaderAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderAddRoleResponse, error)

	ContentguardsCoreHeaderAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderAddRoleResponse, error)

	ContentguardsCoreHeaderAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderAddRoleResponse, error)

	// ContentguardsCoreHeaderListRolesWithResponse request
	ContentguardsCoreHeaderListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderListRolesParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderListRolesResponse, error)

	// ContentguardsCoreHeaderMyPermissionsWithResponse request
	ContentguardsCoreHeaderMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderMyPermissionsParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderMyPermissionsResponse, error)

	// ContentguardsCoreHeaderRemoveRoleWithBodyWithResponse request with any body
	ContentguardsCoreHeaderRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderRemoveRoleResponse, error)

	ContentguardsCoreHeaderRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderRemoveRoleResponse, error)

	ContentguardsCoreHeaderRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderRemoveRoleResponse, error)

	// ContentguardsCoreRbacListWithResponse request
	ContentguardsCoreRbacListWithResponse(ctx context.Context, pulpDomain string, params *ContentguardsCoreRbacListParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacListResponse, error)

	// ContentguardsCoreRbacCreateWithBodyWithResponse request with any body
	ContentguardsCoreRbacCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacCreateResponse, error)

	ContentguardsCoreRbacCreateWithResponse(ctx context.Context, pulpDomain string, body ContentguardsCoreRbacCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacCreateResponse, error)

	ContentguardsCoreRbacCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body ContentguardsCoreRbacCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacCreateResponse, error)

	// ContentguardsCoreRbacDeleteWithResponse request
	ContentguardsCoreRbacDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacDeleteResponse, error)

	// ContentguardsCoreRbacReadWithResponse request
	ContentguardsCoreRbacReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacReadParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacReadResponse, error)

	// ContentguardsCoreRbacPartialUpdateWithBodyWithResponse request with any body
	ContentguardsCoreRbacPartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacPartialUpdateResponse, error)

	ContentguardsCoreRbacPartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacPartialUpdateResponse, error)

	ContentguardsCoreRbacPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacPartialUpdateResponse, error)

	// ContentguardsCoreRbacUpdateWithBodyWithResponse request with any body
	ContentguardsCoreRbacUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacUpdateResponse, error)

	ContentguardsCoreRbacUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacUpdateResponse, error)

	ContentguardsCoreRbacUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacUpdateResponse, error)

	// ContentguardsCoreRbacAddRoleWithBodyWithResponse request with any body
	ContentguardsCoreRbacAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacAddRoleResponse, error)

	ContentguardsCoreRbacAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacAddRoleResponse, error)

	ContentguardsCoreRbacAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacAddRoleResponse, error)

	// ContentguardsCoreRbacListRolesWithResponse request
	ContentguardsCoreRbacListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacListRolesParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacListRolesResponse, error)

	// ContentguardsCoreRbacMyPermissionsWithResponse request
	ContentguardsCoreRbacMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacMyPermissionsParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacMyPermissionsResponse, error)

	// ContentguardsCoreRbacRemoveRoleWithBodyWithResponse request with any body
	ContentguardsCoreRbacRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacRemoveRoleResponse, error)

	ContentguardsCoreRbacRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacRemoveRoleResponse, error)

	ContentguardsCoreRbacRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacRemoveRoleResponse, error)

	// DistributionsOstreeOstreeListWithResponse request
	DistributionsOstreeOstreeListWithResponse(ctx context.Context, pulpDomain string, params *DistributionsOstreeOstreeListParams, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeListResponse, error)

	// DistributionsOstreeOstreeCreateWithBodyWithResponse request with any body
	DistributionsOstreeOstreeCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeCreateResponse, error)

	DistributionsOstreeOstreeCreateWithResponse(ctx context.Context, pulpDomain string, body DistributionsOstreeOstreeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeCreateResponse, error)

	DistributionsOstreeOstreeCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body DistributionsOstreeOstreeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeCreateResponse, error)

	// DistributionsOstreeOstreeDeleteWithResponse request
	DistributionsOstreeOstreeDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeDeleteResponse, error)

	// DistributionsOstreeOstreeReadWithResponse request
	DistributionsOstreeOstreeReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeReadParams, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeReadResponse, error)

	// DistributionsOstreeOstreePartialUpdateWithBodyWithResponse request with any body
	DistributionsOstreeOstreePartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreePartialUpdateResponse, error)

	DistributionsOstreeOstreePartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreePartialUpdateResponse, error)

	DistributionsOstreeOstreePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreePartialUpdateResponse, error)

	// DistributionsOstreeOstreeUpdateWithBodyWithResponse request with any body
	DistributionsOstreeOstreeUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeUpdateResponse, error)

	DistributionsOstreeOstreeUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeUpdateResponse, error)

	DistributionsOstreeOstreeUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeUpdateResponse, error)

	// DistributionsOstreeOstreeAddRoleWithBodyWithResponse request with any body
	DistributionsOstreeOstreeAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeAddRoleResponse, error)

	DistributionsOstreeOstreeAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeAddRoleResponse, error)

	DistributionsOstreeOstreeAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeAddRoleResponse, error)

	// DistributionsOstreeOstreeListRolesWithResponse request
	DistributionsOstreeOstreeListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeListRolesParams, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeListRolesResponse, error)

	// DistributionsOstreeOstreeMyPermissionsWithResponse request
	DistributionsOstreeOstreeMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeMyPermissionsParams, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeMyPermissionsResponse, error)

	// DistributionsOstreeOstreeRemoveRoleWithBodyWithResponse request with any body
	DistributionsOstreeOstreeRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeRemoveRoleResponse, error)

	DistributionsOstreeOstreeRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeRemoveRoleResponse, error)

	DistributionsOstreeOstreeRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeRemoveRoleResponse, error)

	// DistributionsOstreeOstreeSetLabelWithBodyWithResponse request with any body
	DistributionsOstreeOstreeSetLabelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeSetLabelResponse, error)

	DistributionsOstreeOstreeSetLabelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeSetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeSetLabelResponse, error)

	DistributionsOstreeOstreeSetLabelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeSetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeSetLabelResponse, error)

	// DistributionsOstreeOstreeUnsetLabelWithBodyWithResponse request with any body
	DistributionsOstreeOstreeUnsetLabelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeUnsetLabelResponse, error)

	DistributionsOstreeOstreeUnsetLabelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUnsetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeUnsetLabelResponse, error)

	DistributionsOstreeOstreeUnsetLabelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUnsetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeUnsetLabelResponse, error)

	// DomainsListWithResponse request
	DomainsListWithResponse(ctx context.Context, pulpDomain string, params *DomainsListParams, reqEditors ...RequestEditorFn) (*DomainsListResponse, error)

	// DomainsCreateWithBodyWithResponse request with any body
	DomainsCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsCreateResponse, error)

	DomainsCreateWithResponse(ctx context.Context, pulpDomain string, body DomainsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsCreateResponse, error)

	DomainsCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body DomainsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsCreateResponse, error)

	// DomainsDeleteWithResponse request
	DomainsDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DomainsDeleteResponse, error)

	// DomainsReadWithResponse request
	DomainsReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DomainsReadParams, reqEditors ...RequestEditorFn) (*DomainsReadResponse, error)

	// DomainsPartialUpdateWithBodyWithResponse request with any body
	DomainsPartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsPartialUpdateResponse, error)

	DomainsPartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsPartialUpdateResponse, error)

	DomainsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsPartialUpdateResponse, error)

	// DomainsUpdateWithBodyWithResponse request with any body
	DomainsUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsUpdateResponse, error)

	DomainsUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsUpdateResponse, error)

	DomainsUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsUpdateResponse, error)

	// RepositoriesFileFileListWithResponse request
	RepositoriesFileFileListWithResponse(ctx context.Context, pulpDomain string, params *RepositoriesFileFileListParams, reqEditors ...RequestEditorFn) (*RepositoriesFileFileListResponse, error)

	// RepositoriesFileFileCreateWithBodyWithResponse request with any body
	RepositoriesFileFileCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileCreateResponse, error)

	RepositoriesFileFileCreateWithResponse(ctx context.Context, pulpDomain string, body RepositoriesFileFileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileCreateResponse, error)

	RepositoriesFileFileCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body RepositoriesFileFileCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileCreateResponse, error)

	// RepositoriesFileFileDeleteWithResponse request
	RepositoriesFileFileDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*RepositoriesFileFileDeleteResponse, error)

	// RepositoriesFileFileReadWithResponse request
	RepositoriesFileFileReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileReadParams, reqEditors ...RequestEditorFn) (*RepositoriesFileFileReadResponse, error)

	// RepositoriesFileFilePartialUpdateWithBodyWithResponse request with any body
	RepositoriesFileFilePartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFilePartialUpdateResponse, error)

	RepositoriesFileFilePartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFilePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFilePartialUpdateResponse, error)

	RepositoriesFileFilePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFilePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFilePartialUpdateResponse, error)

	// RepositoriesFileFileUpdateWithBodyWithResponse request with any body
	RepositoriesFileFileUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileUpdateResponse, error)

	RepositoriesFileFileUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileUpdateResponse, error)

	RepositoriesFileFileUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileUpdateResponse, error)

	// RepositoriesFileFileAddRoleWithBodyWithResponse request with any body
	RepositoriesFileFileAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileAddRoleResponse, error)

	RepositoriesFileFileAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileAddRoleResponse, error)

	RepositoriesFileFileAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileAddRoleResponse, error)

	// RepositoriesFileFileListRolesWithResponse request
	RepositoriesFileFileListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileListRolesParams, reqEditors ...RequestEditorFn) (*RepositoriesFileFileListRolesResponse, error)

	// RepositoriesFileFileModifyWithBodyWithResponse request with any body
	RepositoriesFileFileModifyWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileModifyResponse, error)

	RepositoriesFileFileModifyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileModifyJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileModifyResponse, error)

	RepositoriesFileFileModifyWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileModifyFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileModifyResponse, error)

	// RepositoriesFileFileMyPermissionsWithResponse request
	RepositoriesFileFileMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileMyPermissionsParams, reqEditors ...RequestEditorFn) (*RepositoriesFileFileMyPermissionsResponse, error)

	// RepositoriesFileFileRemoveRoleWithBodyWithResponse request with any body
	RepositoriesFileFileRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileRemoveRoleResponse, error)

	RepositoriesFileFileRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileRemoveRoleResponse, error)

	RepositoriesFileFileRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileRemoveRoleResponse, error)

	// RepositoriesFileFileSetLabelWithBodyWithResponse request with any body
	RepositoriesFileFileSetLabelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileSetLabelResponse, error)

	RepositoriesFileFileSetLabelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileSetLabelResponse, error)

	RepositoriesFileFileSetLabelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileSetLabelResponse, error)

	// RepositoriesFileFileSyncWithBodyWithResponse request with any body
	RepositoriesFileFileSyncWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileSyncResponse, error)

	RepositoriesFileFileSyncWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileSyncResponse, error)

	RepositoriesFileFileSyncWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSyncFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileSyncResponse, error)

	// RepositoriesFileFileUnsetLabelWithBodyWithResponse request with any body
	RepositoriesFileFileUnsetLabelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileUnsetLabelResponse, error)

	RepositoriesFileFileUnsetLabelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUnsetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileUnsetLabelResponse, error)

	RepositoriesFileFileUnsetLabelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUnsetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileUnsetLabelResponse, error)

	// RepositoriesFileFileVersionsListWithResponse request
	RepositoriesFileFileVersionsListWithResponse(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, params *RepositoriesFileFileVersionsListParams, reqEditors ...RequestEditorFn) (*RepositoriesFileFileVersionsListResponse, error)

	// RepositoriesFileFileVersionsDeleteWithResponse request
	RepositoriesFileFileVersionsDeleteWithResponse(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, reqEditors ...RequestEditorFn) (*RepositoriesFileFileVersionsDeleteResponse, error)

	// RepositoriesFileFileVersionsReadWithResponse request
	RepositoriesFileFileVersionsReadWithResponse(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, params *RepositoriesFileFileVersionsReadParams, reqEditors ...RequestEditorFn) (*RepositoriesFileFileVersionsReadResponse, error)

	// RepositoriesFileFileVersionsRepairWithBodyWithResponse request with any body
	RepositoriesFileFileVersionsRepairWithBodyWithResponse(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileVersionsRepairResponse, error)

	RepositoriesFileFileVersionsRepairWithResponse(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, body RepositoriesFileFileVersionsRepairJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileVersionsRepairResponse, error)

	RepositoriesFileFileVersionsRepairWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, body RepositoriesFileFileVersionsRepairFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileVersionsRepairResponse, error)

	// RepositoriesOstreeOstreeListWithResponse request
	RepositoriesOstreeOstreeListWithResponse(ctx context.Context, pulpDomain string, params *RepositoriesOstreeOstreeListParams, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeListResponse, error)

	// RepositoriesOstreeOstreeCreateWithBodyWithResponse request with any body
	RepositoriesOstreeOstreeCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeCreateResponse, error)

	RepositoriesOstreeOstreeCreateWithResponse(ctx context.Context, pulpDomain string, body RepositoriesOstreeOstreeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeCreateResponse, error)

	RepositoriesOstreeOstreeCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body RepositoriesOstreeOstreeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeCreateResponse, error)

	// RepositoriesOstreeOstreeDeleteWithResponse request
	RepositoriesOstreeOstreeDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeDeleteResponse, error)

	// RepositoriesOstreeOstreeReadWithResponse request
	RepositoriesOstreeOstreeReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeReadParams, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeReadResponse, error)

	// RepositoriesOstreeOstreePartialUpdateWithBodyWithResponse request with any body
	RepositoriesOstreeOstreePartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreePartialUpdateResponse, error)

	RepositoriesOstreeOstreePartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreePartialUpdateResponse, error)

	RepositoriesOstreeOstreePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreePartialUpdateResponse, error)

	// RepositoriesOstreeOstreeUpdateWithBodyWithResponse request with any body
	RepositoriesOstreeOstreeUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeUpdateResponse, error)

	RepositoriesOstreeOstreeUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeUpdateResponse, error)

	RepositoriesOstreeOstreeUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeUpdateResponse, error)

	// RepositoriesOstreeOstreeAddRoleWithBodyWithResponse request with any body
	RepositoriesOstreeOstreeAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeAddRoleResponse, error)

	RepositoriesOstreeOstreeAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeAddRoleResponse, error)

	RepositoriesOstreeOstreeAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeAddRoleResponse, error)

	// RepositoriesOstreeOstreeImportAllWithBodyWithResponse request with any body
	RepositoriesOstreeOstreeImportAllWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeImportAllResponse, error)

	RepositoriesOstreeOstreeImportAllWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportAllJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeImportAllResponse, error)

	RepositoriesOstreeOstreeImportAllWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportAllFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeImportAllResponse, error)

	// RepositoriesOstreeOstreeImportCommitsWithBodyWithResponse request with any body
	RepositoriesOstreeOstreeImportCommitsWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeImportCommitsResponse, error)

	RepositoriesOstreeOstreeImportCommitsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportCommitsJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeImportCommitsResponse, error)

	RepositoriesOstreeOstreeImportCommitsWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportCommitsFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeImportCommitsResponse, error)

	// RepositoriesOstreeOstreeListRolesWithResponse request
	RepositoriesOstreeOstreeListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeListRolesParams, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeListRolesResponse, error)

	// RepositoriesOstreeOstreeModifyWithBodyWithResponse request with any body
	RepositoriesOstreeOstreeModifyWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeModifyResponse, error)

	RepositoriesOstreeOstreeModifyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeModifyJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeModifyResponse, error)

	RepositoriesOstreeOstreeModifyWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeModifyFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeModifyResponse, error)

	// RepositoriesOstreeOstreeMyPermissionsWithResponse request
	RepositoriesOstreeOstreeMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeMyPermissionsParams, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeMyPermissionsResponse, error)

	// RepositoriesOstreeOstreeRemoveRoleWithBodyWithResponse request with any body
	RepositoriesOstreeOstreeRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeRemoveRoleResponse, error)

	RepositoriesOstreeOstreeRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeRemoveRoleResponse, error)

	RepositoriesOstreeOstreeRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeRemoveRoleResponse, error)

	// RepositoriesOstreeOstreeSetLabelWithBodyWithResponse request with any body
	RepositoriesOstreeOstreeSetLabelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeSetLabelResponse, error)

	RepositoriesOstreeOstreeSetLabelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeSetLabelResponse, error)

	RepositoriesOstreeOstreeSetLabelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeSetLabelResponse, error)

	// RepositoriesOstreeOstreeSyncWithBodyWithResponse request with any body
	RepositoriesOstreeOstreeSyncWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeSyncResponse, error)

	RepositoriesOstreeOstreeSyncWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeSyncResponse, error)

	RepositoriesOstreeOstreeSyncWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSyncFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeSyncResponse, error)

	// RepositoriesOstreeOstreeUnsetLabelWithBodyWithResponse request with any body
	RepositoriesOstreeOstreeUnsetLabelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeUnsetLabelResponse, error)

	RepositoriesOstreeOstreeUnsetLabelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUnsetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeUnsetLabelResponse, error)

	RepositoriesOstreeOstreeUnsetLabelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUnsetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeUnsetLabelResponse, error)

	// TasksListWithResponse request
	TasksListWithResponse(ctx context.Context, pulpDomain string, params *TasksListParams, reqEditors ...RequestEditorFn) (*TasksListResponse, error)

	// TasksPurgeWithBodyWithResponse request with any body
	TasksPurgeWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TasksPurgeResponse, error)

	TasksPurgeWithResponse(ctx context.Context, pulpDomain string, body TasksPurgeJSONRequestBody, reqEditors ...RequestEditorFn) (*TasksPurgeResponse, error)

	TasksPurgeWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body TasksPurgeFormdataRequestBody, reqEditors ...RequestEditorFn) (*TasksPurgeResponse, error)

	// TasksDeleteWithResponse request
	TasksDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*TasksDeleteResponse, error)

	// TasksReadWithResponse request
	TasksReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *TasksReadParams, reqEditors ...RequestEditorFn) (*TasksReadResponse, error)

	// TasksCancelWithBodyWithResponse request with any body
	TasksCancelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TasksCancelResponse, error)

	TasksCancelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*TasksCancelResponse, error)

	TasksCancelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksCancelFormdataRequestBody, reqEditors ...RequestEditorFn) (*TasksCancelResponse, error)

	// TasksAddRoleWithBodyWithResponse request with any body
	TasksAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TasksAddRoleResponse, error)

	TasksAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*TasksAddRoleResponse, error)

	TasksAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*TasksAddRoleResponse, error)

	// TasksListRolesWithResponse request
	TasksListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *TasksListRolesParams, reqEditors ...RequestEditorFn) (*TasksListRolesResponse, error)

	// TasksMyPermissionsWithResponse request
	TasksMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *TasksMyPermissionsParams, reqEditors ...RequestEditorFn) (*TasksMyPermissionsResponse, error)

	// TasksRemoveRoleWithBodyWithResponse request with any body
	TasksRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TasksRemoveRoleResponse, error)

	TasksRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*TasksRemoveRoleResponse, error)

	TasksRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*TasksRemoveRoleResponse, error)
}

type ArtifactsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedArtifactResponseList
}

// Status returns HTTPResponse.Status
func (r ArtifactsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArtifactsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArtifactsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ArtifactResponse
}

// Status returns HTTPResponse.Status
func (r ArtifactsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArtifactsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArtifactsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArtifactsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArtifactsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArtifactsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactResponse
}

// Status returns HTTPResponse.Status
func (r ArtifactsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArtifactsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentFileFilesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedfileFileContentResponseList
}

// Status returns HTTPResponse.Status
func (r ContentFileFilesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentFileFilesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentFileFilesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r ContentFileFilesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentFileFilesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentFileFilesReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileFileContentResponse
}

// Status returns HTTPResponse.Status
func (r ContentFileFilesReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentFileFilesReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentOstreeContentListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedostreeOstreeContentResponseList
}

// Status returns HTTPResponse.Status
func (r ContentOstreeContentListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentOstreeContentListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentOstreeContentCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r ContentOstreeContentCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentOstreeContentCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentOstreeContentReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OstreeOstreeContentResponse
}

// Status returns HTTPResponse.Status
func (r ContentOstreeContentReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentOstreeContentReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreCompositeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCompositeContentGuardResponseList
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreCompositeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreCompositeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreCompositeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CompositeContentGuardResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreCompositeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreCompositeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreCompositeDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreCompositeDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreCompositeDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreCompositeReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompositeContentGuardResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreCompositeReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreCompositeReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreCompositePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompositeContentGuardResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreCompositePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreCompositePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreCompositeUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompositeContentGuardResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreCompositeUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreCompositeUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreCompositeAddRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreCompositeAddRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreCompositeAddRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreCompositeListRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectRolesResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreCompositeListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreCompositeListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreCompositeMyPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyPermissionsResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreCompositeMyPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreCompositeMyPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreCompositeRemoveRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreCompositeRemoveRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreCompositeRemoveRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreHeaderListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedHeaderContentGuardResponseList
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreHeaderListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreHeaderListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreHeaderCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HeaderContentGuardResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreHeaderCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreHeaderCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreHeaderDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreHeaderDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreHeaderDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreHeaderReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HeaderContentGuardResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreHeaderReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreHeaderReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreHeaderPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HeaderContentGuardResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreHeaderPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreHeaderPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreHeaderUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HeaderContentGuardResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreHeaderUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreHeaderUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreHeaderAddRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreHeaderAddRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreHeaderAddRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreHeaderListRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectRolesResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreHeaderListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreHeaderListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreHeaderMyPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyPermissionsResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreHeaderMyPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreHeaderMyPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreHeaderRemoveRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreHeaderRemoveRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreHeaderRemoveRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreRbacListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRBACContentGuardResponseList
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreRbacListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreRbacListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreRbacCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RBACContentGuardResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreRbacCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreRbacCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreRbacDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreRbacDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreRbacDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreRbacReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RBACContentGuardResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreRbacReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreRbacReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreRbacPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RBACContentGuardResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreRbacPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreRbacPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreRbacUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RBACContentGuardResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreRbacUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreRbacUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreRbacAddRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreRbacAddRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreRbacAddRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreRbacListRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectRolesResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreRbacListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreRbacListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreRbacMyPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyPermissionsResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreRbacMyPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreRbacMyPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentguardsCoreRbacRemoveRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r ContentguardsCoreRbacRemoveRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentguardsCoreRbacRemoveRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DistributionsOstreeOstreeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedostreeOstreeDistributionResponseList
}

// Status returns HTTPResponse.Status
func (r DistributionsOstreeOstreeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DistributionsOstreeOstreeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DistributionsOstreeOstreeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r DistributionsOstreeOstreeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DistributionsOstreeOstreeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DistributionsOstreeOstreeDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r DistributionsOstreeOstreeDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DistributionsOstreeOstreeDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DistributionsOstreeOstreeReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OstreeOstreeDistributionResponse
}

// Status returns HTTPResponse.Status
func (r DistributionsOstreeOstreeReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DistributionsOstreeOstreeReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DistributionsOstreeOstreePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r DistributionsOstreeOstreePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DistributionsOstreeOstreePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DistributionsOstreeOstreeUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r DistributionsOstreeOstreeUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DistributionsOstreeOstreeUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DistributionsOstreeOstreeAddRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r DistributionsOstreeOstreeAddRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DistributionsOstreeOstreeAddRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DistributionsOstreeOstreeListRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectRolesResponse
}

// Status returns HTTPResponse.Status
func (r DistributionsOstreeOstreeListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DistributionsOstreeOstreeListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DistributionsOstreeOstreeMyPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyPermissionsResponse
}

// Status returns HTTPResponse.Status
func (r DistributionsOstreeOstreeMyPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DistributionsOstreeOstreeMyPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DistributionsOstreeOstreeRemoveRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r DistributionsOstreeOstreeRemoveRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DistributionsOstreeOstreeRemoveRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DistributionsOstreeOstreeSetLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetLabelResponse
}

// Status returns HTTPResponse.Status
func (r DistributionsOstreeOstreeSetLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DistributionsOstreeOstreeSetLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DistributionsOstreeOstreeUnsetLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UnsetLabelResponse
}

// Status returns HTTPResponse.Status
func (r DistributionsOstreeOstreeUnsetLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DistributionsOstreeOstreeUnsetLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDomainResponseList
}

// Status returns HTTPResponse.Status
func (r DomainsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DomainResponse
}

// Status returns HTTPResponse.Status
func (r DomainsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r DomainsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainResponse
}

// Status returns HTTPResponse.Status
func (r DomainsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r DomainsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r DomainsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedfileFileRepositoryResponseList
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FileFileRepositoryResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileFileRepositoryResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFilePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFilePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFilePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileAddRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileAddRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileAddRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileListRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectRolesResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileModifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileModifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileModifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileMyPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyPermissionsResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileMyPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileMyPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileRemoveRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileRemoveRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileRemoveRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileSetLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SetLabelResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileSetLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileSetLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileUnsetLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UnsetLabelResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileUnsetLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileUnsetLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileVersionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRepositoryVersionResponseList
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileVersionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileVersionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileVersionsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileVersionsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileVersionsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileVersionsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepositoryVersionResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileVersionsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileVersionsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesFileFileVersionsRepairResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesFileFileVersionsRepairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesFileFileVersionsRepairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedostreeOstreeRepositoryResponseList
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OstreeOstreeRepositoryResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OstreeOstreeRepositoryResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeAddRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeAddRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeAddRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeImportAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeImportAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeImportAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeImportCommitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeImportCommitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeImportCommitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeListRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectRolesResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeModifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeModifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeModifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeMyPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyPermissionsResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeMyPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeMyPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeRemoveRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeRemoveRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeRemoveRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeSetLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SetLabelResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeSetLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeSetLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepositoriesOstreeOstreeUnsetLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UnsetLabelResponse
}

// Status returns HTTPResponse.Status
func (r RepositoriesOstreeOstreeUnsetLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepositoriesOstreeOstreeUnsetLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TasksListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTaskResponseList
}

// Status returns HTTPResponse.Status
func (r TasksListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TasksListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TasksPurgeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AsyncOperationResponse
}

// Status returns HTTPResponse.Status
func (r TasksPurgeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TasksPurgeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TasksDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TasksDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TasksDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TasksReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskResponse
}

// Status returns HTTPResponse.Status
func (r TasksReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TasksReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TasksCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskResponse
	JSON409      *TaskResponse
}

// Status returns HTTPResponse.Status
func (r TasksCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TasksCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TasksAddRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r TasksAddRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TasksAddRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TasksListRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectRolesResponse
}

// Status returns HTTPResponse.Status
func (r TasksListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TasksListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TasksMyPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyPermissionsResponse
}

// Status returns HTTPResponse.Status
func (r TasksMyPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TasksMyPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TasksRemoveRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NestedRoleResponse
}

// Status returns HTTPResponse.Status
func (r TasksRemoveRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TasksRemoveRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ArtifactsListWithResponse request returning *ArtifactsListResponse
func (c *ClientWithResponses) ArtifactsListWithResponse(ctx context.Context, pulpDomain string, params *ArtifactsListParams, reqEditors ...RequestEditorFn) (*ArtifactsListResponse, error) {
	rsp, err := c.ArtifactsList(ctx, pulpDomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArtifactsListResponse(rsp)
}

// ArtifactsCreateWithBodyWithResponse request with arbitrary body returning *ArtifactsCreateResponse
func (c *ClientWithResponses) ArtifactsCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArtifactsCreateResponse, error) {
	rsp, err := c.ArtifactsCreateWithBody(ctx, pulpDomain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArtifactsCreateResponse(rsp)
}

func (c *ClientWithResponses) ArtifactsCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body ArtifactsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ArtifactsCreateResponse, error) {
	rsp, err := c.ArtifactsCreateWithFormdataBody(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArtifactsCreateResponse(rsp)
}

// ArtifactsDeleteWithResponse request returning *ArtifactsDeleteResponse
func (c *ClientWithResponses) ArtifactsDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ArtifactsDeleteResponse, error) {
	rsp, err := c.ArtifactsDelete(ctx, pulpDomain, pulpId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArtifactsDeleteResponse(rsp)
}

// ArtifactsReadWithResponse request returning *ArtifactsReadResponse
func (c *ClientWithResponses) ArtifactsReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ArtifactsReadParams, reqEditors ...RequestEditorFn) (*ArtifactsReadResponse, error) {
	rsp, err := c.ArtifactsRead(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArtifactsReadResponse(rsp)
}

// ContentFileFilesListWithResponse request returning *ContentFileFilesListResponse
func (c *ClientWithResponses) ContentFileFilesListWithResponse(ctx context.Context, pulpDomain string, params *ContentFileFilesListParams, reqEditors ...RequestEditorFn) (*ContentFileFilesListResponse, error) {
	rsp, err := c.ContentFileFilesList(ctx, pulpDomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentFileFilesListResponse(rsp)
}

// ContentFileFilesCreateWithBodyWithResponse request with arbitrary body returning *ContentFileFilesCreateResponse
func (c *ClientWithResponses) ContentFileFilesCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentFileFilesCreateResponse, error) {
	rsp, err := c.ContentFileFilesCreateWithBody(ctx, pulpDomain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentFileFilesCreateResponse(rsp)
}

func (c *ClientWithResponses) ContentFileFilesCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body ContentFileFilesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentFileFilesCreateResponse, error) {
	rsp, err := c.ContentFileFilesCreateWithFormdataBody(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentFileFilesCreateResponse(rsp)
}

// ContentFileFilesReadWithResponse request returning *ContentFileFilesReadResponse
func (c *ClientWithResponses) ContentFileFilesReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentFileFilesReadParams, reqEditors ...RequestEditorFn) (*ContentFileFilesReadResponse, error) {
	rsp, err := c.ContentFileFilesRead(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentFileFilesReadResponse(rsp)
}

// ContentOstreeContentListWithResponse request returning *ContentOstreeContentListResponse
func (c *ClientWithResponses) ContentOstreeContentListWithResponse(ctx context.Context, pulpDomain string, params *ContentOstreeContentListParams, reqEditors ...RequestEditorFn) (*ContentOstreeContentListResponse, error) {
	rsp, err := c.ContentOstreeContentList(ctx, pulpDomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentOstreeContentListResponse(rsp)
}

// ContentOstreeContentCreateWithBodyWithResponse request with arbitrary body returning *ContentOstreeContentCreateResponse
func (c *ClientWithResponses) ContentOstreeContentCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentOstreeContentCreateResponse, error) {
	rsp, err := c.ContentOstreeContentCreateWithBody(ctx, pulpDomain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentOstreeContentCreateResponse(rsp)
}

func (c *ClientWithResponses) ContentOstreeContentCreateWithResponse(ctx context.Context, pulpDomain string, body ContentOstreeContentCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentOstreeContentCreateResponse, error) {
	rsp, err := c.ContentOstreeContentCreate(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentOstreeContentCreateResponse(rsp)
}

func (c *ClientWithResponses) ContentOstreeContentCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body ContentOstreeContentCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentOstreeContentCreateResponse, error) {
	rsp, err := c.ContentOstreeContentCreateWithFormdataBody(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentOstreeContentCreateResponse(rsp)
}

// ContentOstreeContentReadWithResponse request returning *ContentOstreeContentReadResponse
func (c *ClientWithResponses) ContentOstreeContentReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentOstreeContentReadParams, reqEditors ...RequestEditorFn) (*ContentOstreeContentReadResponse, error) {
	rsp, err := c.ContentOstreeContentRead(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentOstreeContentReadResponse(rsp)
}

// ContentguardsCoreCompositeListWithResponse request returning *ContentguardsCoreCompositeListResponse
func (c *ClientWithResponses) ContentguardsCoreCompositeListWithResponse(ctx context.Context, pulpDomain string, params *ContentguardsCoreCompositeListParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeListResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeList(ctx, pulpDomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeListResponse(rsp)
}

// ContentguardsCoreCompositeCreateWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreCompositeCreateResponse
func (c *ClientWithResponses) ContentguardsCoreCompositeCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeCreateResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeCreateWithBody(ctx, pulpDomain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeCreateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreCompositeCreateWithResponse(ctx context.Context, pulpDomain string, body ContentguardsCoreCompositeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeCreateResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeCreate(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeCreateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreCompositeCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body ContentguardsCoreCompositeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeCreateResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeCreateWithFormdataBody(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeCreateResponse(rsp)
}

// ContentguardsCoreCompositeDeleteWithResponse request returning *ContentguardsCoreCompositeDeleteResponse
func (c *ClientWithResponses) ContentguardsCoreCompositeDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeDeleteResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeDelete(ctx, pulpDomain, pulpId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeDeleteResponse(rsp)
}

// ContentguardsCoreCompositeReadWithResponse request returning *ContentguardsCoreCompositeReadResponse
func (c *ClientWithResponses) ContentguardsCoreCompositeReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeReadParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeReadResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeRead(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeReadResponse(rsp)
}

// ContentguardsCoreCompositePartialUpdateWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreCompositePartialUpdateResponse
func (c *ClientWithResponses) ContentguardsCoreCompositePartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositePartialUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreCompositePartialUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreCompositePartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositePartialUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreCompositePartialUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreCompositePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositePartialUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreCompositePartialUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositePartialUpdateResponse(rsp)
}

// ContentguardsCoreCompositeUpdateWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreCompositeUpdateResponse
func (c *ClientWithResponses) ContentguardsCoreCompositeUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreCompositeUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreCompositeUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeUpdateResponse(rsp)
}

// ContentguardsCoreCompositeAddRoleWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreCompositeAddRoleResponse
func (c *ClientWithResponses) ContentguardsCoreCompositeAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeAddRoleResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeAddRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeAddRoleResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreCompositeAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeAddRoleResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeAddRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeAddRoleResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreCompositeAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeAddRoleResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeAddRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeAddRoleResponse(rsp)
}

// ContentguardsCoreCompositeListRolesWithResponse request returning *ContentguardsCoreCompositeListRolesResponse
func (c *ClientWithResponses) ContentguardsCoreCompositeListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeListRolesParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeListRolesResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeListRoles(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeListRolesResponse(rsp)
}

// ContentguardsCoreCompositeMyPermissionsWithResponse request returning *ContentguardsCoreCompositeMyPermissionsResponse
func (c *ClientWithResponses) ContentguardsCoreCompositeMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreCompositeMyPermissionsParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeMyPermissionsResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeMyPermissions(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeMyPermissionsResponse(rsp)
}

// ContentguardsCoreCompositeRemoveRoleWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreCompositeRemoveRoleResponse
func (c *ClientWithResponses) ContentguardsCoreCompositeRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeRemoveRoleResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeRemoveRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreCompositeRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeRemoveRoleResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeRemoveRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreCompositeRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreCompositeRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreCompositeRemoveRoleResponse, error) {
	rsp, err := c.ContentguardsCoreCompositeRemoveRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreCompositeRemoveRoleResponse(rsp)
}

// ContentguardsCoreHeaderListWithResponse request returning *ContentguardsCoreHeaderListResponse
func (c *ClientWithResponses) ContentguardsCoreHeaderListWithResponse(ctx context.Context, pulpDomain string, params *ContentguardsCoreHeaderListParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderListResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderList(ctx, pulpDomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderListResponse(rsp)
}

// ContentguardsCoreHeaderCreateWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreHeaderCreateResponse
func (c *ClientWithResponses) ContentguardsCoreHeaderCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderCreateResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderCreateWithBody(ctx, pulpDomain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderCreateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreHeaderCreateWithResponse(ctx context.Context, pulpDomain string, body ContentguardsCoreHeaderCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderCreateResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderCreate(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderCreateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreHeaderCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body ContentguardsCoreHeaderCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderCreateResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderCreateWithFormdataBody(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderCreateResponse(rsp)
}

// ContentguardsCoreHeaderDeleteWithResponse request returning *ContentguardsCoreHeaderDeleteResponse
func (c *ClientWithResponses) ContentguardsCoreHeaderDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderDeleteResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderDelete(ctx, pulpDomain, pulpId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderDeleteResponse(rsp)
}

// ContentguardsCoreHeaderReadWithResponse request returning *ContentguardsCoreHeaderReadResponse
func (c *ClientWithResponses) ContentguardsCoreHeaderReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderReadParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderReadResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderRead(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderReadResponse(rsp)
}

// ContentguardsCoreHeaderPartialUpdateWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreHeaderPartialUpdateResponse
func (c *ClientWithResponses) ContentguardsCoreHeaderPartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderPartialUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderPartialUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreHeaderPartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderPartialUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderPartialUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreHeaderPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderPartialUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderPartialUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderPartialUpdateResponse(rsp)
}

// ContentguardsCoreHeaderUpdateWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreHeaderUpdateResponse
func (c *ClientWithResponses) ContentguardsCoreHeaderUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreHeaderUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreHeaderUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderUpdateResponse(rsp)
}

// ContentguardsCoreHeaderAddRoleWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreHeaderAddRoleResponse
func (c *ClientWithResponses) ContentguardsCoreHeaderAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderAddRoleResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderAddRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderAddRoleResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreHeaderAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderAddRoleResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderAddRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderAddRoleResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreHeaderAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderAddRoleResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderAddRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderAddRoleResponse(rsp)
}

// ContentguardsCoreHeaderListRolesWithResponse request returning *ContentguardsCoreHeaderListRolesResponse
func (c *ClientWithResponses) ContentguardsCoreHeaderListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderListRolesParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderListRolesResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderListRoles(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderListRolesResponse(rsp)
}

// ContentguardsCoreHeaderMyPermissionsWithResponse request returning *ContentguardsCoreHeaderMyPermissionsResponse
func (c *ClientWithResponses) ContentguardsCoreHeaderMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreHeaderMyPermissionsParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderMyPermissionsResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderMyPermissions(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderMyPermissionsResponse(rsp)
}

// ContentguardsCoreHeaderRemoveRoleWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreHeaderRemoveRoleResponse
func (c *ClientWithResponses) ContentguardsCoreHeaderRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderRemoveRoleResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderRemoveRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreHeaderRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderRemoveRoleResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderRemoveRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreHeaderRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreHeaderRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreHeaderRemoveRoleResponse, error) {
	rsp, err := c.ContentguardsCoreHeaderRemoveRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreHeaderRemoveRoleResponse(rsp)
}

// ContentguardsCoreRbacListWithResponse request returning *ContentguardsCoreRbacListResponse
func (c *ClientWithResponses) ContentguardsCoreRbacListWithResponse(ctx context.Context, pulpDomain string, params *ContentguardsCoreRbacListParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacListResponse, error) {
	rsp, err := c.ContentguardsCoreRbacList(ctx, pulpDomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacListResponse(rsp)
}

// ContentguardsCoreRbacCreateWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreRbacCreateResponse
func (c *ClientWithResponses) ContentguardsCoreRbacCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacCreateResponse, error) {
	rsp, err := c.ContentguardsCoreRbacCreateWithBody(ctx, pulpDomain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacCreateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreRbacCreateWithResponse(ctx context.Context, pulpDomain string, body ContentguardsCoreRbacCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacCreateResponse, error) {
	rsp, err := c.ContentguardsCoreRbacCreate(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacCreateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreRbacCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body ContentguardsCoreRbacCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacCreateResponse, error) {
	rsp, err := c.ContentguardsCoreRbacCreateWithFormdataBody(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacCreateResponse(rsp)
}

// ContentguardsCoreRbacDeleteWithResponse request returning *ContentguardsCoreRbacDeleteResponse
func (c *ClientWithResponses) ContentguardsCoreRbacDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacDeleteResponse, error) {
	rsp, err := c.ContentguardsCoreRbacDelete(ctx, pulpDomain, pulpId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacDeleteResponse(rsp)
}

// ContentguardsCoreRbacReadWithResponse request returning *ContentguardsCoreRbacReadResponse
func (c *ClientWithResponses) ContentguardsCoreRbacReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacReadParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacReadResponse, error) {
	rsp, err := c.ContentguardsCoreRbacRead(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacReadResponse(rsp)
}

// ContentguardsCoreRbacPartialUpdateWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreRbacPartialUpdateResponse
func (c *ClientWithResponses) ContentguardsCoreRbacPartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacPartialUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreRbacPartialUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreRbacPartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacPartialUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreRbacPartialUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreRbacPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacPartialUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreRbacPartialUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacPartialUpdateResponse(rsp)
}

// ContentguardsCoreRbacUpdateWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreRbacUpdateResponse
func (c *ClientWithResponses) ContentguardsCoreRbacUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreRbacUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreRbacUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreRbacUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreRbacUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacUpdateResponse, error) {
	rsp, err := c.ContentguardsCoreRbacUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacUpdateResponse(rsp)
}

// ContentguardsCoreRbacAddRoleWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreRbacAddRoleResponse
func (c *ClientWithResponses) ContentguardsCoreRbacAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacAddRoleResponse, error) {
	rsp, err := c.ContentguardsCoreRbacAddRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacAddRoleResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreRbacAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacAddRoleResponse, error) {
	rsp, err := c.ContentguardsCoreRbacAddRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacAddRoleResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreRbacAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacAddRoleResponse, error) {
	rsp, err := c.ContentguardsCoreRbacAddRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacAddRoleResponse(rsp)
}

// ContentguardsCoreRbacListRolesWithResponse request returning *ContentguardsCoreRbacListRolesResponse
func (c *ClientWithResponses) ContentguardsCoreRbacListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacListRolesParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacListRolesResponse, error) {
	rsp, err := c.ContentguardsCoreRbacListRoles(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacListRolesResponse(rsp)
}

// ContentguardsCoreRbacMyPermissionsWithResponse request returning *ContentguardsCoreRbacMyPermissionsResponse
func (c *ClientWithResponses) ContentguardsCoreRbacMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *ContentguardsCoreRbacMyPermissionsParams, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacMyPermissionsResponse, error) {
	rsp, err := c.ContentguardsCoreRbacMyPermissions(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacMyPermissionsResponse(rsp)
}

// ContentguardsCoreRbacRemoveRoleWithBodyWithResponse request with arbitrary body returning *ContentguardsCoreRbacRemoveRoleResponse
func (c *ClientWithResponses) ContentguardsCoreRbacRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacRemoveRoleResponse, error) {
	rsp, err := c.ContentguardsCoreRbacRemoveRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreRbacRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacRemoveRoleResponse, error) {
	rsp, err := c.ContentguardsCoreRbacRemoveRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) ContentguardsCoreRbacRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body ContentguardsCoreRbacRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContentguardsCoreRbacRemoveRoleResponse, error) {
	rsp, err := c.ContentguardsCoreRbacRemoveRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentguardsCoreRbacRemoveRoleResponse(rsp)
}

// DistributionsOstreeOstreeListWithResponse request returning *DistributionsOstreeOstreeListResponse
func (c *ClientWithResponses) DistributionsOstreeOstreeListWithResponse(ctx context.Context, pulpDomain string, params *DistributionsOstreeOstreeListParams, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeListResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeList(ctx, pulpDomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeListResponse(rsp)
}

// DistributionsOstreeOstreeCreateWithBodyWithResponse request with arbitrary body returning *DistributionsOstreeOstreeCreateResponse
func (c *ClientWithResponses) DistributionsOstreeOstreeCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeCreateResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeCreateWithBody(ctx, pulpDomain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeCreateResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreeCreateWithResponse(ctx context.Context, pulpDomain string, body DistributionsOstreeOstreeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeCreateResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeCreate(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeCreateResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreeCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body DistributionsOstreeOstreeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeCreateResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeCreateWithFormdataBody(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeCreateResponse(rsp)
}

// DistributionsOstreeOstreeDeleteWithResponse request returning *DistributionsOstreeOstreeDeleteResponse
func (c *ClientWithResponses) DistributionsOstreeOstreeDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeDeleteResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeDelete(ctx, pulpDomain, pulpId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeDeleteResponse(rsp)
}

// DistributionsOstreeOstreeReadWithResponse request returning *DistributionsOstreeOstreeReadResponse
func (c *ClientWithResponses) DistributionsOstreeOstreeReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeReadParams, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeReadResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeRead(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeReadResponse(rsp)
}

// DistributionsOstreeOstreePartialUpdateWithBodyWithResponse request with arbitrary body returning *DistributionsOstreeOstreePartialUpdateResponse
func (c *ClientWithResponses) DistributionsOstreeOstreePartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreePartialUpdateResponse, error) {
	rsp, err := c.DistributionsOstreeOstreePartialUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreePartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreePartialUpdateResponse, error) {
	rsp, err := c.DistributionsOstreeOstreePartialUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreePartialUpdateResponse, error) {
	rsp, err := c.DistributionsOstreeOstreePartialUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreePartialUpdateResponse(rsp)
}

// DistributionsOstreeOstreeUpdateWithBodyWithResponse request with arbitrary body returning *DistributionsOstreeOstreeUpdateResponse
func (c *ClientWithResponses) DistributionsOstreeOstreeUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeUpdateResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeUpdateResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreeUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeUpdateResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeUpdateResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreeUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeUpdateResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeUpdateResponse(rsp)
}

// DistributionsOstreeOstreeAddRoleWithBodyWithResponse request with arbitrary body returning *DistributionsOstreeOstreeAddRoleResponse
func (c *ClientWithResponses) DistributionsOstreeOstreeAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeAddRoleResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeAddRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeAddRoleResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreeAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeAddRoleResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeAddRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeAddRoleResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreeAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeAddRoleResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeAddRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeAddRoleResponse(rsp)
}

// DistributionsOstreeOstreeListRolesWithResponse request returning *DistributionsOstreeOstreeListRolesResponse
func (c *ClientWithResponses) DistributionsOstreeOstreeListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeListRolesParams, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeListRolesResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeListRoles(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeListRolesResponse(rsp)
}

// DistributionsOstreeOstreeMyPermissionsWithResponse request returning *DistributionsOstreeOstreeMyPermissionsResponse
func (c *ClientWithResponses) DistributionsOstreeOstreeMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DistributionsOstreeOstreeMyPermissionsParams, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeMyPermissionsResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeMyPermissions(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeMyPermissionsResponse(rsp)
}

// DistributionsOstreeOstreeRemoveRoleWithBodyWithResponse request with arbitrary body returning *DistributionsOstreeOstreeRemoveRoleResponse
func (c *ClientWithResponses) DistributionsOstreeOstreeRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeRemoveRoleResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeRemoveRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreeRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeRemoveRoleResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeRemoveRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreeRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeRemoveRoleResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeRemoveRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeRemoveRoleResponse(rsp)
}

// DistributionsOstreeOstreeSetLabelWithBodyWithResponse request with arbitrary body returning *DistributionsOstreeOstreeSetLabelResponse
func (c *ClientWithResponses) DistributionsOstreeOstreeSetLabelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeSetLabelResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeSetLabelWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeSetLabelResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreeSetLabelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeSetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeSetLabelResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeSetLabel(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeSetLabelResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreeSetLabelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeSetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeSetLabelResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeSetLabelWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeSetLabelResponse(rsp)
}

// DistributionsOstreeOstreeUnsetLabelWithBodyWithResponse request with arbitrary body returning *DistributionsOstreeOstreeUnsetLabelResponse
func (c *ClientWithResponses) DistributionsOstreeOstreeUnsetLabelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeUnsetLabelResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeUnsetLabelWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeUnsetLabelResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreeUnsetLabelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUnsetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeUnsetLabelResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeUnsetLabel(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeUnsetLabelResponse(rsp)
}

func (c *ClientWithResponses) DistributionsOstreeOstreeUnsetLabelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DistributionsOstreeOstreeUnsetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*DistributionsOstreeOstreeUnsetLabelResponse, error) {
	rsp, err := c.DistributionsOstreeOstreeUnsetLabelWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDistributionsOstreeOstreeUnsetLabelResponse(rsp)
}

// DomainsListWithResponse request returning *DomainsListResponse
func (c *ClientWithResponses) DomainsListWithResponse(ctx context.Context, pulpDomain string, params *DomainsListParams, reqEditors ...RequestEditorFn) (*DomainsListResponse, error) {
	rsp, err := c.DomainsList(ctx, pulpDomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsListResponse(rsp)
}

// DomainsCreateWithBodyWithResponse request with arbitrary body returning *DomainsCreateResponse
func (c *ClientWithResponses) DomainsCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsCreateResponse, error) {
	rsp, err := c.DomainsCreateWithBody(ctx, pulpDomain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsCreateResponse(rsp)
}

func (c *ClientWithResponses) DomainsCreateWithResponse(ctx context.Context, pulpDomain string, body DomainsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsCreateResponse, error) {
	rsp, err := c.DomainsCreate(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsCreateResponse(rsp)
}

func (c *ClientWithResponses) DomainsCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body DomainsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsCreateResponse, error) {
	rsp, err := c.DomainsCreateWithFormdataBody(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsCreateResponse(rsp)
}

// DomainsDeleteWithResponse request returning *DomainsDeleteResponse
func (c *ClientWithResponses) DomainsDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DomainsDeleteResponse, error) {
	rsp, err := c.DomainsDelete(ctx, pulpDomain, pulpId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsDeleteResponse(rsp)
}

// DomainsReadWithResponse request returning *DomainsReadResponse
func (c *ClientWithResponses) DomainsReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *DomainsReadParams, reqEditors ...RequestEditorFn) (*DomainsReadResponse, error) {
	rsp, err := c.DomainsRead(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsReadResponse(rsp)
}

// DomainsPartialUpdateWithBodyWithResponse request with arbitrary body returning *DomainsPartialUpdateResponse
func (c *ClientWithResponses) DomainsPartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsPartialUpdateResponse, error) {
	rsp, err := c.DomainsPartialUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DomainsPartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsPartialUpdateResponse, error) {
	rsp, err := c.DomainsPartialUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DomainsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsPartialUpdateResponse, error) {
	rsp, err := c.DomainsPartialUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsPartialUpdateResponse(rsp)
}

// DomainsUpdateWithBodyWithResponse request with arbitrary body returning *DomainsUpdateResponse
func (c *ClientWithResponses) DomainsUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsUpdateResponse, error) {
	rsp, err := c.DomainsUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsUpdateResponse(rsp)
}

func (c *ClientWithResponses) DomainsUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsUpdateResponse, error) {
	rsp, err := c.DomainsUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsUpdateResponse(rsp)
}

func (c *ClientWithResponses) DomainsUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body DomainsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsUpdateResponse, error) {
	rsp, err := c.DomainsUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsUpdateResponse(rsp)
}

// RepositoriesFileFileListWithResponse request returning *RepositoriesFileFileListResponse
func (c *ClientWithResponses) RepositoriesFileFileListWithResponse(ctx context.Context, pulpDomain string, params *RepositoriesFileFileListParams, reqEditors ...RequestEditorFn) (*RepositoriesFileFileListResponse, error) {
	rsp, err := c.RepositoriesFileFileList(ctx, pulpDomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileListResponse(rsp)
}

// RepositoriesFileFileCreateWithBodyWithResponse request with arbitrary body returning *RepositoriesFileFileCreateResponse
func (c *ClientWithResponses) RepositoriesFileFileCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileCreateResponse, error) {
	rsp, err := c.RepositoriesFileFileCreateWithBody(ctx, pulpDomain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileCreateResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileCreateWithResponse(ctx context.Context, pulpDomain string, body RepositoriesFileFileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileCreateResponse, error) {
	rsp, err := c.RepositoriesFileFileCreate(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileCreateResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body RepositoriesFileFileCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileCreateResponse, error) {
	rsp, err := c.RepositoriesFileFileCreateWithFormdataBody(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileCreateResponse(rsp)
}

// RepositoriesFileFileDeleteWithResponse request returning *RepositoriesFileFileDeleteResponse
func (c *ClientWithResponses) RepositoriesFileFileDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*RepositoriesFileFileDeleteResponse, error) {
	rsp, err := c.RepositoriesFileFileDelete(ctx, pulpDomain, pulpId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileDeleteResponse(rsp)
}

// RepositoriesFileFileReadWithResponse request returning *RepositoriesFileFileReadResponse
func (c *ClientWithResponses) RepositoriesFileFileReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileReadParams, reqEditors ...RequestEditorFn) (*RepositoriesFileFileReadResponse, error) {
	rsp, err := c.RepositoriesFileFileRead(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileReadResponse(rsp)
}

// RepositoriesFileFilePartialUpdateWithBodyWithResponse request with arbitrary body returning *RepositoriesFileFilePartialUpdateResponse
func (c *ClientWithResponses) RepositoriesFileFilePartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFilePartialUpdateResponse, error) {
	rsp, err := c.RepositoriesFileFilePartialUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFilePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFilePartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFilePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFilePartialUpdateResponse, error) {
	rsp, err := c.RepositoriesFileFilePartialUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFilePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFilePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFilePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFilePartialUpdateResponse, error) {
	rsp, err := c.RepositoriesFileFilePartialUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFilePartialUpdateResponse(rsp)
}

// RepositoriesFileFileUpdateWithBodyWithResponse request with arbitrary body returning *RepositoriesFileFileUpdateResponse
func (c *ClientWithResponses) RepositoriesFileFileUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileUpdateResponse, error) {
	rsp, err := c.RepositoriesFileFileUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileUpdateResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileUpdateResponse, error) {
	rsp, err := c.RepositoriesFileFileUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileUpdateResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileUpdateResponse, error) {
	rsp, err := c.RepositoriesFileFileUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileUpdateResponse(rsp)
}

// RepositoriesFileFileAddRoleWithBodyWithResponse request with arbitrary body returning *RepositoriesFileFileAddRoleResponse
func (c *ClientWithResponses) RepositoriesFileFileAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileAddRoleResponse, error) {
	rsp, err := c.RepositoriesFileFileAddRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileAddRoleResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileAddRoleResponse, error) {
	rsp, err := c.RepositoriesFileFileAddRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileAddRoleResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileAddRoleResponse, error) {
	rsp, err := c.RepositoriesFileFileAddRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileAddRoleResponse(rsp)
}

// RepositoriesFileFileListRolesWithResponse request returning *RepositoriesFileFileListRolesResponse
func (c *ClientWithResponses) RepositoriesFileFileListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileListRolesParams, reqEditors ...RequestEditorFn) (*RepositoriesFileFileListRolesResponse, error) {
	rsp, err := c.RepositoriesFileFileListRoles(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileListRolesResponse(rsp)
}

// RepositoriesFileFileModifyWithBodyWithResponse request with arbitrary body returning *RepositoriesFileFileModifyResponse
func (c *ClientWithResponses) RepositoriesFileFileModifyWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileModifyResponse, error) {
	rsp, err := c.RepositoriesFileFileModifyWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileModifyResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileModifyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileModifyJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileModifyResponse, error) {
	rsp, err := c.RepositoriesFileFileModify(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileModifyResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileModifyWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileModifyFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileModifyResponse, error) {
	rsp, err := c.RepositoriesFileFileModifyWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileModifyResponse(rsp)
}

// RepositoriesFileFileMyPermissionsWithResponse request returning *RepositoriesFileFileMyPermissionsResponse
func (c *ClientWithResponses) RepositoriesFileFileMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesFileFileMyPermissionsParams, reqEditors ...RequestEditorFn) (*RepositoriesFileFileMyPermissionsResponse, error) {
	rsp, err := c.RepositoriesFileFileMyPermissions(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileMyPermissionsResponse(rsp)
}

// RepositoriesFileFileRemoveRoleWithBodyWithResponse request with arbitrary body returning *RepositoriesFileFileRemoveRoleResponse
func (c *ClientWithResponses) RepositoriesFileFileRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileRemoveRoleResponse, error) {
	rsp, err := c.RepositoriesFileFileRemoveRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileRemoveRoleResponse, error) {
	rsp, err := c.RepositoriesFileFileRemoveRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileRemoveRoleResponse, error) {
	rsp, err := c.RepositoriesFileFileRemoveRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileRemoveRoleResponse(rsp)
}

// RepositoriesFileFileSetLabelWithBodyWithResponse request with arbitrary body returning *RepositoriesFileFileSetLabelResponse
func (c *ClientWithResponses) RepositoriesFileFileSetLabelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileSetLabelResponse, error) {
	rsp, err := c.RepositoriesFileFileSetLabelWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileSetLabelResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileSetLabelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileSetLabelResponse, error) {
	rsp, err := c.RepositoriesFileFileSetLabel(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileSetLabelResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileSetLabelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileSetLabelResponse, error) {
	rsp, err := c.RepositoriesFileFileSetLabelWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileSetLabelResponse(rsp)
}

// RepositoriesFileFileSyncWithBodyWithResponse request with arbitrary body returning *RepositoriesFileFileSyncResponse
func (c *ClientWithResponses) RepositoriesFileFileSyncWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileSyncResponse, error) {
	rsp, err := c.RepositoriesFileFileSyncWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileSyncResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileSyncWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileSyncResponse, error) {
	rsp, err := c.RepositoriesFileFileSync(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileSyncResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileSyncWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileSyncFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileSyncResponse, error) {
	rsp, err := c.RepositoriesFileFileSyncWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileSyncResponse(rsp)
}

// RepositoriesFileFileUnsetLabelWithBodyWithResponse request with arbitrary body returning *RepositoriesFileFileUnsetLabelResponse
func (c *ClientWithResponses) RepositoriesFileFileUnsetLabelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileUnsetLabelResponse, error) {
	rsp, err := c.RepositoriesFileFileUnsetLabelWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileUnsetLabelResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileUnsetLabelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUnsetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileUnsetLabelResponse, error) {
	rsp, err := c.RepositoriesFileFileUnsetLabel(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileUnsetLabelResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileUnsetLabelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesFileFileUnsetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileUnsetLabelResponse, error) {
	rsp, err := c.RepositoriesFileFileUnsetLabelWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileUnsetLabelResponse(rsp)
}

// RepositoriesFileFileVersionsListWithResponse request returning *RepositoriesFileFileVersionsListResponse
func (c *ClientWithResponses) RepositoriesFileFileVersionsListWithResponse(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, params *RepositoriesFileFileVersionsListParams, reqEditors ...RequestEditorFn) (*RepositoriesFileFileVersionsListResponse, error) {
	rsp, err := c.RepositoriesFileFileVersionsList(ctx, pulpDomain, repositoryPk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileVersionsListResponse(rsp)
}

// RepositoriesFileFileVersionsDeleteWithResponse request returning *RepositoriesFileFileVersionsDeleteResponse
func (c *ClientWithResponses) RepositoriesFileFileVersionsDeleteWithResponse(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, reqEditors ...RequestEditorFn) (*RepositoriesFileFileVersionsDeleteResponse, error) {
	rsp, err := c.RepositoriesFileFileVersionsDelete(ctx, pulpDomain, repositoryPk, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileVersionsDeleteResponse(rsp)
}

// RepositoriesFileFileVersionsReadWithResponse request returning *RepositoriesFileFileVersionsReadResponse
func (c *ClientWithResponses) RepositoriesFileFileVersionsReadWithResponse(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, params *RepositoriesFileFileVersionsReadParams, reqEditors ...RequestEditorFn) (*RepositoriesFileFileVersionsReadResponse, error) {
	rsp, err := c.RepositoriesFileFileVersionsRead(ctx, pulpDomain, repositoryPk, number, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileVersionsReadResponse(rsp)
}

// RepositoriesFileFileVersionsRepairWithBodyWithResponse request with arbitrary body returning *RepositoriesFileFileVersionsRepairResponse
func (c *ClientWithResponses) RepositoriesFileFileVersionsRepairWithBodyWithResponse(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesFileFileVersionsRepairResponse, error) {
	rsp, err := c.RepositoriesFileFileVersionsRepairWithBody(ctx, pulpDomain, repositoryPk, number, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileVersionsRepairResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileVersionsRepairWithResponse(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, body RepositoriesFileFileVersionsRepairJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileVersionsRepairResponse, error) {
	rsp, err := c.RepositoriesFileFileVersionsRepair(ctx, pulpDomain, repositoryPk, number, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileVersionsRepairResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesFileFileVersionsRepairWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, repositoryPk openapi_types.UUID, number int64, body RepositoriesFileFileVersionsRepairFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesFileFileVersionsRepairResponse, error) {
	rsp, err := c.RepositoriesFileFileVersionsRepairWithFormdataBody(ctx, pulpDomain, repositoryPk, number, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesFileFileVersionsRepairResponse(rsp)
}

// RepositoriesOstreeOstreeListWithResponse request returning *RepositoriesOstreeOstreeListResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeListWithResponse(ctx context.Context, pulpDomain string, params *RepositoriesOstreeOstreeListParams, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeListResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeList(ctx, pulpDomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeListResponse(rsp)
}

// RepositoriesOstreeOstreeCreateWithBodyWithResponse request with arbitrary body returning *RepositoriesOstreeOstreeCreateResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeCreateWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeCreateResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeCreateWithBody(ctx, pulpDomain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeCreateResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeCreateWithResponse(ctx context.Context, pulpDomain string, body RepositoriesOstreeOstreeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeCreateResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeCreate(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeCreateResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeCreateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body RepositoriesOstreeOstreeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeCreateResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeCreateWithFormdataBody(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeCreateResponse(rsp)
}

// RepositoriesOstreeOstreeDeleteWithResponse request returning *RepositoriesOstreeOstreeDeleteResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeDeleteResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeDelete(ctx, pulpDomain, pulpId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeDeleteResponse(rsp)
}

// RepositoriesOstreeOstreeReadWithResponse request returning *RepositoriesOstreeOstreeReadResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeReadParams, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeReadResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeRead(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeReadResponse(rsp)
}

// RepositoriesOstreeOstreePartialUpdateWithBodyWithResponse request with arbitrary body returning *RepositoriesOstreeOstreePartialUpdateResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreePartialUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreePartialUpdateResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreePartialUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreePartialUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreePartialUpdateResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreePartialUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreePartialUpdateResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreePartialUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreePartialUpdateResponse(rsp)
}

// RepositoriesOstreeOstreeUpdateWithBodyWithResponse request with arbitrary body returning *RepositoriesOstreeOstreeUpdateResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeUpdateWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeUpdateResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeUpdateWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeUpdateResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeUpdateWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeUpdateResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeUpdate(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeUpdateResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeUpdateWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeUpdateResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeUpdateWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeUpdateResponse(rsp)
}

// RepositoriesOstreeOstreeAddRoleWithBodyWithResponse request with arbitrary body returning *RepositoriesOstreeOstreeAddRoleResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeAddRoleResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeAddRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeAddRoleResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeAddRoleResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeAddRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeAddRoleResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeAddRoleResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeAddRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeAddRoleResponse(rsp)
}

// RepositoriesOstreeOstreeImportAllWithBodyWithResponse request with arbitrary body returning *RepositoriesOstreeOstreeImportAllResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeImportAllWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeImportAllResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeImportAllWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeImportAllResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeImportAllWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportAllJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeImportAllResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeImportAll(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeImportAllResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeImportAllWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportAllFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeImportAllResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeImportAllWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeImportAllResponse(rsp)
}

// RepositoriesOstreeOstreeImportCommitsWithBodyWithResponse request with arbitrary body returning *RepositoriesOstreeOstreeImportCommitsResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeImportCommitsWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeImportCommitsResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeImportCommitsWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeImportCommitsResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeImportCommitsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportCommitsJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeImportCommitsResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeImportCommits(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeImportCommitsResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeImportCommitsWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeImportCommitsFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeImportCommitsResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeImportCommitsWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeImportCommitsResponse(rsp)
}

// RepositoriesOstreeOstreeListRolesWithResponse request returning *RepositoriesOstreeOstreeListRolesResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeListRolesParams, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeListRolesResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeListRoles(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeListRolesResponse(rsp)
}

// RepositoriesOstreeOstreeModifyWithBodyWithResponse request with arbitrary body returning *RepositoriesOstreeOstreeModifyResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeModifyWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeModifyResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeModifyWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeModifyResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeModifyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeModifyJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeModifyResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeModify(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeModifyResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeModifyWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeModifyFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeModifyResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeModifyWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeModifyResponse(rsp)
}

// RepositoriesOstreeOstreeMyPermissionsWithResponse request returning *RepositoriesOstreeOstreeMyPermissionsResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *RepositoriesOstreeOstreeMyPermissionsParams, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeMyPermissionsResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeMyPermissions(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeMyPermissionsResponse(rsp)
}

// RepositoriesOstreeOstreeRemoveRoleWithBodyWithResponse request with arbitrary body returning *RepositoriesOstreeOstreeRemoveRoleResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeRemoveRoleResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeRemoveRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeRemoveRoleResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeRemoveRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeRemoveRoleResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeRemoveRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeRemoveRoleResponse(rsp)
}

// RepositoriesOstreeOstreeSetLabelWithBodyWithResponse request with arbitrary body returning *RepositoriesOstreeOstreeSetLabelResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeSetLabelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeSetLabelResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeSetLabelWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeSetLabelResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeSetLabelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeSetLabelResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeSetLabel(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeSetLabelResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeSetLabelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeSetLabelResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeSetLabelWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeSetLabelResponse(rsp)
}

// RepositoriesOstreeOstreeSyncWithBodyWithResponse request with arbitrary body returning *RepositoriesOstreeOstreeSyncResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeSyncWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeSyncResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeSyncWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeSyncResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeSyncWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeSyncResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeSync(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeSyncResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeSyncWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeSyncFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeSyncResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeSyncWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeSyncResponse(rsp)
}

// RepositoriesOstreeOstreeUnsetLabelWithBodyWithResponse request with arbitrary body returning *RepositoriesOstreeOstreeUnsetLabelResponse
func (c *ClientWithResponses) RepositoriesOstreeOstreeUnsetLabelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeUnsetLabelResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeUnsetLabelWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeUnsetLabelResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeUnsetLabelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUnsetLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeUnsetLabelResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeUnsetLabel(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeUnsetLabelResponse(rsp)
}

func (c *ClientWithResponses) RepositoriesOstreeOstreeUnsetLabelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body RepositoriesOstreeOstreeUnsetLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*RepositoriesOstreeOstreeUnsetLabelResponse, error) {
	rsp, err := c.RepositoriesOstreeOstreeUnsetLabelWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepositoriesOstreeOstreeUnsetLabelResponse(rsp)
}

// TasksListWithResponse request returning *TasksListResponse
func (c *ClientWithResponses) TasksListWithResponse(ctx context.Context, pulpDomain string, params *TasksListParams, reqEditors ...RequestEditorFn) (*TasksListResponse, error) {
	rsp, err := c.TasksList(ctx, pulpDomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksListResponse(rsp)
}

// TasksPurgeWithBodyWithResponse request with arbitrary body returning *TasksPurgeResponse
func (c *ClientWithResponses) TasksPurgeWithBodyWithResponse(ctx context.Context, pulpDomain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TasksPurgeResponse, error) {
	rsp, err := c.TasksPurgeWithBody(ctx, pulpDomain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksPurgeResponse(rsp)
}

func (c *ClientWithResponses) TasksPurgeWithResponse(ctx context.Context, pulpDomain string, body TasksPurgeJSONRequestBody, reqEditors ...RequestEditorFn) (*TasksPurgeResponse, error) {
	rsp, err := c.TasksPurge(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksPurgeResponse(rsp)
}

func (c *ClientWithResponses) TasksPurgeWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, body TasksPurgeFormdataRequestBody, reqEditors ...RequestEditorFn) (*TasksPurgeResponse, error) {
	rsp, err := c.TasksPurgeWithFormdataBody(ctx, pulpDomain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksPurgeResponse(rsp)
}

// TasksDeleteWithResponse request returning *TasksDeleteResponse
func (c *ClientWithResponses) TasksDeleteWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, reqEditors ...RequestEditorFn) (*TasksDeleteResponse, error) {
	rsp, err := c.TasksDelete(ctx, pulpDomain, pulpId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksDeleteResponse(rsp)
}

// TasksReadWithResponse request returning *TasksReadResponse
func (c *ClientWithResponses) TasksReadWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *TasksReadParams, reqEditors ...RequestEditorFn) (*TasksReadResponse, error) {
	rsp, err := c.TasksRead(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksReadResponse(rsp)
}

// TasksCancelWithBodyWithResponse request with arbitrary body returning *TasksCancelResponse
func (c *ClientWithResponses) TasksCancelWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TasksCancelResponse, error) {
	rsp, err := c.TasksCancelWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksCancelResponse(rsp)
}

func (c *ClientWithResponses) TasksCancelWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*TasksCancelResponse, error) {
	rsp, err := c.TasksCancel(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksCancelResponse(rsp)
}

func (c *ClientWithResponses) TasksCancelWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksCancelFormdataRequestBody, reqEditors ...RequestEditorFn) (*TasksCancelResponse, error) {
	rsp, err := c.TasksCancelWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksCancelResponse(rsp)
}

// TasksAddRoleWithBodyWithResponse request with arbitrary body returning *TasksAddRoleResponse
func (c *ClientWithResponses) TasksAddRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TasksAddRoleResponse, error) {
	rsp, err := c.TasksAddRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksAddRoleResponse(rsp)
}

func (c *ClientWithResponses) TasksAddRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksAddRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*TasksAddRoleResponse, error) {
	rsp, err := c.TasksAddRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksAddRoleResponse(rsp)
}

func (c *ClientWithResponses) TasksAddRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksAddRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*TasksAddRoleResponse, error) {
	rsp, err := c.TasksAddRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksAddRoleResponse(rsp)
}

// TasksListRolesWithResponse request returning *TasksListRolesResponse
func (c *ClientWithResponses) TasksListRolesWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *TasksListRolesParams, reqEditors ...RequestEditorFn) (*TasksListRolesResponse, error) {
	rsp, err := c.TasksListRoles(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksListRolesResponse(rsp)
}

// TasksMyPermissionsWithResponse request returning *TasksMyPermissionsResponse
func (c *ClientWithResponses) TasksMyPermissionsWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, params *TasksMyPermissionsParams, reqEditors ...RequestEditorFn) (*TasksMyPermissionsResponse, error) {
	rsp, err := c.TasksMyPermissions(ctx, pulpDomain, pulpId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksMyPermissionsResponse(rsp)
}

// TasksRemoveRoleWithBodyWithResponse request with arbitrary body returning *TasksRemoveRoleResponse
func (c *ClientWithResponses) TasksRemoveRoleWithBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TasksRemoveRoleResponse, error) {
	rsp, err := c.TasksRemoveRoleWithBody(ctx, pulpDomain, pulpId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) TasksRemoveRoleWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksRemoveRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*TasksRemoveRoleResponse, error) {
	rsp, err := c.TasksRemoveRole(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksRemoveRoleResponse(rsp)
}

func (c *ClientWithResponses) TasksRemoveRoleWithFormdataBodyWithResponse(ctx context.Context, pulpDomain string, pulpId openapi_types.UUID, body TasksRemoveRoleFormdataRequestBody, reqEditors ...RequestEditorFn) (*TasksRemoveRoleResponse, error) {
	rsp, err := c.TasksRemoveRoleWithFormdataBody(ctx, pulpDomain, pulpId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksRemoveRoleResponse(rsp)
}

// ParseArtifactsListResponse parses an HTTP response from a ArtifactsListWithResponse call
func ParseArtifactsListResponse(rsp *http.Response) (*ArtifactsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArtifactsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedArtifactResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseArtifactsCreateResponse parses an HTTP response from a ArtifactsCreateWithResponse call
func ParseArtifactsCreateResponse(rsp *http.Response) (*ArtifactsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArtifactsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ArtifactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseArtifactsDeleteResponse parses an HTTP response from a ArtifactsDeleteWithResponse call
func ParseArtifactsDeleteResponse(rsp *http.Response) (*ArtifactsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArtifactsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseArtifactsReadResponse parses an HTTP response from a ArtifactsReadWithResponse call
func ParseArtifactsReadResponse(rsp *http.Response) (*ArtifactsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArtifactsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentFileFilesListResponse parses an HTTP response from a ContentFileFilesListWithResponse call
func ParseContentFileFilesListResponse(rsp *http.Response) (*ContentFileFilesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentFileFilesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedfileFileContentResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentFileFilesCreateResponse parses an HTTP response from a ContentFileFilesCreateWithResponse call
func ParseContentFileFilesCreateResponse(rsp *http.Response) (*ContentFileFilesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentFileFilesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseContentFileFilesReadResponse parses an HTTP response from a ContentFileFilesReadWithResponse call
func ParseContentFileFilesReadResponse(rsp *http.Response) (*ContentFileFilesReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentFileFilesReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileFileContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentOstreeContentListResponse parses an HTTP response from a ContentOstreeContentListWithResponse call
func ParseContentOstreeContentListResponse(rsp *http.Response) (*ContentOstreeContentListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentOstreeContentListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedostreeOstreeContentResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentOstreeContentCreateResponse parses an HTTP response from a ContentOstreeContentCreateWithResponse call
func ParseContentOstreeContentCreateResponse(rsp *http.Response) (*ContentOstreeContentCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentOstreeContentCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseContentOstreeContentReadResponse parses an HTTP response from a ContentOstreeContentReadWithResponse call
func ParseContentOstreeContentReadResponse(rsp *http.Response) (*ContentOstreeContentReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentOstreeContentReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OstreeOstreeContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreCompositeListResponse parses an HTTP response from a ContentguardsCoreCompositeListWithResponse call
func ParseContentguardsCoreCompositeListResponse(rsp *http.Response) (*ContentguardsCoreCompositeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreCompositeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCompositeContentGuardResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreCompositeCreateResponse parses an HTTP response from a ContentguardsCoreCompositeCreateWithResponse call
func ParseContentguardsCoreCompositeCreateResponse(rsp *http.Response) (*ContentguardsCoreCompositeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreCompositeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CompositeContentGuardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreCompositeDeleteResponse parses an HTTP response from a ContentguardsCoreCompositeDeleteWithResponse call
func ParseContentguardsCoreCompositeDeleteResponse(rsp *http.Response) (*ContentguardsCoreCompositeDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreCompositeDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseContentguardsCoreCompositeReadResponse parses an HTTP response from a ContentguardsCoreCompositeReadWithResponse call
func ParseContentguardsCoreCompositeReadResponse(rsp *http.Response) (*ContentguardsCoreCompositeReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreCompositeReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompositeContentGuardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreCompositePartialUpdateResponse parses an HTTP response from a ContentguardsCoreCompositePartialUpdateWithResponse call
func ParseContentguardsCoreCompositePartialUpdateResponse(rsp *http.Response) (*ContentguardsCoreCompositePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreCompositePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompositeContentGuardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreCompositeUpdateResponse parses an HTTP response from a ContentguardsCoreCompositeUpdateWithResponse call
func ParseContentguardsCoreCompositeUpdateResponse(rsp *http.Response) (*ContentguardsCoreCompositeUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreCompositeUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompositeContentGuardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreCompositeAddRoleResponse parses an HTTP response from a ContentguardsCoreCompositeAddRoleWithResponse call
func ParseContentguardsCoreCompositeAddRoleResponse(rsp *http.Response) (*ContentguardsCoreCompositeAddRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreCompositeAddRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreCompositeListRolesResponse parses an HTTP response from a ContentguardsCoreCompositeListRolesWithResponse call
func ParseContentguardsCoreCompositeListRolesResponse(rsp *http.Response) (*ContentguardsCoreCompositeListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreCompositeListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreCompositeMyPermissionsResponse parses an HTTP response from a ContentguardsCoreCompositeMyPermissionsWithResponse call
func ParseContentguardsCoreCompositeMyPermissionsResponse(rsp *http.Response) (*ContentguardsCoreCompositeMyPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreCompositeMyPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyPermissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreCompositeRemoveRoleResponse parses an HTTP response from a ContentguardsCoreCompositeRemoveRoleWithResponse call
func ParseContentguardsCoreCompositeRemoveRoleResponse(rsp *http.Response) (*ContentguardsCoreCompositeRemoveRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreCompositeRemoveRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreHeaderListResponse parses an HTTP response from a ContentguardsCoreHeaderListWithResponse call
func ParseContentguardsCoreHeaderListResponse(rsp *http.Response) (*ContentguardsCoreHeaderListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreHeaderListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedHeaderContentGuardResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreHeaderCreateResponse parses an HTTP response from a ContentguardsCoreHeaderCreateWithResponse call
func ParseContentguardsCoreHeaderCreateResponse(rsp *http.Response) (*ContentguardsCoreHeaderCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreHeaderCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HeaderContentGuardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreHeaderDeleteResponse parses an HTTP response from a ContentguardsCoreHeaderDeleteWithResponse call
func ParseContentguardsCoreHeaderDeleteResponse(rsp *http.Response) (*ContentguardsCoreHeaderDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreHeaderDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseContentguardsCoreHeaderReadResponse parses an HTTP response from a ContentguardsCoreHeaderReadWithResponse call
func ParseContentguardsCoreHeaderReadResponse(rsp *http.Response) (*ContentguardsCoreHeaderReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreHeaderReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HeaderContentGuardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreHeaderPartialUpdateResponse parses an HTTP response from a ContentguardsCoreHeaderPartialUpdateWithResponse call
func ParseContentguardsCoreHeaderPartialUpdateResponse(rsp *http.Response) (*ContentguardsCoreHeaderPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreHeaderPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HeaderContentGuardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreHeaderUpdateResponse parses an HTTP response from a ContentguardsCoreHeaderUpdateWithResponse call
func ParseContentguardsCoreHeaderUpdateResponse(rsp *http.Response) (*ContentguardsCoreHeaderUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreHeaderUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HeaderContentGuardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreHeaderAddRoleResponse parses an HTTP response from a ContentguardsCoreHeaderAddRoleWithResponse call
func ParseContentguardsCoreHeaderAddRoleResponse(rsp *http.Response) (*ContentguardsCoreHeaderAddRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreHeaderAddRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreHeaderListRolesResponse parses an HTTP response from a ContentguardsCoreHeaderListRolesWithResponse call
func ParseContentguardsCoreHeaderListRolesResponse(rsp *http.Response) (*ContentguardsCoreHeaderListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreHeaderListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreHeaderMyPermissionsResponse parses an HTTP response from a ContentguardsCoreHeaderMyPermissionsWithResponse call
func ParseContentguardsCoreHeaderMyPermissionsResponse(rsp *http.Response) (*ContentguardsCoreHeaderMyPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreHeaderMyPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyPermissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreHeaderRemoveRoleResponse parses an HTTP response from a ContentguardsCoreHeaderRemoveRoleWithResponse call
func ParseContentguardsCoreHeaderRemoveRoleResponse(rsp *http.Response) (*ContentguardsCoreHeaderRemoveRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreHeaderRemoveRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreRbacListResponse parses an HTTP response from a ContentguardsCoreRbacListWithResponse call
func ParseContentguardsCoreRbacListResponse(rsp *http.Response) (*ContentguardsCoreRbacListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreRbacListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRBACContentGuardResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreRbacCreateResponse parses an HTTP response from a ContentguardsCoreRbacCreateWithResponse call
func ParseContentguardsCoreRbacCreateResponse(rsp *http.Response) (*ContentguardsCoreRbacCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreRbacCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RBACContentGuardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreRbacDeleteResponse parses an HTTP response from a ContentguardsCoreRbacDeleteWithResponse call
func ParseContentguardsCoreRbacDeleteResponse(rsp *http.Response) (*ContentguardsCoreRbacDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreRbacDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseContentguardsCoreRbacReadResponse parses an HTTP response from a ContentguardsCoreRbacReadWithResponse call
func ParseContentguardsCoreRbacReadResponse(rsp *http.Response) (*ContentguardsCoreRbacReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreRbacReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RBACContentGuardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreRbacPartialUpdateResponse parses an HTTP response from a ContentguardsCoreRbacPartialUpdateWithResponse call
func ParseContentguardsCoreRbacPartialUpdateResponse(rsp *http.Response) (*ContentguardsCoreRbacPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreRbacPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RBACContentGuardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreRbacUpdateResponse parses an HTTP response from a ContentguardsCoreRbacUpdateWithResponse call
func ParseContentguardsCoreRbacUpdateResponse(rsp *http.Response) (*ContentguardsCoreRbacUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreRbacUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RBACContentGuardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreRbacAddRoleResponse parses an HTTP response from a ContentguardsCoreRbacAddRoleWithResponse call
func ParseContentguardsCoreRbacAddRoleResponse(rsp *http.Response) (*ContentguardsCoreRbacAddRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreRbacAddRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreRbacListRolesResponse parses an HTTP response from a ContentguardsCoreRbacListRolesWithResponse call
func ParseContentguardsCoreRbacListRolesResponse(rsp *http.Response) (*ContentguardsCoreRbacListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreRbacListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreRbacMyPermissionsResponse parses an HTTP response from a ContentguardsCoreRbacMyPermissionsWithResponse call
func ParseContentguardsCoreRbacMyPermissionsResponse(rsp *http.Response) (*ContentguardsCoreRbacMyPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreRbacMyPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyPermissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContentguardsCoreRbacRemoveRoleResponse parses an HTTP response from a ContentguardsCoreRbacRemoveRoleWithResponse call
func ParseContentguardsCoreRbacRemoveRoleResponse(rsp *http.Response) (*ContentguardsCoreRbacRemoveRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentguardsCoreRbacRemoveRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDistributionsOstreeOstreeListResponse parses an HTTP response from a DistributionsOstreeOstreeListWithResponse call
func ParseDistributionsOstreeOstreeListResponse(rsp *http.Response) (*DistributionsOstreeOstreeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DistributionsOstreeOstreeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedostreeOstreeDistributionResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDistributionsOstreeOstreeCreateResponse parses an HTTP response from a DistributionsOstreeOstreeCreateWithResponse call
func ParseDistributionsOstreeOstreeCreateResponse(rsp *http.Response) (*DistributionsOstreeOstreeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DistributionsOstreeOstreeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseDistributionsOstreeOstreeDeleteResponse parses an HTTP response from a DistributionsOstreeOstreeDeleteWithResponse call
func ParseDistributionsOstreeOstreeDeleteResponse(rsp *http.Response) (*DistributionsOstreeOstreeDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DistributionsOstreeOstreeDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseDistributionsOstreeOstreeReadResponse parses an HTTP response from a DistributionsOstreeOstreeReadWithResponse call
func ParseDistributionsOstreeOstreeReadResponse(rsp *http.Response) (*DistributionsOstreeOstreeReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DistributionsOstreeOstreeReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OstreeOstreeDistributionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDistributionsOstreeOstreePartialUpdateResponse parses an HTTP response from a DistributionsOstreeOstreePartialUpdateWithResponse call
func ParseDistributionsOstreeOstreePartialUpdateResponse(rsp *http.Response) (*DistributionsOstreeOstreePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DistributionsOstreeOstreePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseDistributionsOstreeOstreeUpdateResponse parses an HTTP response from a DistributionsOstreeOstreeUpdateWithResponse call
func ParseDistributionsOstreeOstreeUpdateResponse(rsp *http.Response) (*DistributionsOstreeOstreeUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DistributionsOstreeOstreeUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseDistributionsOstreeOstreeAddRoleResponse parses an HTTP response from a DistributionsOstreeOstreeAddRoleWithResponse call
func ParseDistributionsOstreeOstreeAddRoleResponse(rsp *http.Response) (*DistributionsOstreeOstreeAddRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DistributionsOstreeOstreeAddRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDistributionsOstreeOstreeListRolesResponse parses an HTTP response from a DistributionsOstreeOstreeListRolesWithResponse call
func ParseDistributionsOstreeOstreeListRolesResponse(rsp *http.Response) (*DistributionsOstreeOstreeListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DistributionsOstreeOstreeListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDistributionsOstreeOstreeMyPermissionsResponse parses an HTTP response from a DistributionsOstreeOstreeMyPermissionsWithResponse call
func ParseDistributionsOstreeOstreeMyPermissionsResponse(rsp *http.Response) (*DistributionsOstreeOstreeMyPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DistributionsOstreeOstreeMyPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyPermissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDistributionsOstreeOstreeRemoveRoleResponse parses an HTTP response from a DistributionsOstreeOstreeRemoveRoleWithResponse call
func ParseDistributionsOstreeOstreeRemoveRoleResponse(rsp *http.Response) (*DistributionsOstreeOstreeRemoveRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DistributionsOstreeOstreeRemoveRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDistributionsOstreeOstreeSetLabelResponse parses an HTTP response from a DistributionsOstreeOstreeSetLabelWithResponse call
func ParseDistributionsOstreeOstreeSetLabelResponse(rsp *http.Response) (*DistributionsOstreeOstreeSetLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DistributionsOstreeOstreeSetLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDistributionsOstreeOstreeUnsetLabelResponse parses an HTTP response from a DistributionsOstreeOstreeUnsetLabelWithResponse call
func ParseDistributionsOstreeOstreeUnsetLabelResponse(rsp *http.Response) (*DistributionsOstreeOstreeUnsetLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DistributionsOstreeOstreeUnsetLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UnsetLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainsListResponse parses an HTTP response from a DomainsListWithResponse call
func ParseDomainsListResponse(rsp *http.Response) (*DomainsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDomainResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainsCreateResponse parses an HTTP response from a DomainsCreateWithResponse call
func ParseDomainsCreateResponse(rsp *http.Response) (*DomainsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DomainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainsDeleteResponse parses an HTTP response from a DomainsDeleteWithResponse call
func ParseDomainsDeleteResponse(rsp *http.Response) (*DomainsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseDomainsReadResponse parses an HTTP response from a DomainsReadWithResponse call
func ParseDomainsReadResponse(rsp *http.Response) (*DomainsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainsPartialUpdateResponse parses an HTTP response from a DomainsPartialUpdateWithResponse call
func ParseDomainsPartialUpdateResponse(rsp *http.Response) (*DomainsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseDomainsUpdateResponse parses an HTTP response from a DomainsUpdateWithResponse call
func ParseDomainsUpdateResponse(rsp *http.Response) (*DomainsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileListResponse parses an HTTP response from a RepositoriesFileFileListWithResponse call
func ParseRepositoriesFileFileListResponse(rsp *http.Response) (*RepositoriesFileFileListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedfileFileRepositoryResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileCreateResponse parses an HTTP response from a RepositoriesFileFileCreateWithResponse call
func ParseRepositoriesFileFileCreateResponse(rsp *http.Response) (*RepositoriesFileFileCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FileFileRepositoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileDeleteResponse parses an HTTP response from a RepositoriesFileFileDeleteWithResponse call
func ParseRepositoriesFileFileDeleteResponse(rsp *http.Response) (*RepositoriesFileFileDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileReadResponse parses an HTTP response from a RepositoriesFileFileReadWithResponse call
func ParseRepositoriesFileFileReadResponse(rsp *http.Response) (*RepositoriesFileFileReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileFileRepositoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFilePartialUpdateResponse parses an HTTP response from a RepositoriesFileFilePartialUpdateWithResponse call
func ParseRepositoriesFileFilePartialUpdateResponse(rsp *http.Response) (*RepositoriesFileFilePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFilePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileUpdateResponse parses an HTTP response from a RepositoriesFileFileUpdateWithResponse call
func ParseRepositoriesFileFileUpdateResponse(rsp *http.Response) (*RepositoriesFileFileUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileAddRoleResponse parses an HTTP response from a RepositoriesFileFileAddRoleWithResponse call
func ParseRepositoriesFileFileAddRoleResponse(rsp *http.Response) (*RepositoriesFileFileAddRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileAddRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileListRolesResponse parses an HTTP response from a RepositoriesFileFileListRolesWithResponse call
func ParseRepositoriesFileFileListRolesResponse(rsp *http.Response) (*RepositoriesFileFileListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileModifyResponse parses an HTTP response from a RepositoriesFileFileModifyWithResponse call
func ParseRepositoriesFileFileModifyResponse(rsp *http.Response) (*RepositoriesFileFileModifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileModifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileMyPermissionsResponse parses an HTTP response from a RepositoriesFileFileMyPermissionsWithResponse call
func ParseRepositoriesFileFileMyPermissionsResponse(rsp *http.Response) (*RepositoriesFileFileMyPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileMyPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyPermissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileRemoveRoleResponse parses an HTTP response from a RepositoriesFileFileRemoveRoleWithResponse call
func ParseRepositoriesFileFileRemoveRoleResponse(rsp *http.Response) (*RepositoriesFileFileRemoveRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileRemoveRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileSetLabelResponse parses an HTTP response from a RepositoriesFileFileSetLabelWithResponse call
func ParseRepositoriesFileFileSetLabelResponse(rsp *http.Response) (*RepositoriesFileFileSetLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileSetLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SetLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileSyncResponse parses an HTTP response from a RepositoriesFileFileSyncWithResponse call
func ParseRepositoriesFileFileSyncResponse(rsp *http.Response) (*RepositoriesFileFileSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileUnsetLabelResponse parses an HTTP response from a RepositoriesFileFileUnsetLabelWithResponse call
func ParseRepositoriesFileFileUnsetLabelResponse(rsp *http.Response) (*RepositoriesFileFileUnsetLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileUnsetLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UnsetLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileVersionsListResponse parses an HTTP response from a RepositoriesFileFileVersionsListWithResponse call
func ParseRepositoriesFileFileVersionsListResponse(rsp *http.Response) (*RepositoriesFileFileVersionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileVersionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRepositoryVersionResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileVersionsDeleteResponse parses an HTTP response from a RepositoriesFileFileVersionsDeleteWithResponse call
func ParseRepositoriesFileFileVersionsDeleteResponse(rsp *http.Response) (*RepositoriesFileFileVersionsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileVersionsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileVersionsReadResponse parses an HTTP response from a RepositoriesFileFileVersionsReadWithResponse call
func ParseRepositoriesFileFileVersionsReadResponse(rsp *http.Response) (*RepositoriesFileFileVersionsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileVersionsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepositoryVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRepositoriesFileFileVersionsRepairResponse parses an HTTP response from a RepositoriesFileFileVersionsRepairWithResponse call
func ParseRepositoriesFileFileVersionsRepairResponse(rsp *http.Response) (*RepositoriesFileFileVersionsRepairResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesFileFileVersionsRepairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeListResponse parses an HTTP response from a RepositoriesOstreeOstreeListWithResponse call
func ParseRepositoriesOstreeOstreeListResponse(rsp *http.Response) (*RepositoriesOstreeOstreeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedostreeOstreeRepositoryResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeCreateResponse parses an HTTP response from a RepositoriesOstreeOstreeCreateWithResponse call
func ParseRepositoriesOstreeOstreeCreateResponse(rsp *http.Response) (*RepositoriesOstreeOstreeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OstreeOstreeRepositoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeDeleteResponse parses an HTTP response from a RepositoriesOstreeOstreeDeleteWithResponse call
func ParseRepositoriesOstreeOstreeDeleteResponse(rsp *http.Response) (*RepositoriesOstreeOstreeDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeReadResponse parses an HTTP response from a RepositoriesOstreeOstreeReadWithResponse call
func ParseRepositoriesOstreeOstreeReadResponse(rsp *http.Response) (*RepositoriesOstreeOstreeReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OstreeOstreeRepositoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreePartialUpdateResponse parses an HTTP response from a RepositoriesOstreeOstreePartialUpdateWithResponse call
func ParseRepositoriesOstreeOstreePartialUpdateResponse(rsp *http.Response) (*RepositoriesOstreeOstreePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeUpdateResponse parses an HTTP response from a RepositoriesOstreeOstreeUpdateWithResponse call
func ParseRepositoriesOstreeOstreeUpdateResponse(rsp *http.Response) (*RepositoriesOstreeOstreeUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeAddRoleResponse parses an HTTP response from a RepositoriesOstreeOstreeAddRoleWithResponse call
func ParseRepositoriesOstreeOstreeAddRoleResponse(rsp *http.Response) (*RepositoriesOstreeOstreeAddRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeAddRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeImportAllResponse parses an HTTP response from a RepositoriesOstreeOstreeImportAllWithResponse call
func ParseRepositoriesOstreeOstreeImportAllResponse(rsp *http.Response) (*RepositoriesOstreeOstreeImportAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeImportAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeImportCommitsResponse parses an HTTP response from a RepositoriesOstreeOstreeImportCommitsWithResponse call
func ParseRepositoriesOstreeOstreeImportCommitsResponse(rsp *http.Response) (*RepositoriesOstreeOstreeImportCommitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeImportCommitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeListRolesResponse parses an HTTP response from a RepositoriesOstreeOstreeListRolesWithResponse call
func ParseRepositoriesOstreeOstreeListRolesResponse(rsp *http.Response) (*RepositoriesOstreeOstreeListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeModifyResponse parses an HTTP response from a RepositoriesOstreeOstreeModifyWithResponse call
func ParseRepositoriesOstreeOstreeModifyResponse(rsp *http.Response) (*RepositoriesOstreeOstreeModifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeModifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeMyPermissionsResponse parses an HTTP response from a RepositoriesOstreeOstreeMyPermissionsWithResponse call
func ParseRepositoriesOstreeOstreeMyPermissionsResponse(rsp *http.Response) (*RepositoriesOstreeOstreeMyPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeMyPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyPermissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeRemoveRoleResponse parses an HTTP response from a RepositoriesOstreeOstreeRemoveRoleWithResponse call
func ParseRepositoriesOstreeOstreeRemoveRoleResponse(rsp *http.Response) (*RepositoriesOstreeOstreeRemoveRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeRemoveRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeSetLabelResponse parses an HTTP response from a RepositoriesOstreeOstreeSetLabelWithResponse call
func ParseRepositoriesOstreeOstreeSetLabelResponse(rsp *http.Response) (*RepositoriesOstreeOstreeSetLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeSetLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SetLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeSyncResponse parses an HTTP response from a RepositoriesOstreeOstreeSyncWithResponse call
func ParseRepositoriesOstreeOstreeSyncResponse(rsp *http.Response) (*RepositoriesOstreeOstreeSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRepositoriesOstreeOstreeUnsetLabelResponse parses an HTTP response from a RepositoriesOstreeOstreeUnsetLabelWithResponse call
func ParseRepositoriesOstreeOstreeUnsetLabelResponse(rsp *http.Response) (*RepositoriesOstreeOstreeUnsetLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RepositoriesOstreeOstreeUnsetLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UnsetLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTasksListResponse parses an HTTP response from a TasksListWithResponse call
func ParseTasksListResponse(rsp *http.Response) (*TasksListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TasksListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTaskResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTasksPurgeResponse parses an HTTP response from a TasksPurgeWithResponse call
func ParseTasksPurgeResponse(rsp *http.Response) (*TasksPurgeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TasksPurgeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AsyncOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseTasksDeleteResponse parses an HTTP response from a TasksDeleteWithResponse call
func ParseTasksDeleteResponse(rsp *http.Response) (*TasksDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TasksDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTasksReadResponse parses an HTTP response from a TasksReadWithResponse call
func ParseTasksReadResponse(rsp *http.Response) (*TasksReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TasksReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTasksCancelResponse parses an HTTP response from a TasksCancelWithResponse call
func ParseTasksCancelResponse(rsp *http.Response) (*TasksCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TasksCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest TaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseTasksAddRoleResponse parses an HTTP response from a TasksAddRoleWithResponse call
func ParseTasksAddRoleResponse(rsp *http.Response) (*TasksAddRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TasksAddRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTasksListRolesResponse parses an HTTP response from a TasksListRolesWithResponse call
func ParseTasksListRolesResponse(rsp *http.Response) (*TasksListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TasksListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTasksMyPermissionsResponse parses an HTTP response from a TasksMyPermissionsWithResponse call
func ParseTasksMyPermissionsResponse(rsp *http.Response) (*TasksMyPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TasksMyPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyPermissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTasksRemoveRoleResponse parses an HTTP response from a TasksRemoveRoleWithResponse call
func ParseTasksRemoveRoleResponse(rsp *http.Response) (*TasksRemoveRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TasksRemoveRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NestedRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
