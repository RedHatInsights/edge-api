// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clients/imagebuilder/client.go

// Package mock_imagebuilder is a generated GoMock package.
package mock_imagebuilder

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	imagebuilder "github.com/redhatinsights/edge-api/pkg/clients/imagebuilder"
	models "github.com/redhatinsights/edge-api/pkg/models"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// ComposeCommit mocks base method.
func (m *MockClientInterface) ComposeCommit(image *models.Image) (*models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComposeCommit", image)
	ret0, _ := ret[0].(*models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComposeCommit indicates an expected call of ComposeCommit.
func (mr *MockClientInterfaceMockRecorder) ComposeCommit(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComposeCommit", reflect.TypeOf((*MockClientInterface)(nil).ComposeCommit), image)
}

// ComposeInstaller mocks base method.
func (m *MockClientInterface) ComposeInstaller(image *models.Image) (*models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComposeInstaller", image)
	ret0, _ := ret[0].(*models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComposeInstaller indicates an expected call of ComposeInstaller.
func (mr *MockClientInterfaceMockRecorder) ComposeInstaller(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComposeInstaller", reflect.TypeOf((*MockClientInterface)(nil).ComposeInstaller), image)
}

// GetCommitStatus mocks base method.
func (m *MockClientInterface) GetCommitStatus(image *models.Image) (*models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitStatus", image)
	ret0, _ := ret[0].(*models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitStatus indicates an expected call of GetCommitStatus.
func (mr *MockClientInterfaceMockRecorder) GetCommitStatus(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitStatus", reflect.TypeOf((*MockClientInterface)(nil).GetCommitStatus), image)
}

// GetInstallerStatus mocks base method.
func (m *MockClientInterface) GetInstallerStatus(image *models.Image) (*models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallerStatus", image)
	ret0, _ := ret[0].(*models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallerStatus indicates an expected call of GetInstallerStatus.
func (mr *MockClientInterfaceMockRecorder) GetInstallerStatus(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallerStatus", reflect.TypeOf((*MockClientInterface)(nil).GetInstallerStatus), image)
}

// GetMetadata mocks base method.
func (m *MockClientInterface) GetMetadata(image *models.Image) (*models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", image)
	ret0, _ := ret[0].(*models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockClientInterfaceMockRecorder) GetMetadata(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockClientInterface)(nil).GetMetadata), image)
}

// SearchPackage mocks base method.
func (m *MockClientInterface) SearchPackage(packageName, arch, dist string) (*imagebuilder.SearchPackageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPackage", packageName, arch, dist)
	ret0, _ := ret[0].(*imagebuilder.SearchPackageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPackage indicates an expected call of SearchPackage.
func (mr *MockClientInterfaceMockRecorder) SearchPackage(packageName, arch, dist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPackage", reflect.TypeOf((*MockClientInterface)(nil).SearchPackage), packageName, arch, dist)
}
