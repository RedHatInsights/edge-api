// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clients/playbookdispatcher/client.go

// Package mock_playbookdispatcher is a generated GoMock package.
package mock_playbookdispatcher

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	playbookdispatcher "github.com/redhatinsights/edge-api/pkg/clients/playbookdispatcher"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// ExecuteDispatcher mocks base method.
func (m *MockClientInterface) ExecuteDispatcher(payload playbookdispatcher.DispatcherPayload) ([]playbookdispatcher.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteDispatcher", payload)
	ret0, _ := ret[0].([]playbookdispatcher.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteDispatcher indicates an expected call of ExecuteDispatcher.
func (mr *MockClientInterfaceMockRecorder) ExecuteDispatcher(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDispatcher", reflect.TypeOf((*MockClientInterface)(nil).ExecuteDispatcher), payload)
}
