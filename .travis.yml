arch: amd64   # Full VM on AWS or GCE
dist: focal  # Ubuntu Focal 20.04
services: docker
language: go
go: 1.16
os: linux     # Linux OS
env:
  global:
    - FLEET_MANAGEMENT_ORG: quay.io/fleet-management
branches:
  only:
    - main
    - api-snake
before_install:
  - |
    # if [ "$TRAVIS_PULL_REQUEST" != false ]; then
    #  export TAG="pr-${TRAVIS_PULL_REQUEST}"
    #  export LIBFDO_IMAGE="${FLEET_MANAGEMENT_ORG}/pr-checks:${TAG}-libfdo"
    #  export EDGE_API_IMAGE="${FLEET_MANAGEMENT_ORG}/pr-checks:${TAG}-edge-api"
    # else
    export TAG="latest"
    export LIBFDO_IMAGE="${FLEET_MANAGEMENT_ORG}/libfdo-data:${TAG}"
    export EDGE_API_IMAGE="${FLEET_MANAGEMENT_ORG}/edge-api:${TAG}"
    # fi
jobs:
  include:
    # - stage: "Build libfdo-data"
    #   script:
    #     - if [ "$TRAVIS_PULL_REQUEST" != false ]; then echo "LABEL quay.expires-after=2d" >> ./test-container/Dockerfile; fi
    #     - docker build -t ${LIBFDO_IMAGE} -f ./test-container/Dockerfile .
    #     - docker login quay.io -u ${FLEETER_BOT:-${FLEETER_BOT_PR}} -p ${FLEETER_PASS:-${FLEETER_PASS_PR}} >/dev/null 2>&1
    #     - docker push ${LIBFDO_IMAGE}
    - stage: "Build & Test"
    # name: "Build edge-api"
    # script:
    #   - if [ "$TRAVIS_PULL_REQUEST" != false ]; then echo "LABEL quay.expires-after=2d" >> ./Dockerfile; fi
    #   - sed -i 's|registry.access.redhat.com/ubi8/ubi|quay.io/centos/centos:stream8|' ./Dockerfile
    #   - sed -i 's|.*ubi-micro-build.*ubi.repo||' ./Dockerfile
    #   - sed -i "s|${FLEET_MANAGEMENT_ORG}/libfdo-data|${LIBFDO_IMAGE}|" ./Dockerfile
    #   - docker build -t ${EDGE_API_IMAGE} -f ./Dockerfile .
    #   - docker login quay.io -u ${FLEETER_BOT:-${FLEETER_BOT_PR}} -p ${FLEETER_PASS:-${FLEETER_PASS_PR}} >/dev/null 2>&1
    #   - docker push ${EDGE_API_IMAGE}
    # - name: "Static Code Analysis"
    #  script:
    #    - docker run --rm -w /edge-api -v $(pwd):/edge-api ${LIBFDO_IMAGE} /bin/sh -c "staticcheck -go 1.15 -f stylish ./..."
    # - name: "Golang Security Checker"
    #   script:
    #   - docker run --rm -v $(pwd):/edge-api -w /edge-api ${LIBFDO_IMAGE} /bin/sh -c "gosec ./..."
    # TODO: We can get this back as soon as we add python on the testing container
    # - name: "Validate spec-file"
    #   language: python
    #   python: 3.9
    #   install: pip install openapi-spec-validator
    #   script: python3 -m openapi_spec_validator ./cmd/spec/openapi.json
    # - name: "Coverage Testing"
    #   script:
    #     - docker run --rm -v $(pwd):/edge-api ${LIBFDO_IMAGE}
    #     - bash <(curl -s https://codecov.io/bash)
    - name: "Code Formatting"
      script: "[ $(go fmt ./... | wc -l) -eq 0 ]"
    - name: "Code Linting"
      script:
        - go get -u golang.org/x/lint/golint
        - "[ $(make -s lint | wc -l) -eq 0 ]"
